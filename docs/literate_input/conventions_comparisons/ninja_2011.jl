md"""
# NINJA (2011)

!!! info "Summary"
    The NINJA collaboration's definitions of the spherical harmonics and Wigner's ``d``
    functions agrees with the definitions used in the `SphericalFunctions` package.

Motivated by the need for a shared set of conventions in the NINJA project, a broad
cross-section of researchers involved in modeling gravitational waves (including the author
of this package) prepared Ref. [AjithEtAl_2011](@cite).  It is worth noting that the first
version posted to the arXiv included an unfortunate typo in the definition of the
spin-weighted spherical harmonics.  This was corrected in the second version, and remains
correct in the final ‚Äî third ‚Äî version.

The spherical coordinates are standard physicists' coordinates, except that the polar angle
is denoted ``\iota``:

> we define standard spherical coordinates ``(r, Œπ, œÜ)`` where ``Œπ`` is the inclination
> angle from the z-axis and ``œÜ`` is the phase angle.


## Implementing formulas

We begin by writing code that implements the formulas from Ref. [AjithEtAl_2011](@cite).  We
encapsulate the formulas in a module so that we can test them against the SphericalFunctions
package.

"""
using TestItems: @testitem  #hide
@testitem "NINJA conventions" setup=[ConventionsUtilities, ConventionsSetup, Utilities] begin  #hide

module NINJA

import ..ConventionsUtilities: ùíæ, ‚ùó
#+

# The spin-weighted spherical harmonics are defined in Eq. (II.7) as
# ```math
#   {}^{-s}Y_{l,m} = (-1)^s \sqrt{\frac{2l+1}{4\pi}}
#   d^{l}_{m,s}(\iota) e^{im\phi}.
# ```
# Just for convenience, we eliminate the negative sign on the left-hand side:
# ```math
#   {}^{s}Y_{l,m} = (-1)^{-s} \sqrt{\frac{2l+1}{4\pi}}
#   d^{l}_{m,-s}(\iota) e^{im\phi}.
# ```
function ‚ÇõY‚Çó‚Çò(s, l, m, Œπ::T, œï::T) where {T<:Real}
    (-1)^(-s) * ‚àö((2l + 1) / (4T(œÄ))) * d(l, m, -s, Œπ) * exp(ùíæ * m * œï)
end
#+

# Immediately following that, in Eq. (II.8), we find the definition of Wigner's ``d``
# function (again, noting that this expression was incorrect in version 1 of the paper, but
# correct in versions 2 and 3):
# ```math
#   d^{l}_{m,s}(\iota)
#   =
#   \sum_{k = k_1}^{k_2}
#   \frac{(-1)^k [(l+m)!(l-m)!(l+s)!(l-s)!]^{1/2}}
#   {(l+m-k)!(l-s-k)!k!(k+s-m)!}
#   \left(\cos\left(\frac{\iota}{2}\right)\right)^{2l+m-s-2k}
#   \left(\sin\left(\frac{\iota}{2}\right)\right)^{2k+s-m},
# ```
# with ``k_1 = \textrm{max}(0, m-s)`` and ``k_2=\textrm{min}(l+m, l-s)``.
function d(l, m, s, Œπ::T) where {T<:Real}
    k‚ÇÅ = max(0, m - s)
    k‚ÇÇ = min(l + m, l - s)
    sum(
        (-1)^k
        * T(
            ((l + m)‚ùó * (l - m)‚ùó * (l + s)‚ùó * (l - s)‚ùó)^(1//2)
           / ((l + m - k)‚ùó * (l - s - k)‚ùó * (k)‚ùó * (k + s - m)‚ùó)
        )
         * cos(Œπ / 2) ^ (2l + m - s - 2k)
         * sin(Œπ / 2) ^ (2k + s - m)
        for k in k‚ÇÅ:k‚ÇÇ;
        init=zero(T)
    )
end
#+

# For reference, several explicit formulas are also provided in Eqs.  (II.9)--(II.13):
# ```math
# \begin{aligned}
#   {}^{-2}Y_{2,2} &= \sqrt{\frac{5}{64\pi}} (1+\cos\iota)^2 e^{2i\phi},\\
#   {}^{-2}Y_{2,1} &= \sqrt{\frac{5}{16\pi}} \sin\iota (1 + \cos\iota) e^{i\phi},\\
#   {}^{-2}Y_{2,0} &= \sqrt{\frac{15}{32\pi}} \sin^2\iota,\\
#   {}^{-2}Y_{2,-1} &= \sqrt{\frac{5}{16\pi}} \sin\iota (1 - \cos\iota) e^{-i\phi},\\
#   {}^{-2}Y_{2,-2} &= \sqrt{\frac{5}{64\pi}} (1-\cos\iota)^2 e^{-2i\phi}.
# \end{aligned}
# ```
‚Çã‚ÇÇY‚ÇÇ‚ÇÇ(Œπ::T, œï::T) where {T<:Real} = ‚àö(5 / (64T(œÄ))) * (1 + cos(Œπ))^2 * exp(2ùíæ*œï)
‚Çã‚ÇÇY‚ÇÇ‚ÇÅ(Œπ::T, œï::T) where {T<:Real} = ‚àö(5 / (16T(œÄ))) * sin(Œπ) * (1 + cos(Œπ)) * exp(ùíæ*œï)
‚Çã‚ÇÇY‚ÇÇ‚ÇÄ(Œπ::T, œï::T) where {T<:Real} = ‚àö(15 / (32T(œÄ))) * sin(Œπ)^2
‚Çã‚ÇÇY‚ÇÇ‚Çã‚ÇÅ(Œπ::T, œï::T) where {T<:Real} = ‚àö(5 / (16T(œÄ))) * sin(Œπ) * (1 - cos(Œπ)) * exp(-ùíæ*œï)
‚Çã‚ÇÇY‚ÇÇ‚Çã‚ÇÇ(Œπ::T, œï::T) where {T<:Real} = ‚àö(5 / (64T(œÄ))) * (1 - cos(Œπ))^2 * exp(-2ùíæ*œï)
#+

# The paper did not give an expression for the Wigner D-matrices, but the definition of the
# spin-weighted spherical harmonics is probably most relevant, so this will suffice.

end  # module NINJA
#+

# ## Tests
#
# We can now test the functions against the equivalent functions from the SphericalFunctions
# package.  We will need to test approximate floating-point equality, so we set absolute and
# relative tolerances (respectively) in terms of the machine epsilon:
œµ‚Çê = 10eps()
œµ·µ£ = 10eps()
#+

# First, we compare the explicit formulas to the general formulas.
for (Œπ, œï) ‚àà Œ∏œïrange(Float64, 1)
    @test NINJA.‚ÇõY‚Çó‚Çò(-2, 2, 2, Œπ, œï) ‚âà NINJA.‚Çã‚ÇÇY‚ÇÇ‚ÇÇ(Œπ, œï) atol=œµ‚Çê rtol=œµ·µ£
    @test NINJA.‚ÇõY‚Çó‚Çò(-2, 2, 1, Œπ, œï) ‚âà NINJA.‚Çã‚ÇÇY‚ÇÇ‚ÇÅ(Œπ, œï) atol=œµ‚Çê rtol=œµ·µ£
    @test NINJA.‚ÇõY‚Çó‚Çò(-2, 2, 0, Œπ, œï) ‚âà NINJA.‚Çã‚ÇÇY‚ÇÇ‚ÇÄ(Œπ, œï) atol=œµ‚Çê rtol=œµ·µ£
    @test NINJA.‚ÇõY‚Çó‚Çò(-2, 2, -1, Œπ, œï) ‚âà NINJA.‚Çã‚ÇÇY‚ÇÇ‚Çã‚ÇÅ(Œπ, œï) atol=œµ‚Çê rtol=œµ·µ£
    @test NINJA.‚ÇõY‚Çó‚Çò(-2, 2, -2, Œπ, œï) ‚âà NINJA.‚Çã‚ÇÇY‚ÇÇ‚Çã‚ÇÇ(Œπ, œï) atol=œµ‚Çê rtol=œµ·µ£
end
#+

# Next, we compare the general formulas to the SphericalFunctions package.
# We will only test up to
‚Ñì‚Çò‚Çê‚Çì = 4
#+
# and
s‚Çò‚Çê‚Çì = 2
#+
# because the formulas are very slow, and this will be sufficient to sort out any sign or
# normalization differences, which are the most likely source of error.
for (Œ∏, œï) ‚àà Œ∏œïrange()
    for (s, ‚Ñì, m) ‚àà s‚Ñìmrange(‚Ñì‚Çò‚Çê‚Çì, s‚Çò‚Çê‚Çì)
        @test NINJA.‚ÇõY‚Çó‚Çò(s, ‚Ñì, m, Œ∏, œï) ‚âà SphericalFunctions.Y(s, ‚Ñì, m, Œ∏, œï) atol=œµ‚Çê rtol=œµ·µ£
    end
end
#+

# Finally, we compare the Wigner ``d`` matrix to the SphericalFunctions package.
for Œπ ‚àà Œ∏range()
    for (‚Ñì, m‚Ä≤, m) ‚àà ‚Ñìm‚Ä≤mrange(‚Ñì‚Çò‚Çê‚Çì)
        @test NINJA.d(‚Ñì, m‚Ä≤, m, Œπ) ‚âà SphericalFunctions.d(‚Ñì, m‚Ä≤, m, Œπ) atol=œµ‚Çê rtol=œµ·µ£
    end
end
#+

# These successful tests show that both the spin-weighted spherical harmonics and the Wigner
# ``d`` matrix defined by the NINJA collaboration agree with the corresponding functions
# defined by the `SphericalFunctions` package.

end  #hide
