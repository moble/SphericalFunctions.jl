export HCalculator
#export H_recursion_coefficients, HCalculator, DCalculator

# """
#     H_recursion_coefficients(‚Ñì‚Çò‚Çê‚Çì, T)
#
# Pre-compute constants used in Wigner H recursion.
#
# """
# function H_recursion_coefficients(‚Ñì‚Çò‚Çê‚Çì, ::Type{T}) where {T<:Real}
#     a‚Çô·µê = T[‚àö((n+1+m)*(n+1-m)/T((2n+1)*(2n+3))) for n in 0:‚Ñì‚Çò‚Çê‚Çì+1 for m in 0:n]
#     b‚Çô·µê = T[(m<0 ? -1 : 1) * ‚àö((n-m-1)*(n-m)/T((2n-1)*(2n+1))) for n in 0:‚Ñì‚Çò‚Çê‚Çì+1 for m in -n:n]
#     d‚Çô·µê = T[(m<0 ? -1 : 1) * (‚àöT((n-m)*(n+m+1))) / 2 for n in 0:‚Ñì‚Çò‚Çê‚Çì+1 for m in -n:n]
#     (a‚Çô·µê, b‚Çô·µê, d‚Çô·µê)
# end

struct HCalculator{T<:Real}
    ‚Ñì‚Çò‚Çê‚Çì::Int
    m‚Ä≤‚Çò‚Çê‚Çì::Int
    H‚Çô‚Çä‚ÇÅ‚Å∞::Vector{T}
    H‚Çô::Vector{T}
end
Base.show(io::IO, hc::HCalculator{T}) where T = print(io, "HCalculator($(T), $(hc.‚Ñì‚Çò‚Çê‚Çì), $(hc.m‚Ä≤‚Çò‚Çê‚Çì)) ")

function HCalculator(T, ‚Ñì‚Çò‚Çê‚Çì, m‚Ä≤‚Çò‚Çê‚Çì=‚Ñì‚Çò‚Çê‚Çì)
    @assert ‚Ñì‚Çò‚Çê‚Çì ‚â• 0
    m‚Ä≤‚Çò‚Çê‚Çì = min(abs(m‚Ä≤‚Çò‚Çê‚Çì), ‚Ñì‚Çò‚Çê‚Çì)
    H‚Çôsize = m‚Ä≤‚Çò‚Çê‚Çì * (2*‚Ñì‚Çò‚Çê‚Çì - m‚Ä≤‚Çò‚Çê‚Çì + 1) + ‚Ñì‚Çò‚Çê‚Çì + 1
    H‚Çô‚Çä‚ÇÅ‚Å∞ = Vector{T}(undef, ‚Ñì‚Çò‚Çê‚Çì+2)
    H‚Çô = Vector{T}(undef, H‚Çôsize)
    HCalculator{T}(‚Ñì‚Çò‚Çê‚Çì, m‚Ä≤‚Çò‚Çê‚Çì, H‚Çô‚Çä‚ÇÅ‚Å∞, H‚Çô)
end

# struct DCalculator{T<:Real}
#     ‚Ñì‚Çò‚Çê‚Çì::Int
#     Hc::HCalculator{T}
#     ùîáÀ°::OffsetMatrix{Complex{T}}
#     expimŒ±::Vector{Complex{T}}
#     expimŒ≥::Vector{Complex{T}}
# end
# Base.show(io::IO, dc::DCalculator{T}) where T = print(io, "DCalculator($(T), $(dc.‚Ñì‚Çò‚Çê‚Çì)) ")

# function DCalculator(T, ‚Ñì‚Çò‚Çê‚Çì)
#     Hc = HCalculator(T, ‚Ñì‚Çò‚Çê‚Çì)
#     A = Array{complex(T)}(undef, 2‚Ñì‚Çò‚Çê‚Çì+1, 2‚Ñì‚Çò‚Çê‚Çì+1)
#     ùîáÀ° = OffsetMatrix(transpose(A), -‚Ñì‚Çò‚Çê‚Çì-1, -‚Ñì‚Çò‚Çê‚Çì-1)
#     expimŒ± = Vector{complex(T)}(undef, ‚Ñì‚Çò‚Çê‚Çì+1)
#     expimŒ≥ = Vector{complex(T)}(undef, ‚Ñì‚Çò‚Çê‚Çì+1)
#     DCalculator{T}(‚Ñì‚Çò‚Çê‚Çì, Hc, ùîáÀ°, expimŒ±, expimŒ≥)
# end
