### TODO: Test skipping all the complicated indexing tricks; use fancy indexing
### NOTES:
### 1. Caching coefficients provides a ~11% speedup at low ‚Ñì, but that falls off
###    as ‚Ñì increases, reaching ~4% around ‚Ñì=512.
### 2. This is probably a much more significant advantage for ALFs.

using .SphericalFunctions: complex_powers!
using Quaternionic: AbstractQuaternion, to_euler_phases!

@inline œµ(m) = ifelse(m > 0 && isodd(m), -1, 1)


@doc raw"""
    d_matrices(Œ≤, ‚Ñì‚Çò‚Çê‚Çì)
    d_matrices(expiŒ≤, ‚Ñì‚Çò‚Çê‚Çì)

Compute Wigner's ``d^{(\ell)}`` matrices with elements ``d^{(\ell)}_{m',m}(\beta)`` for all
``\ell \leq \ell_\mathrm{max}``.  The ``d`` matrices are sometimes called the "reduced"
Wigner matrices, in contrast to the full ``\mathfrak{D}`` matrices.

See [`d_matrices!`](@ref) for details about the input and output values.

This function only appropriate when you need to evaluate the matrices for a single value of
`Œ≤` or `expiŒ≤` because it allocates large arrays and performs many calculations that could
be reused.  If you need to evaluate the matrices for many values of `Œ≤` or `expiŒ≤`, you
should pre-allocate the storage with [`d_prep`](@ref), and then call [`d_matrices!`](@ref)
with the result instead.

"""
d_matrices(Œ≤::Real, ‚Ñì‚Çò‚Çê‚Çì) = d_matrices(cis(Œ≤), ‚Ñì‚Çò‚Çê‚Çì)


@doc raw"""
    d_matrices!(d_storage, Œ≤)
    d_matrices!(d_storage, expiŒ≤)
    d_matrices!(d, Œ≤, ‚Ñì‚Çò‚Çê‚Çì)
    d_matrices!(d, expiŒ≤, ‚Ñì‚Çò‚Çê‚Çì)

Compute Wigner's ``d^{(\ell)}`` matrices with elements ``d^{(\ell)}_{m',m}(\beta)`` for all
``\ell \leq \ell_\mathrm{max}``.  The ``d`` matrices are sometimes called the "reduced"
Wigner matrices, in contrast to the full ``\mathfrak{D}`` matrices.

In all cases, the result is returned in a 1-dimensional array ordered as

    [
        dÀ°‚Çò‚Çö,‚Çò(Œ≤)
        for ‚Ñì ‚àà 0:‚Ñì‚Çò‚Çê‚Çì
        for mp ‚àà -‚Ñì:‚Ñì
        for m ‚àà -‚Ñì:‚Ñì
    ]

When the first argument is `d`, it will be modified, so it must be at least as large as that
array.  When the first argument is `d_storage`, it should be the quantity returned by
[`d_prep`](@ref), and the result will be written into the `d` field of that tuple.  Both of
these options ‚Äî especially the latter ‚Äî reduce the number of allocations needed on each call
to the corresponding functions, which should increase the speed significantly.

!!! warn
    When using the `d_storage` argument (which is recommended), the returned quantity `d`
    will be an alias of `d_storage[1]`.  If you want to retain that data after the next call
    to [`d_matrices!`](@ref), you should copy it with `copy(d)`.

See also [`d_matrices`](@ref) for a simpler function call when you only need to evaluate the
matrices for a single value of `Œ≤` or `expiŒ≤`.

# Examples

```julia
using SphericalFunctions
‚Ñì‚Çò‚Çê‚Çì = 8
T = Float64
Œ≤ = T(1)/8
d_storage = d_prep(‚Ñì‚Çò‚Çê‚Çì, T)
d = d_matrices!(d_storage, Œ≤)
```

"""
d_matrices!(d, Œ≤::Real, ‚Ñì‚Çò‚Çê‚Çì) = d_matrices!(d, cis(Œ≤), ‚Ñì‚Çò‚Çê‚Çì)

d_matrices!(d_storage, Œ≤::Real) = d_matrices!(d_storage, cis(Œ≤))

function d_matrices(expiŒ≤::Complex{T}, ‚Ñì‚Çò‚Çê‚Çì) where T
    d_storage = d_prep(‚Ñì‚Çò‚Çê‚Çì, T)
    d = d_matrices!(d_storage, expiŒ≤)
    return d
end

function d_matrices!(d, expiŒ≤::Complex{T}, ‚Ñì‚Çò‚Çê‚Çì) where T
    d!(d, expiŒ≤, ‚Ñì‚Çò‚Çê‚Çì, H_recursion_coefficients(‚Ñì‚Çò‚Çê‚Çì, T))
    return d
end

function d_matrices!(d_storage, expiŒ≤::Complex{T}) where T
    d, H_rec_coeffs, ‚Ñì‚Çò‚Çê‚Çì = d_storage
    d!(d, expiŒ≤, ‚Ñì‚Çò‚Çê‚Çì, H_rec_coeffs)
    d
end

"""
    d_prep(‚Ñì‚Çò‚Çê‚Çì, [T=Float64])

Construct space and pre-compute recursion coefficients to compute Wigner's ``d`` matrix in
place.

This returns the `d_storage` arguments needed by [`d_matrices!`](@ref).

"""
function d_prep(‚Ñì‚Çò‚Çê‚Çì, ::Type{T}=Float64) where {T<:Real}
    d, H_rec_coeffs = dprep(‚Ñì‚Çò‚Çê‚Çì, T)
    (d, H_rec_coeffs, ‚Ñì‚Çò‚Çê‚Çì)
end

# Legacy API for d_matrices
function d!(d, expiŒ≤::Complex, ‚Ñì‚Çò‚Çê‚Çì, H_rec_coeffs)
    H!(d, expiŒ≤, ‚Ñì‚Çò‚Çê‚Çì, ‚Ñì‚Çò‚Çê‚Çì, H_rec_coeffs, WignerDindex)

    @inbounds for ‚Ñì in 0:‚Ñì‚Çò‚Çê‚Çì
        i0 = WignerDindex(‚Ñì, -‚Ñì, -‚Ñì)
        for m in -‚Ñì:-1
            oddm = isodd(m)
            for m‚Ä≤ in -‚Ñì:m
                i1 = i0 + (‚Ñì + m‚Ä≤) * (2‚Ñì + 1) + m + ‚Ñì
                i2 = i0 + (‚Ñì - m) * (2‚Ñì + 1) - m‚Ä≤ + ‚Ñì
                d[i1] = ifelse(oddm, -d[i2], d[i2])
            end
            for m‚Ä≤ in m+1:0
                i1 = i0 + (‚Ñì + m‚Ä≤) * (2‚Ñì + 1) + m + ‚Ñì
                i2 = i0 + (‚Ñì - m‚Ä≤) * (2‚Ñì + 1) - m + ‚Ñì
                d[i1] = ifelse(oddm, -d[i2], d[i2])
            end
            for m‚Ä≤ in 1:-m
                i1 = i0 + (‚Ñì + m‚Ä≤) * (2‚Ñì + 1) + m + ‚Ñì
                i2 = i0 + (‚Ñì - m‚Ä≤) * (2‚Ñì + 1) - m + ‚Ñì
                d[i1] = ifelse(isodd(m‚Ä≤)‚äªoddm, -d[i2], d[i2])
            end
            for m‚Ä≤ in 1-m:‚Ñì
                i1 = i0 + (‚Ñì + m‚Ä≤) * (2‚Ñì + 1) + m + ‚Ñì
                i2 = i0 + (‚Ñì + m) * (2‚Ñì + 1) + m‚Ä≤ + ‚Ñì
                d[i1] = ifelse(isodd(m‚Ä≤)‚äªoddm, -d[i2], d[i2])
            end
        end
        for m in 0:‚Ñì
            for m‚Ä≤ in -‚Ñì:-m-1
                i1 = i0 + (‚Ñì + m‚Ä≤) * (2‚Ñì + 1) + m + ‚Ñì
                i2 = i0 + (‚Ñì - m) * (2‚Ñì + 1) - m‚Ä≤ + ‚Ñì
                d[i1] = d[i2]
            end
            for m‚Ä≤ in m+1:‚Ñì
                i1 = i0 + (‚Ñì + m‚Ä≤) * (2‚Ñì + 1) + m + ‚Ñì
                i2 = i0 + (‚Ñì + m) * (2‚Ñì + 1) + m‚Ä≤ + ‚Ñì
                d[i1] = ifelse(isodd(m‚Ä≤), -d[i2], d[i2])
            end
        end
        for m‚Ä≤ in 1:2:‚Ñì
            i1 = i0 + (‚Ñì + m‚Ä≤) * (2‚Ñì + 1) + ‚Ñì
            for m in abs(m‚Ä≤):‚Ñì
                d[i1+m] *= -1
            end
        end
    end
    d
end
function d!(d, expiŒ≤::Complex{T}, ‚Ñì‚Çò‚Çê‚Çì) where {T<:Real}
    d!(d, expiŒ≤, ‚Ñì‚Çò‚Çê‚Çì, H_recursion_coefficients(‚Ñì‚Çò‚Çê‚Çì, T))
end
function d!(d, Œ≤::T, ‚Ñì‚Çò‚Çê‚Çì, H_rec_coeffs) where {T<:Real}
    d!(d, cis(Œ≤), ‚Ñì‚Çò‚Çê‚Çì, H_rec_coeffs)
end
function d!(d, Œ≤::T, ‚Ñì‚Çò‚Çê‚Çì) where {T<:Real}
    d!(d, cis(Œ≤), ‚Ñì‚Çò‚Çê‚Çì, H_recursion_coefficients(‚Ñì‚Çò‚Çê‚Çì, T))
end
function d(expiŒ≤::Complex{T}, ‚Ñì‚Çò‚Çê‚Çì) where {T<:Real}
    ùî° = Array{T}(undef, WignerDsize(‚Ñì‚Çò‚Çê‚Çì, ‚Ñì‚Çò‚Çê‚Çì))
    d!(ùî°, expiŒ≤, ‚Ñì‚Çò‚Çê‚Çì, H_recursion_coefficients(‚Ñì‚Çò‚Çê‚Çì, T))
end
d(Œ≤::T, ‚Ñì‚Çò‚Çê‚Çì) where {T<:Real} = d(cis(Œ≤), ‚Ñì‚Çò‚Çê‚Çì)
function dprep(‚Ñì‚Çò‚Çê‚Çì, ::Type{T}) where {T<:Real}
    d = Vector{T}(undef, WignerDsize(‚Ñì‚Çò‚Çê‚Çì))
    H_rec_coeffs = H_recursion_coefficients(‚Ñì‚Çò‚Çê‚Çì, T)
    d, H_rec_coeffs
end


@doc raw"""
    D_matrices(R, ‚Ñì‚Çò‚Çê‚Çì)
    D_matrices(Œ±, Œ≤, Œ≥, ‚Ñì‚Çò‚Çê‚Çì)

Compute Wigner's ùîá matrices ``\mathfrak{D}^{(\ell)}_{m',m}(\beta)`` for all ``\ell \leq
\ell_\mathrm{max}``.

See [`D_matrices!`](@ref) for details about the input and output values.

This function only appropriate when you need to evaluate the matrices for a single value of
`R` or `Œ±, Œ≤, Œ≥` because it allocates large arrays and performs many calculations that could
be reused.  If you need to evaluate the matrices for many values of `R` or `Œ±, Œ≤, Œ≥`, you
should pre-allocate the storage with [`D_prep`](@ref), and then call [`D_matrices!`](@ref)
with the result instead.

"""
function D_matrices(R, ‚Ñì‚Çò‚Çê‚Çì)
    D_storage = D_prep(‚Ñì‚Çò‚Çê‚Çì, eltype(R))
    D_matrices!(D_storage, R)
end

function D_matrices(Œ±, Œ≤, Œ≥, ‚Ñì‚Çò‚Çê‚Çì)
    T = promote_type(typeof.((Œ±, Œ≤, Œ≥))...)
    D_storage = D_prep(‚Ñì‚Çò‚Çê‚Çì, T)
    D_matrices!(D_storage, R)
end

@doc raw"""
    D_matrices!(D_storage, R)
    D_matrices!(D_storage, Œ±, Œ≤, Œ≥)
    D_matrices!(D, R, ‚Ñì‚Çò‚Çê‚Çì)
    D_matrices!(D, Œ±, Œ≤, Œ≥, ‚Ñì‚Çò‚Çê‚Çì)

Compute Wigner's ùîá matrices ``\mathfrak{D}^{(\ell)}_{m',m}(\beta)`` for all ``\ell \leq
\ell_\mathrm{max}``.

In all cases, the result is returned in a 1-dimensional array ordered as

    [
        ùîáÀ°‚Çò‚Çö,‚Çò(R)
        for ‚Ñì ‚àà 0:‚Ñì‚Çò‚Çê‚Çì
        for mp ‚àà -‚Ñì:‚Ñì
        for m ‚àà -‚Ñì:‚Ñì
    ]

When the first argument is `D`, it will be modified, so it must be at least as large as that
array. When the first argument is `D_storage`, it should be the quantity returned by
[`D_prep`](@ref), and the result will be written into the `D` field of that tuple.  Both of
these options ‚Äî especially the latter ‚Äî reduce the number of allocations needed on each call
to the corresponding functions, which should increase the speed significantly.  Note that
the `D` or `D_storage` arguments must have types compatible with the type of `R` or `Œ±, Œ≤,
Œ≥`.

!!! warn
    When using the `D_storage` argument (which is recommended), the returned quantity `D`
    will be an alias of `D_storage[1]`.  If you want to retain that data after the next call
    to [`D_matrices!`](@ref), you should copy it with `copy(D)`.

The `Œ±, Œ≤, Œ≥` arguments are Euler angles as described in the documentation of
[`Quaternionic.from_euler_angles`](https://moble.github.io/Quaternionic.jl/dev/manual/#Quaternionic.from_euler_angles-Tuple{Any,%20Any,%20Any}).

See also [`D_matrices`](@ref) for a simpler function call when you only need to evaluate the
matrices for a single value of `R` or `Œ±, Œ≤, Œ≥`.

# Examples

```julia
using Quaternionic, SphericalFunctions
‚Ñì‚Çò‚Çê‚Çì = 8
T = Float64
R = Rotor{T}(1, 2, 3, 4)  # Will be normalized automatically
D_storage = D_prep(‚Ñì‚Çò‚Çê‚Çì, T)
D = D_matrices!(D_storage, R)
```

"""
function D_matrices!(D, R, ‚Ñì‚Çò‚Çê‚Çì)
    D_storage = (D, Dworkspace(‚Ñì‚Çò‚Çê‚Çì, eltype(R))...)
    D_matrices!(D_storage, R)
end

function D_matrices!(D, Œ±, Œ≤, Œ≥, ‚Ñì‚Çò‚Çê‚Çì)
    T = promote_type(typeof.((Œ±, Œ≤, Œ≥))...)
    D_storage = (D, Dworkspace(‚Ñì‚Çò‚Çê‚Çì, T)...)
    D_matrices!(D_storage, Œ±, Œ≤, Œ≥)
end

function D_matrices!(D_storage, R)
    (ùîá, ‚Ñì‚Çò‚Çê‚Çì, H_rec_coeffs, e‚Å±·µê·µÖ, e‚Å±·µê·µû) = D_storage
    D!(ùîá, R, ‚Ñì‚Çò‚Çê‚Çì, H_rec_coeffs, e‚Å±·µê·µÖ, e‚Å±·µê·µû)
end

function D_matrices!(D_storage, Œ±, Œ≤, Œ≥)
    (ùîá, ‚Ñì‚Çò‚Çê‚Çì, H_rec_coeffs, e‚Å±·µê·µÖ, e‚Å±·µê·µû) = D_storage
    D!(ùîá, cis(Œ±), cis(Œ≤), cis(Œ≥), ‚Ñì‚Çò‚Çê‚Çì, H_rec_coeffs, e‚Å±·µê·µÖ, e‚Å±·µê·µû)
end

@doc raw"""
    D_prep(‚Ñì‚Çò‚Çê‚Çì, [T=Float64])

Construct storage space and pre-compute recursion coefficients to compute Wigner's
``\mathfrak{D}`` matrix in place.

This returns the `D_storage` arguments needed by [`D_matrices!`](@ref).

"""
function D_prep(‚Ñì‚Çò‚Çê‚Çì, ::Type{T}=Float64) where {T<:Real}
    ùîá, H_rec_coeffs, e‚Å±·µê·µÖ, e‚Å±·µê·µû = Dprep(‚Ñì‚Çò‚Çê‚Çì, T)
    (ùîá, ‚Ñì‚Çò‚Çê‚Çì, H_rec_coeffs, e‚Å±·µê·µÖ, e‚Å±·µê·µû)
end

# Legacy API for D_matrices
function D!(ùîá, R::AbstractQuaternion, ‚Ñì‚Çò‚Çê‚Çì, H_rec_coeffs, e‚Å±·µê·µÖ, e‚Å±·µê·µû)
    expiŒ±, expiŒ≤, expiŒ≥ = to_euler_phases(R)
    D!(ùîá, expiŒ±, expiŒ≤, expiŒ≥, ‚Ñì‚Çò‚Çê‚Çì, H_rec_coeffs, e‚Å±·µê·µÖ, e‚Å±·µê·µû)
end
function D!(ùîá, expiŒ±, expiŒ≤, expiŒ≥, ‚Ñì‚Çò‚Çê‚Çì, H_rec_coeffs, e‚Å±·µê·µÖ, e‚Å±·µê·µû)
    H!(ùîá, expiŒ≤, ‚Ñì‚Çò‚Çê‚Çì, ‚Ñì‚Çò‚Çê‚Çì, H_rec_coeffs, WignerDindex)
    complex_powers!(e‚Å±·µê·µÖ, expiŒ±)
    complex_powers!(e‚Å±·µê·µû, expiŒ≥)

    # ùîáÀ°‚Çò‚Çö,‚Çò(R) = dÀ°‚Çò‚Çö,‚Çò(R) exp[iœï‚Çê(m-mp)+iœï‚Çõ(m+mp)] = dÀ°‚Çò‚Çö,‚Çò(R) exp[i(œï‚Çõ+œï‚Çê)m+i(œï‚Çõ-œï‚Çê)mp]
    # exp[iœï‚Çõ] = RÃÇ‚Çõ = hat(R[0] + 1j * R[3]) = zp
    # exp[iœï‚Çê] = RÃÇ‚Çê = hat(R[2] + 1j * R[1]) = zm.conjugate()
    # exp[i(œï‚Çõ+œï‚Çê)] = zp * zm.conjugate() = z[2] = z·µß
    # exp[i(œï‚Çõ-œï‚Çê)] = zp * zm = z[0] = z‚Çê
    @inbounds for ‚Ñì in 0:‚Ñì‚Çò‚Çê‚Çì
        i0 = WignerDindex(‚Ñì, -‚Ñì, -‚Ñì)
        for m in -‚Ñì:-1
            oddm_factor = ifelse(isodd(m), -1, 1)
            for m‚Ä≤ in -‚Ñì:m
                i1 = i0 + (‚Ñì + m‚Ä≤) * (2‚Ñì + 1) + m + ‚Ñì
                i2 = i0 + (‚Ñì - m) * (2‚Ñì + 1) - m‚Ä≤ + ‚Ñì
                ùîá[i1] = oddm_factor * ùîá[i2] * conj(e‚Å±·µê·µû[-m+1] * e‚Å±·µê·µÖ[-m‚Ä≤+1])
            end
            for m‚Ä≤ in m+1:0
                i1 = i0 + (‚Ñì + m‚Ä≤) * (2‚Ñì + 1) + m + ‚Ñì
                i2 = i0 + (‚Ñì - m‚Ä≤) * (2‚Ñì + 1) - m + ‚Ñì
                ùîá[i1] = oddm_factor * ùîá[i2] * conj(e‚Å±·µê·µû[-m+1] * e‚Å±·µê·µÖ[-m‚Ä≤+1])
            end
            for m‚Ä≤ in 1:-m
                i1 = i0 + (‚Ñì + m‚Ä≤) * (2‚Ñì + 1) + m + ‚Ñì
                i2 = i0 + (‚Ñì - m‚Ä≤) * (2‚Ñì + 1) - m + ‚Ñì
                ùîá[i1] = ifelse(isodd(m‚Ä≤), -1, 1) * oddm_factor * ùîá[i2] * conj(e‚Å±·µê·µû[-m+1]) * e‚Å±·µê·µÖ[m‚Ä≤+1]
            end
            for m‚Ä≤ in 1-m:‚Ñì
                i1 = i0 + (‚Ñì + m‚Ä≤) * (2‚Ñì + 1) + m + ‚Ñì
                i2 = i0 + (‚Ñì + m) * (2‚Ñì + 1) + m‚Ä≤ + ‚Ñì
                ùîá[i1] = ifelse(isodd(m‚Ä≤), -1, 1) * oddm_factor * ùîá[i2] * conj(e‚Å±·µê·µû[-m+1]) * e‚Å±·µê·µÖ[m‚Ä≤+1]
            end
        end
        for m in 0:‚Ñì
            for m‚Ä≤ in -‚Ñì:-m-1
                i1 = i0 + (‚Ñì + m‚Ä≤) * (2‚Ñì + 1) + m + ‚Ñì
                i2 = i0 + (‚Ñì - m) * (2‚Ñì + 1) - m‚Ä≤ + ‚Ñì
                ùîá[i1] = ùîá[i2] * e‚Å±·µê·µû[m+1] * conj(e‚Å±·µê·µÖ[-m‚Ä≤+1])
            end
            for m‚Ä≤ in m+1:‚Ñì
                i1 = i0 + (‚Ñì + m‚Ä≤) * (2‚Ñì + 1) + m + ‚Ñì
                i2 = i0 + (‚Ñì + m) * (2‚Ñì + 1) + m‚Ä≤ + ‚Ñì
                ùîá[i1] = ifelse(isodd(m‚Ä≤), -ùîá[i2], ùîá[i2]) * e‚Å±·µê·µû[m+1] * e‚Å±·µê·µÖ[m‚Ä≤+1]
            end
        end
        for m‚Ä≤ in -‚Ñì:0
            i1 = i0 + (‚Ñì + m‚Ä≤) * (2‚Ñì + 1) + ‚Ñì
            for m in abs(m‚Ä≤):‚Ñì
                ùîá[i1+m] *= e‚Å±·µê·µû[m+1] * conj(e‚Å±·µê·µÖ[-m‚Ä≤+1])
            end
        end
        for m‚Ä≤ in 1:‚Ñì
            i1 = i0 + (‚Ñì + m‚Ä≤) * (2‚Ñì + 1) + ‚Ñì
            for m in abs(m‚Ä≤):‚Ñì
                ùîá[i1+m] *= ifelse(isodd(m‚Ä≤), -1, 1) * e‚Å±·µê·µû[m+1] * e‚Å±·µê·µÖ[m‚Ä≤+1]
            end
        end
    end
    ùîá
end
function Dprep(‚Ñì‚Çò‚Çê‚Çì, ::Type{T}) where {T<:Real}
    ùîá = Vector{Complex{T}}(undef, WignerDsize(‚Ñì‚Çò‚Çê‚Çì))
    H_rec_coeffs, e‚Å±·µê·µÖ, e‚Å±·µê·µû = Dworkspace(‚Ñì‚Çò‚Çê‚Çì, T)
    ùîá, H_rec_coeffs, e‚Å±·µê·µÖ, e‚Å±·µê·µû
end
function Dworkspace(‚Ñì‚Çò‚Çê‚Çì, ::Type{T}) where {T<:Real}
    H_rec_coeffs = H_recursion_coefficients(‚Ñì‚Çò‚Çê‚Çì, T)
    e‚Å±·µê·µÖ = Vector{Complex{T}}(undef, ‚Ñì‚Çò‚Çê‚Çì+1)
    e‚Å±·µê·µû = Vector{Complex{T}}(undef, ‚Ñì‚Çò‚Çê‚Çì+1)
    H_rec_coeffs, e‚Å±·µê·µÖ, e‚Å±·µê·µû
end


@doc raw"""
    sYlm_values(R, ‚Ñì‚Çò‚Çê‚Çì, spin)
    sYlm_values(Œ∏, œï, ‚Ñì‚Çò‚Çê‚Çì, spin)

Compute values of the spin-weighted spherical harmonic ``{}_{s}Y_{\ell, m}(R)`` for all
``\ell \leq \ell_\mathrm{max}``.

See [`sYlm_values!`](@ref) for details about the input and output values.

This function only appropriate when you need to evaluate the ``{}_{s}Y_{\ell, m}`` for a
single value of `R` or `Œ∏, œï` because it allocates large arrays and performs many
calculations that could be reused.  If you need to evaluate the matrices for many values of
`R` or `Œ∏, œï`, you should pre-allocate the storage with [`sYlm_prep`](@ref), and then call
[`sYlm_values!`](@ref) with the result instead.

"""
function sYlm_values(R::AbstractQuaternion, ‚Ñì‚Çò‚Çê‚Çì, spin)
    sYlm_storage = sYlm_prep(‚Ñì‚Çò‚Çê‚Çì, spin, eltype(R), abs(spin))
    sYlm_values!(sYlm_storage, R, spin)
end

function sYlm_values(Œ∏::TŒ∏, œï::Tœï, ‚Ñì‚Çò‚Çê‚Çì, spin) where {TŒ∏<:Real, Tœï<:Real}
    sYlm_storage = sYlm_prep(‚Ñì‚Çò‚Çê‚Çì, spin, promote_type(TŒ∏, Tœï), abs(spin))
    sYlm_values!(sYlm_storage, Œ∏, œï, spin)
end

@doc raw"""
    sYlm_values!(sYlm_storage, R, spin)
    sYlm_values!(sYlm_storage, Œ∏, œï, spin)
    sYlm_values!(sYlm, R, ‚Ñì‚Çò‚Çê‚Çì, spin)
    sYlm_values!(sYlm, Œ∏, œï, ‚Ñì‚Çò‚Çê‚Çì, spin)

Compute values of the spin-weighted spherical harmonic ``{}_{s}Y_{\ell, m}(R)`` for all
``\ell \leq \ell_\mathrm{max}``.

The spherical harmonics of spin weight ``s`` are related to Wigner's ``\mathfrak{D}`` matrix
as
```math
\begin{aligned}
{}_{s}Y_{\ell, m}(R)
  &= (-1)^s \sqrt{\frac{2\ell+1}{4\pi}} \mathfrak{D}^{(\ell)}_{m, -s}(R) \\
  &= (-1)^s \sqrt{\frac{2\ell+1}{4\pi}} \bar{\mathfrak{D}}^{(\ell)}_{-s, m}(\bar{R}).
\end{aligned}
```

In all cases, the result is returned in a 1-dimensional array ordered as

    [
        ‚ÇõY‚Çó‚Çò(R)
        for ‚Ñì ‚àà 0:‚Ñì‚Çò‚Çê‚Çì
        for m ‚àà -‚Ñì:‚Ñì
    ]

When the first argument is `Y`, it will be modified, so it must be at least as large as that
array. When the first argument is `sYlm_storage`, it should be the quantity returned by
[`sYlm_prep`](@ref), and the result will be written into the `Y` field of that tuple.  Both
of these options ‚Äî especially the latter ‚Äî reduce the number of allocations needed on each
call to the corresponding functions, which should increase the speed significantly.  Note
that the `Y` or `sYlm_storage` arguments must have types compatible with the type of `R` or
`Œ∏, œï`.

!!! warn
    When using the `sYlm_storage` argument (which is recommended), the returned quantity
    `sYlm` will be an alias of `sYlm_storage[1]`.  If you want to retain that data after the
    next call to [`sYlm_values!`](@ref), you should copy it with `copy(sYlm)`.

The `Œ∏, œï` arguments are spherical coordinates as described in the documentation of
[`Quaternionic.from_spherical_coordinates`](https://moble.github.io/Quaternionic.jl/dev/manual/#Quaternionic.from_spherical_coordinates-Tuple{Any,%20Any}).

See also [`sYlm_values`](@ref) for a simpler function call when you only need to evaluate
the ``{}_{s}Y_{\ell, m}`` for a single value of `R` or `Œ∏, œï`.

# Examples

```julia
using Quaternionic, SphericalFunctions
spin = -2
‚Ñì‚Çò‚Çê‚Çì = 8
T = Float64
R = Rotor{T}(1, 2, 3, 4)  # Will be normalized automatically
sYlm_storage = sYlm_prep(‚Ñì‚Çò‚Çê‚Çì, spin, T)
sYlm = sYlm_values!(sYlm_storage, R, spin)
```

"""
function sYlm_values!(Y, R::AbstractQuaternion, ‚Ñì‚Çò‚Çê‚Çì, spin)
    sYlm_storage = (Y, Y_workspace(‚Ñì‚Çò‚Çê‚Çì, spin, eltype(R), abs(spin))...)
    sYlm_values!(sYlm_storage, R, spin)
end

function sYlm_values!(Y, Œ∏::TŒ∏, œï::Tœï, ‚Ñì‚Çò‚Çê‚Çì, spin) where {TŒ∏<:Real, Tœï<:Real}
    sYlm_storage = (Y, Y_workspace(‚Ñì‚Çò‚Çê‚Çì, spin, promote_type(TŒ∏, Tœï), abs(spin))...)
    sYlm_values!(sYlm_storage, Œ∏, œï, spin)
end

function sYlm_values!(sYlm_storage, R::AbstractQuaternion, spin)
    (Y, ‚Ñì‚Çò‚Çê‚Çì, s‚Çò‚Çê‚Çì, H_rec_coeffs, Hwedge, expimœï, ‚Ñì‚Çò·µ¢‚Çô) = sYlm_storage
    if abs(spin) > abs(s‚Çò‚Çê‚Çì)
        error(
            "Input `sYlm_storage` was built created for maximum spin `s‚Çò‚Çê‚Çì`=$(s‚Çò‚Çê‚Çì), "
            *"but `spin`=$(spin) was requested."
        )
    end
    Y!(Y, R, ‚Ñì‚Çò‚Çê‚Çì, spin, H_rec_coeffs, Hwedge, expimœï, ‚Ñì‚Çò·µ¢‚Çô)
end

function sYlm_values!(sYlm_storage, Œ∏::TŒ∏, œï::Tœï, spin) where {TŒ∏<:Real, Tœï<:Real}
    (Y, ‚Ñì‚Çò‚Çê‚Çì, s‚Çò‚Çê‚Çì, H_rec_coeffs, Hwedge, expimœï, ‚Ñì‚Çò·µ¢‚Çô) = sYlm_storage
    if abs(spin) > abs(s‚Çò‚Çê‚Çì)
        error(
            "Input `sYlm_storage` was created for maximum spin `s‚Çò‚Çê‚Çì`=$(s‚Çò‚Çê‚Çì), "
            *"but `spin`=$(spin) was requested."
        )
    end
    expiŒ∏, expiœï = cis.(promote(Œ∏, œï))
    expiŒ≥ = one(typeof(expiŒ∏))
    Y!(Y, expiœï, expiŒ∏, expiŒ≥, ‚Ñì‚Çò‚Çê‚Çì, spin, H_rec_coeffs, Hwedge, expimœï, ‚Ñì‚Çò·µ¢‚Çô)
end

function Y_workspace(‚Ñì‚Çò‚Çê‚Çì, s‚Çò‚Çê‚Çì, ::Type{T}, ‚Ñì‚Çò·µ¢‚Çô=0) where {T<:Real}
    H_rec_coeffs = H_recursion_coefficients(‚Ñì‚Çò‚Çê‚Çì, T)
    Hwedge = Vector{T}(undef, WignerHsize(‚Ñì‚Çò‚Çê‚Çì, abs(s‚Çò‚Çê‚Çì)))
    expimœï = Vector{Complex{T}}(undef, ‚Ñì‚Çò‚Çê‚Çì+1)
    ‚Ñì‚Çò‚Çê‚Çì, s‚Çò‚Çê‚Çì, H_rec_coeffs, Hwedge, expimœï, ‚Ñì‚Çò·µ¢‚Çô
end

@doc raw"""
    sYlm_prep(‚Ñì‚Çò‚Çê‚Çì, s‚Çò‚Çê‚Çì, [T=Float64, [‚Ñì‚Çò·µ¢‚Çô=0]])

Construct storage space and pre-compute recursion coefficients to compute spin-weighted
spherical-harmonic values ``{}_{s}Y_{\ell, m}`` in place.

This returns the `sYlm_storage` arguments needed by [`sYlm_values!`](@ref).

Note that the result of this function can be passed to `sYlm_values!`, even if the value of
`spin` passed to that function is smaller (in absolute value) than the `s‚Çò‚Çê‚Çì` passed to this
function.  That is, the `sYlm_storage` returned by this function can be used to compute
``{}_{s}Y_{\ell, m}`` values for numerous values of the spin.

"""
function sYlm_prep(‚Ñì‚Çò‚Çê‚Çì, s‚Çò‚Çê‚Çì, ::Type{T}=Float64, ‚Ñì‚Çò·µ¢‚Çô=0) where {T<:Real}
    Y = Vector{Complex{T}}(undef, Ysize(‚Ñì‚Çò·µ¢‚Çô, ‚Ñì‚Çò‚Çê‚Çì))
    ‚Ñì‚Çò‚Çê‚Çì, s‚Çò‚Çê‚Çì, H_rec_coeffs, Hwedge, expimœï, ‚Ñì‚Çò·µ¢‚Çô = Y_workspace(‚Ñì‚Çò‚Çê‚Çì, s‚Çò‚Çê‚Çì, T, ‚Ñì‚Çò·µ¢‚Çô)
    (Y, ‚Ñì‚Çò‚Çê‚Çì, s‚Çò‚Çê‚Çì, H_rec_coeffs, Hwedge, expimœï, ‚Ñì‚Çò·µ¢‚Çô)
end

# Legacy API for sYlm_values
function Y!(Y, R, ‚Ñì‚Çò‚Çê‚Çì, spin, H_rec_coeffs, Hwedge, expimœï, ‚Ñì‚Çò·µ¢‚Çô=0)
    expiœï, expiŒ∏, expiŒ≥ = to_euler_phases(R)
    Y!(Y, expiœï, expiŒ∏, expiŒ≥, ‚Ñì‚Çò‚Çê‚Çì, spin, H_rec_coeffs, Hwedge, expimœï, ‚Ñì‚Çò·µ¢‚Çô)
end
function Y!(Y, expiœï, expiŒ∏, expiŒ≥, ‚Ñì‚Çò‚Çê‚Çì, spin, H_rec_coeffs, Hwedge, expimœï, ‚Ñì‚Çò·µ¢‚Çô=0)
    if length(Y) < Ysize(‚Ñì‚Çò·µ¢‚Çô, ‚Ñì‚Çò‚Çê‚Çì)
        error("Input `Y` has length $(length(Y)); which is not enough for ‚Ñì‚Çò‚Çê‚Çì=$‚Ñì‚Çò‚Çê‚Çì")
    end
    if length(Hwedge) < WignerHsize(‚Ñì‚Çò‚Çê‚Çì, abs(spin))
        error(
            "Input `Hwedge` has length $(length(Hwedge)); "
            *"which is not enough for ‚Ñì‚Çò‚Çê‚Çì=$‚Ñì‚Çò‚Çê‚Çì with spin=$spin"
        )
    end

    H!(Hwedge, expiŒ∏, ‚Ñì‚Çò‚Çê‚Çì, abs(spin), H_rec_coeffs)
    complex_powers!(expimœï, expiœï)
    spin_factor = (isodd(spin) ? -1 : 1) * œµ(spin) * expiŒ≥^-spin

    # YÀ°‚Çò‚Çö,‚Çò(R) ‚àù dÀ°‚Çò‚Çö,‚Çò(R) exp[iœï‚Çê(m-mp)+iœï‚Çõ(m+mp)] = dÀ°‚Çò‚Çö,‚Çò(R) exp[i(œï‚Çõ+œï‚Çê)m+i(œï‚Çõ-œï‚Çê)mp]
    # exp[iœï‚Çõ] = RÃÇ‚Çõ = hat(R[0] + 1j * R[3]) = zp
    # exp[iœï‚Çê] = RÃÇ‚Çê = hat(R[2] + 1j * R[1]) = zm.conjugate()
    # exp[i(œï‚Çõ+œï‚Çê)] = zp * zm.conjugate() = z[2] = z·µß
    # exp[i(œï‚Çõ-œï‚Çê)] = zp * zm = z[0] = z‚Çê
    i·¥∞ = 1
    @inbounds for ‚Ñì in ‚Ñì‚Çò·µ¢‚Çô:‚Ñì‚Çò‚Çê‚Çì
        if ‚Ñì < abs(spin)
            Y[i·¥∞:i·¥∞+2‚Ñì] .= 0
            i·¥∞ += 2‚Ñì+1
        else
            factor = spin_factor * ‚àö((2‚Ñì+1)/(4eltype(Y)(œÄ)))
            for m in -‚Ñì:-1
                i·¥¥ = WignerHindex(‚Ñì, m, -spin, abs(spin))
                Y[i·¥∞] = factor * Hwedge[i·¥¥] * conj(expimœï[-m+1])  # œµ(m‚Ä≤)==1
                i·¥∞ += 1
            end
            for m in 0:‚Ñì
                i·¥¥ = WignerHindex(‚Ñì, m, -spin, abs(spin))
                Y[i·¥∞] = factor * œµ(m) * Hwedge[i·¥¥] * expimœï[m+1]
                i·¥∞ += 1
            end
        end
    end
    Y
end
function Yprep(‚Ñì‚Çò‚Çê‚Çì, s‚Çò‚Çê‚Çì, ::Type{T}, ‚Ñì‚Çò·µ¢‚Çô=0) where {T<:Real}
    sYlm_storage = sYlm_prep(‚Ñì‚Çò‚Çê‚Çì, s‚Çò‚Çê‚Çì, T, ‚Ñì‚Çò·µ¢‚Çô)
    # Y, H_rec_coeffs, Hwedge, expimœï
    sYlm_storage[1], sYlm_storage[4], sYlm_storage[5], sYlm_storage[6]
end
@doc raw"""
    ‚Çõùêò(s, ‚Ñì‚Çò‚Çê‚Çì, [T=Float64], [RŒ∏œï=golden_ratio_spiral_rotors(s, ‚Ñì‚Çò‚Çê‚Çì, T)])


Construct a matrix of ``‚ÇõY‚Çó‚Çò(RŒ∏œï)`` values for the input `s` and all nontrivial ``(\ell,
m)`` up to `‚Ñì‚Çò‚Çê‚Çì`.

This is a fast and accurate method for mapping between the vector of spin-weighted
spherical-harmonic mode weights ``‚Çõùêü‚Çó‚Çò`` and the vector of function values on the sphere
``‚Çõùêü‚±º‚Çñ``, as
```math
‚Çõùêü‚±º‚Çñ = ‚Çõùêò\, ‚Çõùêü‚Çó‚Çò,
```
where the right-hand side represents the matrix-vector product.  As usual, we assume that
the ``‚Çõùêü‚Çó‚Çò`` modes are ordered by increasing ``m ‚àà [-‚Ñì:‚Ñì]``, and ``‚Ñì ‚àà [|s|:‚Ñì‚Çò‚Çê‚Çì]``.  The
ordering of the ``‚Çõùêü‚±º‚Çñ`` values will be determined by the ordering of the argument `RŒ∏œï`.

Note that the number of modes need not be the same as the number of points on which the
function is evaluated, which would imply that the output matrix is not square.  To be able
to invert the relationship, however, we need the number of points ``‚Çõùêü‚±º‚Çñ`` to be *at least
as large* as the number of modes ``‚Çõùêü‚Çó‚Çò``.

Note that the usefulness of this approach is limited by the fact that the size of this
matrix scales as ‚Ñì‚Çò‚Çê‚Çì‚Å¥.  As such, it is mostly useful only for ‚Ñì‚Çò‚Çê‚Çì of order dozens, rather
than ‚Äî say ‚Äî the tens of thousands that CMB astronomy or lensing require, for example.

Direct application and inversion of this matrix are used in the "direct" methods of
``s``-SHT transformations.  See [`SSHTDirect`](@ref) for details about the implementation.

"""
function ‚Çõùêò(s, ‚Ñì‚Çò‚Çê‚Çì, ::Type{T}=Float64, RŒ∏œï=golden_ratio_spiral_rotors(s, ‚Ñì‚Çò‚Çê‚Çì, T)) where T
    Y, H_rec_coeffs, Hwedge, expimœï = Yprep(‚Ñì‚Çò‚Çê‚Çì, s, T, abs(s))
    ‚Çõùêò = zeros(Complex{T}, length(RŒ∏œï), length(Y))
    for (j1,j2) ‚àà zip(axes(‚Çõùêò, 1), axes(RŒ∏œï, 1))
        ‚Çõùêò[j1, :] = Y!(Y, RŒ∏œï[j2], ‚Ñì‚Çò‚Çê‚Çì, s, H_rec_coeffs, Hwedge, expimœï, abs(s))
    end
    ‚Çõùêò
end
