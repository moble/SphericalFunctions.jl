### TODO:
### 2. Separate ALF computation to a different module
### 4. Test skipping all the complicated indexing tricks; use fancy indexing
### 5. Allow specifying the extent of recursion / iterating over ‚Ñì matrices


### NOTES:
### 1. Caching coefficients provides a ~11% speedup at low ‚Ñì, but that falls off
###    as ‚Ñì increases, reaching ~4% around ‚Ñì=512.
### 2. This is probably a much more significant advantage for ALFs.



export H!, H_recursion_coefficients
export WignerDsize, WignerHsize, WignerDindex, WignerHindex, _WignerHindex
export d!, d, D!, Y!
export dprep, dstorage, Dprep, Dstorage, Yprep, Ystorage#, œµ

using ..SphericalFunctions: complex_powers!
using Quaternionic: AbstractQuaternion, to_euler_phases!

include("indexing.jl")
include("Hrecursor.jl")


@inline œµ(m) = ifelse(m > 0 && isodd(m), -1, 1)


"""
    d!(d, expiŒ≤, ‚Ñì‚Çò‚Çê‚Çì, H_rec_coeffs)
    d!(d, expiŒ≤, ‚Ñì‚Çò‚Çê‚Çì)
    d!(d, Œ≤, ‚Ñì‚Çò‚Çê‚Çì, H_rec_coeffs)
    d!(d, Œ≤, ‚Ñì‚Çò‚Çê‚Çì)

Compute Wigner's d matrix dÀ°‚Çò‚Çö,‚Çò(Œ≤)

# Notes

This function is the preferred method of computing the d matrix for large ell
values.  In particular, above ell‚âà32 standard formulas become completely
unusable because of numerical instabilities and overflow.  This function uses
stable recursion methods instead, and should be usable beyond ell‚âà1000.

The result is returned in a 1-dimensional array ordered as

    [
        d(ell, mp, m, Œ≤)
        for ell in range(ell_max+1)
        for mp in range(-min(‚Ñì, mp_max), min(‚Ñì, mp_max)+1)
        for m in range(-ell, ell+1)
    ]

"""
function d!(d, expiŒ≤::Complex, ‚Ñì‚Çò‚Çê‚Çì, H_rec_coeffs)
    H!(d, expiŒ≤, ‚Ñì‚Çò‚Çê‚Çì, ‚Ñì‚Çò‚Çê‚Çì, H_rec_coeffs, WignerDindex)

    @inbounds for ‚Ñì in 0:‚Ñì‚Çò‚Çê‚Çì
        i0 = WignerDindex(‚Ñì, -‚Ñì, -‚Ñì)
        for m in -‚Ñì:-1
            oddm = isodd(m)
            for m‚Ä≤ in -‚Ñì:m
                i1 = i0 + (‚Ñì + m‚Ä≤) * (2‚Ñì + 1) + m + ‚Ñì
                i2 = i0 + (‚Ñì - m) * (2‚Ñì + 1) - m‚Ä≤ + ‚Ñì
                d[i1] = ifelse(oddm, -d[i2], d[i2])
            end
            for m‚Ä≤ in m+1:0
                i1 = i0 + (‚Ñì + m‚Ä≤) * (2‚Ñì + 1) + m + ‚Ñì
                i2 = i0 + (‚Ñì - m‚Ä≤) * (2‚Ñì + 1) - m + ‚Ñì
                d[i1] = ifelse(oddm, -d[i2], d[i2])
            end
            for m‚Ä≤ in 1:-m
                i1 = i0 + (‚Ñì + m‚Ä≤) * (2‚Ñì + 1) + m + ‚Ñì
                i2 = i0 + (‚Ñì - m‚Ä≤) * (2‚Ñì + 1) - m + ‚Ñì
                d[i1] = ifelse(isodd(m‚Ä≤)‚äªoddm, -d[i2], d[i2])
            end
            for m‚Ä≤ in 1-m:‚Ñì
                i1 = i0 + (‚Ñì + m‚Ä≤) * (2‚Ñì + 1) + m + ‚Ñì
                i2 = i0 + (‚Ñì + m) * (2‚Ñì + 1) + m‚Ä≤ + ‚Ñì
                d[i1] = ifelse(isodd(m‚Ä≤)‚äªoddm, -d[i2], d[i2])
            end
        end
        for m in 0:‚Ñì
            for m‚Ä≤ in -‚Ñì:-m-1
                i1 = i0 + (‚Ñì + m‚Ä≤) * (2‚Ñì + 1) + m + ‚Ñì
                i2 = i0 + (‚Ñì - m) * (2‚Ñì + 1) - m‚Ä≤ + ‚Ñì
                d[i1] = d[i2]
            end
            for m‚Ä≤ in m+1:‚Ñì
                i1 = i0 + (‚Ñì + m‚Ä≤) * (2‚Ñì + 1) + m + ‚Ñì
                i2 = i0 + (‚Ñì + m) * (2‚Ñì + 1) + m‚Ä≤ + ‚Ñì
                d[i1] = ifelse(isodd(m‚Ä≤), -d[i2], d[i2])
            end
        end
        for m‚Ä≤ in 1:2:‚Ñì
            i1 = i0 + (‚Ñì + m‚Ä≤) * (2‚Ñì + 1) + ‚Ñì
            for m in abs(m‚Ä≤):‚Ñì
                d[i1+m] *= -1
            end
        end
    end
    d
end
function d!(d, expiŒ≤::Complex{T}, ‚Ñì‚Çò‚Çê‚Çì) where {T<:Real}
    d!(d, expiŒ≤, ‚Ñì‚Çò‚Çê‚Çì, H_recursion_coefficients(‚Ñì‚Çò‚Çê‚Çì, T))
end
function d!(d, Œ≤::T, ‚Ñì‚Çò‚Çê‚Çì, H_rec_coeffs) where {T<:Real}
    d!(d, cis(Œ≤), ‚Ñì‚Çò‚Çê‚Çì, H_rec_coeffs)
end
function d!(d, Œ≤::T, ‚Ñì‚Çò‚Çê‚Çì) where {T<:Real}
    d!(d, cis(Œ≤), ‚Ñì‚Çò‚Çê‚Çì, H_recursion_coefficients(‚Ñì‚Çò‚Çê‚Çì, T))
end
function d(expiŒ≤::Complex{T}, ‚Ñì‚Çò‚Çê‚Çì) where {T<:Real}
    ùî° = Array{T}(undef, WignerDsize(‚Ñì‚Çò‚Çê‚Çì, ‚Ñì‚Çò‚Çê‚Çì))
    d!(ùî°, expiŒ≤, ‚Ñì‚Çò‚Çê‚Çì, H_recursion_coefficients(‚Ñì‚Çò‚Çê‚Çì, T))
end
d(Œ≤::T, ‚Ñì‚Çò‚Çê‚Çì) where {T<:Real} = d(cis(Œ≤), ‚Ñì‚Çò‚Çê‚Çì)

function dstorage(‚Ñì‚Çò‚Çê‚Çì, ::Type{T}) where {T<:Real}
    Vector{T}(undef, WignerDsize(‚Ñì‚Çò‚Çê‚Çì))
end

function dprep(‚Ñì‚Çò‚Çê‚Çì, ::Type{T}) where {T<:Real}
    d = dstorage(‚Ñì‚Çò‚Çê‚Çì, T)
    H_rec_coeffs = H_recursion_coefficients(‚Ñì‚Çò‚Çê‚Çì, T)
    d, H_rec_coeffs
end


"""
    D!(ùîá, R, ‚Ñì‚Çò‚Çê‚Çì, (a‚Çô·µê,b‚Çô·µê,d‚Çô·µê), expimŒ±, expimŒ≥)

Compute Wigner's ùîá matrix

This function implements the preferred method of computing the ùîá matrix for large ell
values.  In particular, above ell‚âà32 standard formulas become completely
unusable because of numerical instabilities and overflow.  This function uses
stable recursion methods instead, and should be usable beyond ell‚âà1000.

This function computes ùîáÀ°‚Çò‚Çö,‚Çò(R).  The result is returned in a 1-dimensional
array ordered as

    [
        ùîá(ell, mp, m, R)
        for ell in range(ell_max+1)
        for mp in range(-min(‚Ñì, mp_max), min(‚Ñì, mp_max)+1)
        for m in range(-ell, ell+1)
    ]

"""
function D!(ùîá, R::AbstractQuaternion, ‚Ñì‚Çò‚Çê‚Çì, H_rec_coeffs, expimŒ±, expimŒ≥)
    expiŒ±, expiŒ≤, expiŒ≥ = to_euler_phases(R)
    H!(ùîá, expiŒ≤, ‚Ñì‚Çò‚Çê‚Çì, ‚Ñì‚Çò‚Çê‚Çì, H_rec_coeffs, WignerDindex)
    complex_powers!(expimŒ±, expiŒ±)
    complex_powers!(expimŒ≥, expiŒ≥)

    # ùîáÀ°‚Çò‚Çö,‚Çò(R) = dÀ°‚Çò‚Çö,‚Çò(R) exp[iœï‚Çê(m-mp)+iœï‚Çõ(m+mp)] = dÀ°‚Çò‚Çö,‚Çò(R) exp[i(œï‚Çõ+œï‚Çê)m+i(œï‚Çõ-œï‚Çê)mp]
    # exp[iœï‚Çõ] = RÃÇ‚Çõ = hat(R[0] + 1j * R[3]) = zp
    # exp[iœï‚Çê] = RÃÇ‚Çê = hat(R[2] + 1j * R[1]) = zm.conjugate()
    # exp[i(œï‚Çõ+œï‚Çê)] = zp * zm.conjugate() = z[2] = z·µß
    # exp[i(œï‚Çõ-œï‚Çê)] = zp * zm = z[0] = z‚Çê
    @inbounds for ‚Ñì in 0:‚Ñì‚Çò‚Çê‚Çì
        i0 = WignerDindex(‚Ñì, -‚Ñì, -‚Ñì)
        for m in -‚Ñì:-1
            oddm_factor = ifelse(isodd(m), -1, 1)
            for m‚Ä≤ in -‚Ñì:m
                i1 = i0 + (‚Ñì + m‚Ä≤) * (2‚Ñì + 1) + m + ‚Ñì
                i2 = i0 + (‚Ñì - m) * (2‚Ñì + 1) - m‚Ä≤ + ‚Ñì
                ùîá[i1] = oddm_factor * ùîá[i2] * conj(expimŒ≥[-m+1] * expimŒ±[-m‚Ä≤+1])
            end
            for m‚Ä≤ in m+1:0
                i1 = i0 + (‚Ñì + m‚Ä≤) * (2‚Ñì + 1) + m + ‚Ñì
                i2 = i0 + (‚Ñì - m‚Ä≤) * (2‚Ñì + 1) - m + ‚Ñì
                ùîá[i1] = oddm_factor * ùîá[i2] * conj(expimŒ≥[-m+1] * expimŒ±[-m‚Ä≤+1])
            end
            for m‚Ä≤ in 1:-m
                i1 = i0 + (‚Ñì + m‚Ä≤) * (2‚Ñì + 1) + m + ‚Ñì
                i2 = i0 + (‚Ñì - m‚Ä≤) * (2‚Ñì + 1) - m + ‚Ñì
                ùîá[i1] = ifelse(isodd(m‚Ä≤), -1, 1) * oddm_factor * ùîá[i2] * conj(expimŒ≥[-m+1]) * expimŒ±[m‚Ä≤+1]
            end
            for m‚Ä≤ in 1-m:‚Ñì
                i1 = i0 + (‚Ñì + m‚Ä≤) * (2‚Ñì + 1) + m + ‚Ñì
                i2 = i0 + (‚Ñì + m) * (2‚Ñì + 1) + m‚Ä≤ + ‚Ñì
                ùîá[i1] = ifelse(isodd(m‚Ä≤), -1, 1) * oddm_factor * ùîá[i2] * conj(expimŒ≥[-m+1]) * expimŒ±[m‚Ä≤+1]
            end
        end
        for m in 0:‚Ñì
            for m‚Ä≤ in -‚Ñì:-m-1
                i1 = i0 + (‚Ñì + m‚Ä≤) * (2‚Ñì + 1) + m + ‚Ñì
                i2 = i0 + (‚Ñì - m) * (2‚Ñì + 1) - m‚Ä≤ + ‚Ñì
                ùîá[i1] = ùîá[i2] * expimŒ≥[m+1] * conj(expimŒ±[-m‚Ä≤+1])
            end
            for m‚Ä≤ in m+1:‚Ñì
                i1 = i0 + (‚Ñì + m‚Ä≤) * (2‚Ñì + 1) + m + ‚Ñì
                i2 = i0 + (‚Ñì + m) * (2‚Ñì + 1) + m‚Ä≤ + ‚Ñì
                ùîá[i1] = ifelse(isodd(m‚Ä≤), -ùîá[i2], ùîá[i2]) * expimŒ≥[m+1] * expimŒ±[m‚Ä≤+1]
            end
        end
        for m‚Ä≤ in -‚Ñì:0
            i1 = i0 + (‚Ñì + m‚Ä≤) * (2‚Ñì + 1) + ‚Ñì
            for m in abs(m‚Ä≤):‚Ñì
                ùîá[i1+m] *= expimŒ≥[m+1] * conj(expimŒ±[-m‚Ä≤+1])
            end
        end
        for m‚Ä≤ in 1:‚Ñì
            i1 = i0 + (‚Ñì + m‚Ä≤) * (2‚Ñì + 1) + ‚Ñì
            for m in abs(m‚Ä≤):‚Ñì
                ùîá[i1+m] *= ifelse(isodd(m‚Ä≤), -1, 1) * expimŒ≥[m+1] * expimŒ±[m‚Ä≤+1]
            end
        end
    end
    ùîá
end

function Dstorage(‚Ñì‚Çò‚Çê‚Çì, ::Type{T}) where {T<:Real}
    Vector{Complex{T}}(undef, WignerDsize(‚Ñì‚Çò‚Çê‚Çì))
end

function Dprep(‚Ñì‚Çò‚Çê‚Çì, ::Type{T}) where {T<:Real}
    ùîá = Dstorage(‚Ñì‚Çò‚Çê‚Çì, T)
    H_rec_coeffs = H_recursion_coefficients(‚Ñì‚Çò‚Çê‚Çì, T)
    expimŒ± = Vector{Complex{T}}(undef, ‚Ñì‚Çò‚Çê‚Çì+1)
    expimŒ≥ = Vector{Complex{T}}(undef, ‚Ñì‚Çò‚Çê‚Çì+1)
    ùîá, H_rec_coeffs, expimŒ±, expimŒ≥
end


@doc raw"""
    Y(s, R, ‚Ñì‚Çò‚Çê‚Çì)
    Y!(Y, s, R, ‚Ñì‚Çò‚Çê‚Çì)

Evaluate (and write into `Y`, if present) the values of ``{}_{s}Y_{\ell,
m}(R)`` for the input value of `s`, for all ``(\ell, m)`` throughout the range
specified by `wigner`.  `R` is assumed to be a unit quaternion (which may be
`Rotor`, or simply a `Quaternion`).  If `R` does not have unit magnitude, the
output elements will be too large by a factor ``|R|^{\ell}``.  If `Y` is not
present, a new array will be created.

The spherical harmonics of spin weight ``s`` are related to Wigner's
``\mathfrak{D}`` matrix as
```math
\begin{aligned}
{}_{s}Y_{\ell, m}(R)
  &= (-1)^s \sqrt{\frac{2\ell+1}{4\pi}} \mathfrak{D}^{(\ell)}_{m, -s}(R) \\
  &= (-1)^s \sqrt{\frac{2\ell+1}{4\pi}} \bar{\mathfrak{D}}^{(\ell)}_{-s, m}(\bar{R}).
\end{aligned}
```
"""
function Y!(Y, R, ‚Ñì‚Çò‚Çê‚Çì, spin, H_rec_coeffs, Hwedge, expimœï, ‚Ñì‚Çò·µ¢‚Çô=0)
    if length(Y) < Ysize(‚Ñì‚Çò·µ¢‚Çô, ‚Ñì‚Çò‚Çê‚Çì)
        error("Input `Y` has length $(length(Y)); which is not enough for ‚Ñì‚Çò‚Çê‚Çì=$‚Ñì‚Çò‚Çê‚Çì")
    end
    if length(Hwedge) < WignerHsize(‚Ñì‚Çò‚Çê‚Çì, abs(spin))
        error(
            "Input `Hwedge` has length $(length(Hwedge)); "
            *"which is not enough for ‚Ñì‚Çò‚Çê‚Çì=$‚Ñì‚Çò‚Çê‚Çì with spin=$spin"
        )
    end

    expiœï, expiŒ∏, expiŒ≥ = to_euler_phases(R)
    H!(Hwedge, expiŒ∏, ‚Ñì‚Çò‚Çê‚Çì, abs(spin), H_rec_coeffs)
    complex_powers!(expimœï, expiœï)
    spin_factor = (isodd(spin) ? -1 : 1) * œµ(spin) * expiŒ≥^-spin

    # YÀ°‚Çò‚Çö,‚Çò(R) ‚àù dÀ°‚Çò‚Çö,‚Çò(R) exp[iœï‚Çê(m-mp)+iœï‚Çõ(m+mp)] = dÀ°‚Çò‚Çö,‚Çò(R) exp[i(œï‚Çõ+œï‚Çê)m+i(œï‚Çõ-œï‚Çê)mp]
    # exp[iœï‚Çõ] = RÃÇ‚Çõ = hat(R[0] + 1j * R[3]) = zp
    # exp[iœï‚Çê] = RÃÇ‚Çê = hat(R[2] + 1j * R[1]) = zm.conjugate()
    # exp[i(œï‚Çõ+œï‚Çê)] = zp * zm.conjugate() = z[2] = z·µß
    # exp[i(œï‚Çõ-œï‚Çê)] = zp * zm = z[0] = z‚Çê
    i·¥∞ = 1
    @inbounds for ‚Ñì in ‚Ñì‚Çò·µ¢‚Çô:‚Ñì‚Çò‚Çê‚Çì
        if ‚Ñì < abs(spin)
            Y[i·¥∞:i·¥∞+2‚Ñì] .= 0
            i·¥∞ += 2‚Ñì+1
        else
            factor = spin_factor * ‚àö((2‚Ñì+1)/(4eltype(Y)(œÄ)))
            for m in -‚Ñì:-1
                i·¥¥ = WignerHindex(‚Ñì, m, -spin, abs(spin))
                Y[i·¥∞] = factor * Hwedge[i·¥¥] * conj(expimœï[-m+1])  # œµ(m‚Ä≤)==1
                i·¥∞ += 1
            end
            for m in 0:‚Ñì
                i·¥¥ = WignerHindex(‚Ñì, m, -spin, abs(spin))
                Y[i·¥∞] = factor * œµ(m) * Hwedge[i·¥¥] * expimœï[m+1]
                i·¥∞ += 1
            end
        end
    end
    Y
end

function Ystorage(‚Ñì‚Çò‚Çê‚Çì, ::Type{T}, ‚Ñì‚Çò·µ¢‚Çô=0) where {T<:Real}
    Vector{Complex{T}}(undef, Ysize(‚Ñì‚Çò·µ¢‚Çô, ‚Ñì‚Çò‚Çê‚Çì))
end

function Yworkspace(‚Ñì‚Çò‚Çê‚Çì, s‚Çò‚Çê‚Çì, ::Type{T}) where {T<:Real}
    Hwedge = Vector{T}(undef, WignerHsize(‚Ñì‚Çò‚Çê‚Çì, abs(s‚Çò‚Çê‚Çì)))
    expimœï = Vector{Complex{T}}(undef, ‚Ñì‚Çò‚Çê‚Çì+1)
    Hwedge, expimœï
end

"""
    Yprep(‚Ñì‚Çò‚Çê‚Çì, s‚Çò‚Çê‚Çì, T, ‚Ñì‚Çò·µ¢‚Çô)

Prepare the storage, recursion coefficients, and workspace to compute ‚ÇõY‚Çó,‚Çò
data up to the maximum sizes given.

Returns a tuple of `Y, H_rec_coeffs, Hwedge, expimœï`, which can be passed to
the correspondingly named arguments of `Y!`.

Note that the same results of this function can be passed to `Y!`, even if the
value of `‚Ñì‚Çò‚Çê‚Çì` passed to that function is smaller than the value passed to
this function, or the value of `spin` passed to that function is smaller (in
absolute value) than the `s‚Çò‚Çê‚Çì` passed to this function.  However, the value
of `‚Ñì‚Çò·µ¢‚Çô` passed to that function *must not* be smaller than the value passed
to this function (unless one of the other sizes is sufficiently smaller).

"""
function Yprep(‚Ñì‚Çò‚Çê‚Çì, s‚Çò‚Çê‚Çì, ::Type{T}, ‚Ñì‚Çò·µ¢‚Çô=0) where {T<:Real}
    Y = Ystorage(‚Ñì‚Çò‚Çê‚Çì, T, ‚Ñì‚Çò·µ¢‚Çô)
    H_rec_coeffs = H_recursion_coefficients(‚Ñì‚Çò‚Çê‚Çì, T)
    Hwedge, expimœï = Yworkspace(‚Ñì‚Çò‚Çê‚Çì, s‚Çò‚Çê‚Çì, T)
    Y, H_rec_coeffs, Hwedge, expimœï
end
