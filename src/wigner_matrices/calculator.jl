struct WignerMatrixCalculator{‚Ñì‚Çò·µ¢‚Çô, ‚Ñì‚Çò‚Çê‚Çì, m‚Ä≤‚Çò‚Çê‚Çì, T<:Real}
    Hwedge::Vector{T}
    Hv::Vector{T}
    Hextra::Vector{T}
    z‚Çêpowers::Vector{Complex{T}}
    z·µßpowers::Vector{Complex{T}}
    z::Vector{Complex{T}}
    function WignerMatrixCalculator{‚Ñì‚Çò·µ¢‚Çô, ‚Ñì‚Çò‚Çê‚Çì, m‚Ä≤‚Çò‚Çê‚Çì, T}() where {‚Ñì‚Çò·µ¢‚Çô, ‚Ñì‚Çò‚Çê‚Çì, m‚Ä≤‚Çò‚Çê‚Çì, T<:Real}
        if ‚Ñì‚Çò·µ¢‚Çô < 0
            throw(DomainError("‚Ñì‚Çò·µ¢‚Çô = $‚Ñì‚Çò·µ¢‚Çô",
                    "This function is only valid for non-negative values of ‚Ñì."
            ))
        end
        if ‚Ñì‚Çò‚Çê‚Çì < 0
            throw(DomainError("‚Ñì‚Çò‚Çê‚Çì = $‚Ñì‚Çò‚Çê‚Çì",
                    "This function is only valid for non-negative values of ‚Ñì."
            ))
        end
        if ‚Ñì‚Çò·µ¢‚Çô > ‚Ñì‚Çò‚Çê‚Çì
            throw(DomainError("‚Ñì‚Çò·µ¢‚Çô = $‚Ñì‚Çò·µ¢‚Çô",
                    "The input ‚Ñì‚Çò·µ¢‚Çô must be no greater than the input ‚Ñì‚Çò‚Çê‚Çì=$‚Ñì‚Çò‚Çê‚Çì."
            ))
        end
        new{‚Ñì‚Çò·µ¢‚Çô, ‚Ñì‚Çò‚Çê‚Çì, m‚Ä≤‚Çò‚Çê‚Çì, T}(
            zeros(T, WignerHsize(m‚Ä≤‚Çò‚Çê‚Çì, ‚Ñì‚Çò‚Çê‚Çì)),
            zeros(T, (‚Ñì‚Çò‚Çê‚Çì + 1)^2),
            zeros(T, ‚Ñì‚Çò‚Çê‚Çì + 2),
            zeros(Complex{T}, ‚Ñì‚Çò‚Çê‚Çì + 1),
            zeros(Complex{T}, ‚Ñì‚Çò‚Çê‚Çì + 1),
            zeros(Complex{T}, 3)
        )
    end
end

"""
   WignerMatrixCalculator(‚Ñìmin, ‚Ñìmax, [m‚Ä≤max], [T])

Construct a `WignerMatrixCalculator` to use in calculating ``ùîá``, ``d``, or
``{}_{s}Y_{‚Ñì,m}``.

If `m‚Ä≤max` is given, values may be calculated with `‚Ñì ‚àà ‚Ñìmin:‚Ñìmax` and `m ‚àà
-‚Ñì:‚Ñì` but only `m‚Ä≤ ‚àà ‚Ñìmin:m‚Ä≤max.  This will reduce the storage and computation
costs.  Note that if your goal is just to compute spin-weighted spherical
harmonics up to some spin `s`, you should use `m‚Ä≤max=abs(s)`.

If `T<:Real` is given, all calculations will be done using that type; the
default is `Float64`.

See also:
  * [`D!`](@ref) to compute the full ``ùîá`` matrix
  * [`d!`](@ref) to compute the small ``d`` matrix
  * [`Y!`](@ref) to compute spin-weighted spherical harmonic values

"""
WignerMatrixCalculator(‚Ñì‚Çò·µ¢‚Çô, ‚Ñì‚Çò‚Çê‚Çì, m‚Ä≤‚Çò‚Çê‚Çì=typemax(Int), T=Float64) = WignerMatrixCalculator{‚Ñì‚Çò·µ¢‚Çô, ‚Ñì‚Çò‚Çê‚Çì, min(‚Ñì‚Çò‚Çê‚Çì, abs(m‚Ä≤‚Çò‚Çê‚Çì)), T}()

# Access type parameters
‚Ñì‚Çò·µ¢‚Çô(::Type{<:WignerMatrixCalculator{‚Ñì‚Çò·µ¢‚ÇôW, ‚Ñì‚Çò‚Çê‚Çì, m‚Ä≤‚Çò‚Çê‚Çì, T}}) where {‚Ñì‚Çò·µ¢‚ÇôW, ‚Ñì‚Çò‚Çê‚Çì, m‚Ä≤‚Çò‚Çê‚Çì, T<:Real} = ‚Ñì‚Çò·µ¢‚ÇôW
‚Ñì‚Çò‚Çê‚Çì(::Type{<:WignerMatrixCalculator{‚Ñì‚Çò·µ¢‚Çô, ‚Ñì‚Çò‚Çê‚ÇìW, m‚Ä≤‚Çò‚Çê‚Çì, T}}) where {‚Ñì‚Çò·µ¢‚Çô, ‚Ñì‚Çò‚Çê‚ÇìW, m‚Ä≤‚Çò‚Çê‚Çì, T<:Real} = ‚Ñì‚Çò‚Çê‚ÇìW
m‚Ä≤‚Çò‚Çê‚Çì(::Type{<:WignerMatrixCalculator{‚Ñì‚Çò·µ¢‚Çô, ‚Ñì‚Çò‚Çê‚Çì, m‚Ä≤‚Çò‚Çê‚ÇìW, T}}) where {‚Ñì‚Çò·µ¢‚Çô, ‚Ñì‚Çò‚Çê‚Çì, m‚Ä≤‚Çò‚Çê‚ÇìW, T<:Real} = m‚Ä≤‚Çò‚Çê‚ÇìW
T(::Type{<:WignerMatrixCalculator{‚Ñì‚Çò·µ¢‚Çô, ‚Ñì‚Çò‚Çê‚Çì, m‚Ä≤‚Çò‚Çê‚Çì, TW}}) where {‚Ñì‚Çò·µ¢‚Çô, ‚Ñì‚Çò‚Çê‚Çì, m‚Ä≤‚Çò‚Çê‚Çì, TW<:Real} = TW
‚Ñì‚Çò·µ¢‚Çô(::WignerMatrixCalculator{‚Ñì‚Çò·µ¢‚ÇôW, ‚Ñì‚Çò‚Çê‚Çì, m‚Ä≤‚Çò‚Çê‚Çì, T}) where {‚Ñì‚Çò·µ¢‚ÇôW, ‚Ñì‚Çò‚Çê‚Çì, m‚Ä≤‚Çò‚Çê‚Çì, T<:Real} = ‚Ñì‚Çò·µ¢‚ÇôW
‚Ñì‚Çò‚Çê‚Çì(::WignerMatrixCalculator{‚Ñì‚Çò·µ¢‚Çô, ‚Ñì‚Çò‚Çê‚ÇìW, m‚Ä≤‚Çò‚Çê‚Çì, T}) where {‚Ñì‚Çò·µ¢‚Çô, ‚Ñì‚Çò‚Çê‚ÇìW, m‚Ä≤‚Çò‚Çê‚Çì, T<:Real} = ‚Ñì‚Çò‚Çê‚ÇìW
m‚Ä≤‚Çò‚Çê‚Çì(::WignerMatrixCalculator{‚Ñì‚Çò·µ¢‚Çô, ‚Ñì‚Çò‚Çê‚Çì, m‚Ä≤‚Çò‚Çê‚ÇìW, T}) where {‚Ñì‚Çò·µ¢‚Çô, ‚Ñì‚Çò‚Çê‚Çì, m‚Ä≤‚Çò‚Çê‚ÇìW, T<:Real} = m‚Ä≤‚Çò‚Çê‚ÇìW
T(::WignerMatrixCalculator{‚Ñì‚Çò·µ¢‚Çô, ‚Ñì‚Çò‚Çê‚Çì, m‚Ä≤‚Çò‚Çê‚Çì, TW}) where {‚Ñì‚Çò·µ¢‚Çô, ‚Ñì‚Çò‚Çê‚Çì, m‚Ä≤‚Çò‚Çê‚Çì, TW<:Real} = TW
# ‚Ñì‚Çò·µ¢‚Çô(w) = ‚Ñì‚Çò·µ¢‚Çô(typeof(w))
# ‚Ñì‚Çò‚Çê‚Çì(w) = ‚Ñì‚Çò‚Çê‚Çì(typeof(w))
# m‚Ä≤‚Çò‚Çê‚Çì(w) = m‚Ä≤‚Çò‚Çê‚Çì(typeof(w))
# T(w) = T(typeof(w))

# Access pre-computed array sizes
WignerHsize(::Type{W}) where {W<:WignerMatrixCalculator} = WignerHsize(m‚Ä≤‚Çò‚Çê‚Çì(W), ‚Ñì‚Çò‚Çê‚Çì(W))
Wignerdsize(::Type{W}) where {W<:WignerMatrixCalculator} = Wignerdsize(‚Ñì‚Çò·µ¢‚Çô(W), m‚Ä≤‚Çò‚Çê‚Çì(W), ‚Ñì‚Çò‚Çê‚Çì(W))
WignerDsize(::Type{W}) where {W<:WignerMatrixCalculator} = WignerDsize(‚Ñì‚Çò·µ¢‚Çô(W), m‚Ä≤‚Çò‚Çê‚Çì(W), ‚Ñì‚Çò‚Çê‚Çì(W))
Ysize(::Type{W}) where {W<:WignerMatrixCalculator} = Ysize(‚Ñì‚Çò·µ¢‚Çô(W), ‚Ñì‚Çò‚Çê‚Çì(W))
WignerHsize(w::WignerMatrixCalculator) = WignerHsize(typeof(w))
Wignerdsize(w::WignerMatrixCalculator) = Wignerdsize(typeof(w))
WignerDsize(w::WignerMatrixCalculator) = WignerDsize(typeof(w))
Ysize(w::WignerMatrixCalculator) = Ysize(typeof(w))

# Access pre-computed helper data
function a(::Type{W}) where {W<:WignerMatrixCalculator}
    [‚àö((n+1+m) * (n+1-m) / T(W)((2n+1)*(2n+3))) for n in 0:‚Ñì‚Çò‚Çê‚Çì(W)+1 for m in 0:n]
end
a(w) = a(typeof(w))
function b(::Type{W}) where {W<:WignerMatrixCalculator}
    [(m<0 ? -1 : 1) * ‚àö((n-m-1) * (n-m) / T(W)((2n-1)*(2n+1))) for n in 0:‚Ñì‚Çò‚Çê‚Çì(W)+1 for m in -n:n]
end
b(w) = b(typeof(w))
function d(::Type{W}) where {W<:WignerMatrixCalculator}
    [(m<0 ? -1 : 1) * (‚àöT(W)((n-m) * (n+m+1))) / 2 for n in 0:‚Ñì‚Çò‚Çê‚Çì(W)+1 for m in -n:n]
end
d(w) = d(typeof(w))

function Base.show(io::IO, w::WignerMatrixCalculator)
    print(io, typeof(w))
end
