# # Return flat index into arrray of (n, m) pairs.
# # Assumes array is ordered as
# #   [
# #     (n, m)
# #     for n in 0:n_max
# #     for m in -n:n
# # ]
# @inline nm_index(n, m) = m + n * (n + 1) + 1


# function H!(
#     Hwedge::AbstractVector{T}, Hextra::AbstractVector{T}, Hv::AbstractVector{T},
#     ‚Ñì‚Çò·µ¢‚Çô, ‚Ñì‚Çò‚Çê‚Çì, expiŒ≤::Complex{T}
# ) where {T<:Real}
#     H!(Hwedge, Hextra, Hv, ‚Ñì‚Çò·µ¢‚Çô, ‚Ñì‚Çò‚Çê‚Çì, ‚Ñì‚Çò‚Çê‚Çì, expiŒ≤)
# end

# function H!(
#     Hwedge::AbstractVector{T}, Hextra::AbstractVector{T}, Hv::AbstractVector{T},
#     ‚Ñì‚Çò‚Çê‚Çì, expiŒ≤::Complex{T}
# ) where {T<:Real}
#     H!(Hwedge, Hextra, Hv, 0, ‚Ñì‚Çò‚Çê‚Çì, ‚Ñì‚Çò‚Çê‚Çì, expiŒ≤)
# end

# function H(‚Ñì‚Çò·µ¢‚Çô, ‚Ñì‚Çò‚Çê‚Çì, m‚Ä≤‚Çò‚Çê‚Çì, expiŒ≤::Complex{T}) where {T<:Real}
#     Hwedge = zeros(T, WignerHsize(m‚Ä≤‚Çò‚Çê‚Çì, ‚Ñì‚Çò‚Çê‚Çì))
#     Hv = zeros(T, (‚Ñì‚Çò‚Çê‚Çì + 1)^2)
#     Hextra = zeros(T, ‚Ñì‚Çò‚Çê‚Çì + 2)
#     H!(Hwedge, Hextra, Hv, ‚Ñì‚Çò·µ¢‚Çô, ‚Ñì‚Çò‚Çê‚Çì, m‚Ä≤‚Çò‚Çê‚Çì, expiŒ≤)
# end

# function H(‚Ñì‚Çò·µ¢‚Çô, ‚Ñì‚Çò‚Çê‚Çì, expiŒ≤::Complex{T}) where {T<:Real}
#     H(‚Ñì‚Çò·µ¢‚Çô, ‚Ñì‚Çò‚Çê‚Çì, ‚Ñì‚Çò‚Çê‚Çì, expiŒ≤)
# end

# function H(‚Ñì‚Çò‚Çê‚Çì, expiŒ≤::Complex{T}) where {T<:Real}
#     H(0, ‚Ñì‚Çò‚Çê‚Çì, ‚Ñì‚Çò‚Çê‚Çì, expiŒ≤)
# end


# function H!(
#     H::AbstractVector{TU}, expiŒ≤::Complex{T}, ‚Ñì‚Çò‚Çê‚Çì::Integer, m‚Ä≤‚Çò‚Çê‚Çì::Integer,
#     (a,b,d), Hindex=WignerHindex
# ) where {TU<:Union{T, Complex{T}}, T<:Real}

"""
    H!(H, expiŒ≤, ‚Ñì‚Çò‚Çê‚Çì, m‚Ä≤‚Çò‚Çê‚Çì, H_rec_coeffs)
    H!(H, expiŒ≤, ‚Ñì‚Çò‚Çê‚Çì, m‚Ä≤‚Çò‚Çê‚Çì, H_rec_coeffs, Hindex)

Compute the ``H`` matrix defined by Gumerov and Duraiswami.

This computation forms the basis for computing Wigner's ``d`` and ``ùîá``
matrices via [`d!`](@ref) and [`D!`](@ref), the spin-weighted spherical
harmonics via [`Y!`](@ref), and for transforming from values of spin-weighted
spherical functions evaluated on a grid to the corresponding mode weights via
[`map2salm`](@ref).

Due to symmetries, we only need to compute ~1/4 of the elements of this matrix,
so only those elements with ``m ‚â• |m‚Ä≤|`` are computed.  The relevant indices of
the `H` vector are computed based on the `Hindex` function ‚Äî which defaults to
`WignerHindex`, but could reasonably be `WignerDindex` if the input `H` vector
contains all valid indices.  However, it is assumed that the storage scheme
used for `H` is such that the successive ``m`` values are located in successive
elements.

If ``m‚Ä≤‚Çò‚Çê‚Çì < ‚Ñì‚Çò‚Çê‚Çì``, we don't even need 1/4 of the elements, and only values
with ``|m‚Ä≤| ‚â§ m‚Ä≤‚Çò‚Çê‚Çì`` will be computed.  This is particularly useful for
computing spin-weighted spherical harmonics.

Note that the recursion coefficients `H_rec_coeffs` should be the quantity
returned by [`H_recursion_coefficients`](@ref).

"""
function H2!(HC::HCalculator{T}, expiŒ≤::Complex{T}, n) where {T<:Real}
    @assert n ‚â§ HC.‚Ñì‚Çò‚Çê‚Çì
    m‚Ä≤‚Çò‚Çê‚Çì = HC.m‚Ä≤‚Çò‚Çê‚Çì
    H‚Çô‚Çä‚ÇÅ‚Å∞ = HC.H‚Çô‚Çä‚ÇÅ‚Å∞
    H‚Çô = HC.H‚Çô
    sqrt3 = HC.sqrt3
    invsqrt2 = HC.invsqrt2
    sqrt2n = ‚àöT(2n)
    sqrtnnp1 = ‚àöT(n*(n+1))
    inv2np1 = inv(T(2n+2))

    cosŒ≤ = expiŒ≤.re
    sinŒ≤ = expiŒ≤.im
    cosŒ≤‚Çä = (1+cosŒ≤)/2  # = cos¬≤(Œ≤/2)
    cosŒ≤‚Çã = (1-cosŒ≤)/2  # = sin¬≤(Œ≤/2)

    @inbounds begin
        if n == 0

            # Step 1
            H‚Çô[1] = 1
            # Step 2 is moot for H‚Çô
            # Step 2 for H‚Çô‚Çä‚ÇÅ‚Å∞
            H‚Çô‚Çä‚ÇÅ‚Å∞[1] = cosŒ≤
            H‚Çô‚Çä‚ÇÅ‚Å∞[2] = invsqrt2 * sinŒ≤
            # Steps 3‚Äî5 are moot

        elseif n == 1
            i‚Çô = ifelse(m‚Ä≤‚Çò‚Çê‚Çì == 0, 1, 2)

            # Step 1 is irrelevant for n>0

            # Step 2 for H‚Çô is just copying from H‚Çô‚Çä‚ÇÅ‚Å∞
            @views H‚Çô[i‚Çô:i‚Çô+n] .= H‚Çô‚Çä‚ÇÅ‚Å∞[1:n+1]

            # Step 2 for H‚Çô‚Çä‚ÇÅ‚Å∞
            bÃÑ‚ÇÇ = invsqrt2
            cÃÑ‚ÇÇ‚ÇÅ = sqrt3 / 2
            ƒì‚ÇÇ‚ÇÅ = cÃÑ‚ÇÇ‚ÇÅ * invsqrt2
            ƒì‚ÇÇ‚ÇÇ = cÃÑ‚ÇÇ‚ÇÅ
            H‚Çô‚Çä‚ÇÅ‚Å∞[1] = cosŒ≤ * H‚Çô[i‚Çô] - bÃÑ‚ÇÇ * sinŒ≤ * H‚Çô[i‚Çô+1]
            H‚Çô‚Çä‚ÇÅ‚Å∞[2] = cÃÑ‚ÇÇ‚ÇÅ * cosŒ≤ * H‚Çô[i‚Çô+1] + sinŒ≤ * ƒì‚ÇÇ‚ÇÅ * H‚Çô[i‚Çô]
            H‚Çô‚Çä‚ÇÅ‚Å∞[3] = sinŒ≤ * ƒì‚ÇÇ‚ÇÇ * H‚Çô[i‚Çô+1]
            if m‚Ä≤‚Çò‚Çê‚Çì > 0
                # Step 3
                H‚Çô[4] = (
                    invsqrt2 * sqrt3 * (-2cosŒ≤‚Çã * H‚Çô‚Çä‚ÇÅ‚Å∞[3] ‚àí sinŒ≤ * H‚Çô‚Çä‚ÇÅ‚Å∞[2])
                    ‚àí cosŒ≤‚Çä * H‚Çô‚Çä‚ÇÅ‚Å∞[1]
                )
                # Step 4 is finished by step 3
                # Step 5
                H‚Çô[1] = -(H‚Çô[4] + H‚Çô[2])
            end

        else  # n > 1
            #i‚Çô = WignerHindex(n, 0, 0, m‚Ä≤‚Çò‚Çê‚Çì) - WignerHindex(n-1, min(m‚Ä≤‚Çò‚Çê‚Çì, n-1), n-1, m‚Ä≤‚Çò‚Çê‚Çì)
            i‚Çô = offset(HC, n, 0, 0)
            i‚Çô0 = i‚Çô

            # Step 1 is irrelevant for n>0

            # Step 2 for H‚Çô is just copying from H‚Çô‚Çä‚ÇÅ‚Å∞
            @views H‚Çô[i‚Çô:i‚Çô+n] .= H‚Çô‚Çä‚ÇÅ‚Å∞[1:n+1]

            # Step 2 for H‚Çô‚Çä‚ÇÅ‚Å∞
            bÃÑ‚Çô = ‚àö(T(n)/(n+1))
            # H^{0,0}_{n} = cosŒ≤ H^{0,0}_{n-1} - bÃÑ‚Çô sinŒ≤ H^{0,1}_{n-1}
            H‚Çô‚Çä‚ÇÅ‚Å∞[1] = cosŒ≤ * H‚Çô[i‚Çô] - bÃÑ‚Çô  * sinŒ≤ * H‚Çô[i‚Çô+1]
            # H^{0,m}_{n} = cÃÑ‚Çô‚Çò cosŒ≤ H^{0,m}_{n-1} - sinŒ≤ [dÃÑ‚Çô‚Çò H^{0,m+1}_{n-1} - ƒì‚Çô‚Çò H^{0,m-1}_{n-1}]
            for m in 1:n-1
                i‚Çô += 1
                cÃÑ‚Çô‚Çò = 2inv2np1 * ‚àöT((n+1+m)*(n+1-m))
                dÃÑ‚Çô‚Çò = inv2np1 * ‚àöT((n+1-m)*(n-m))
                ƒì‚Çô‚Çò = inv2np1 * ‚àöT((n+1+m)*(n+m))
                H‚Çô‚Çä‚ÇÅ‚Å∞[1+m] = (
                    cÃÑ‚Çô‚Çò * cosŒ≤ * H‚Çô[i‚Çô]
                    - sinŒ≤ * (
                        dÃÑ‚Çô‚Çò * H‚Çô[i‚Çô+1]
                        - ƒì‚Çô‚Çò * H‚Çô[i‚Çô-1]
                    )
                )
            end
            let m = n
                i‚Çô += 1
                cÃÑ‚Çô‚Çò = 2inv2np1 * ‚àöT(2n+1)
                #dÃÑ‚Çô‚Çò = 0
                ƒì‚Çô‚Çò = inv2np1 * ‚àöT((2n+1)*(2n))
                H‚Çô‚Çä‚ÇÅ‚Å∞[1+m] = (
                    cÃÑ‚Çô‚Çò * cosŒ≤ * H‚Çô[i‚Çô]
                    + sinŒ≤ * ƒì‚Çô‚Çò * H‚Çô[i‚Çô-1]
                )
            end
            let m = n+1
                i‚Çô += 1
                #cÃÑ‚Çô‚Çò = 0
                #dÃÑ‚Çô‚Çò = 0
                ƒì‚Çô‚Çò = inv2np1 * ‚àöT((2n+2)*(2n+1))
                H‚Çô‚Çä‚ÇÅ‚Å∞[1+m] = sinŒ≤ * ƒì‚Çô‚Çò * H‚Çô[i‚Çô-1]
            end

            if m‚Ä≤‚Çò‚Çê‚Çì > 0
                # Step 3: Compute H^{1,m}_{n}(Œ≤) for m=1,...,n
                # i‚Çô is now pointing at H^{1, 1}_{n}
                invsqrtnnp1 = inv(sqrtnnp1)
                for m in 1:n
                    a = ‚àöT((n+m+1)*(n-m+1))
                    b1 = ‚àöT((n+m+1)*(n+m+2))
                    b2 = ‚àöT((n-m+1)*(n-m+2))
                    H‚Çô[i‚Çô] = -invsqrtnnp1 * (
                        b1 * cosŒ≤‚Çã * H‚Çô‚Çä‚ÇÅ‚Å∞[m+2]
                        + b2 * cosŒ≤‚Çä * H‚Çô‚Çä‚ÇÅ‚Å∞[m]
                        + a * sinŒ≤ * H‚Çô‚Çä‚ÇÅ‚Å∞[m+1]
                    )
                    i‚Çô += 1
                end

                # Step 4: Compute H^{m‚Ä≤+1, m}_{n}(Œ≤) for m‚Ä≤=1,...,n‚àí1, m=m‚Ä≤,...,n
                d1 = sqrtnnp1
                for m‚Ä≤ in 1:min(n, m‚Ä≤‚Çò‚Çê‚Çì)-1
                    #i‚Çô‚Ä≤ = i‚Çô - (n-m‚Ä≤)
                    i‚Çô = offset(HC, n, m‚Ä≤+1, m‚Ä≤+1)
                    i‚Çô‚Ä≤ = offset(HC, n, m‚Ä≤, m‚Ä≤)
                    i‚Çô‚Ä≤‚Ä≤ = offset(HC, n, m‚Ä≤-1, m‚Ä≤+1)
                    # i‚Çô points at H^{m‚Ä≤+1, m}_{n}
                    # i‚Çô‚Ä≤ points at H^{m‚Ä≤, m-1}_{n}
                    # i‚Çô‚Ä≤‚Ä≤ points at H^{m‚Ä≤-1, m}_{n}
                    # d1 ‚âî d^{m‚Ä≤}_{n} = ‚àöT((n-m‚Ä≤)*(n+m‚Ä≤+1))
                    # d2 ‚âî d^{m‚Ä≤-1}_{n} = ‚àöT((n-m‚Ä≤+1)*(n+m‚Ä≤))
                    # d3 ‚âî d^{m-1}_{n} = ‚àöT((n-m+1)*(n+m))
                    # d4 ‚âî d^{m}_{n} = ‚àöT((n-m)*(n+m+1))
                    d2 = d1
                    d1 = ‚àöT((n-m‚Ä≤)*(n+m‚Ä≤+1))
                    d4 = d1
                    invd1 = inv(d1)
                    for m in m‚Ä≤+1:n-1
                        d3 = d4
                        d4 = ‚àöT((n-m)*(n+m+1))
                        H‚Çô[i‚Çô] = invd1 * (
                            d2 * H‚Çô[i‚Çô‚Ä≤‚Ä≤]
                            - d3 * H‚Çô[i‚Çô‚Ä≤]
                            + d4 * H‚Çô[i‚Çô‚Ä≤+2]
                            # d2 * H‚Çô[i‚Çô‚Ä≤ - (n-m‚Ä≤+1)]
                            # - d3 * H‚Çô[i‚Çô‚Ä≤-1]
                            # + d4 * H‚Çô[i‚Çô‚Ä≤+1]
                        )
                        i‚Çô += 1
                        i‚Çô‚Ä≤ += 1
                        i‚Çô‚Ä≤‚Ä≤ += 1
                    end
                    let m = n
                        d3 = sqrt2n
                        H‚Çô[i‚Çô] = invd1 * (
                            d2 * H‚Çô[i‚Çô‚Ä≤‚Ä≤]
                            - d3 * H‚Çô[i‚Çô‚Ä≤]
                            # d2 * H‚Çô[i‚Çô‚Ä≤ - (n-m‚Ä≤+1)]
                            # - d3 * H‚Çô[i‚Çô‚Ä≤-1]
                        )
                        # i‚Çô += 1
                        # i‚Çô‚Ä≤ += 1
                    end
                end  # Step 4

                # Step 5: Compute H^{m‚Ä≤‚àí1, m}_{n}(Œ≤) for m‚Ä≤=0,...,‚àín+1, m=‚àím‚Ä≤,...,n
                #i‚Çô = i‚Çô0 - 1
                d2 = sqrtnnp1
                #offset2 = 0  # Account for 2 missing elements when m‚Ä≤==0
                for m‚Ä≤ in 0:-1:-min(n, m‚Ä≤‚Çò‚Çê‚Çì)+1
                    # i‚Çô‚Ä≤ = i‚Çô + (n+m‚Ä≤) + 1
                    # # i‚Çô points at H^{m‚Ä≤-1, m}_{n}
                    # # i‚Çô‚Ä≤ points at H^{m‚Ä≤, m}_{n}
                    i‚Çô = offset(HC, n, m‚Ä≤-1, n)
                    i‚Çô‚Ä≤ = offset(HC, n, m‚Ä≤, n-1)
                    i‚Çô‚Ä≤‚Ä≤ = offset(HC, n, m‚Ä≤+1, n)
                    # i‚Çô points at H^{m‚Ä≤-1, m}_{n}
                    # i‚Çô‚Ä≤ points at H^{m‚Ä≤, m-1}_{n}
                    # i‚Çô‚Ä≤‚Ä≤ points at H^{m‚Ä≤+1, m}_{n}
                    # d1 ‚âî d^{m‚Ä≤-1}_{n} = -‚àöT((n-m‚Ä≤+1)*(n+m‚Ä≤))
                    # d2 ‚âî d^{m‚Ä≤}_{n} = ‚àöT((n-m‚Ä≤)*(n+m‚Ä≤+1))
                    # d3 ‚âî d^{m-1}_{n} = ‚àöT((n-m+1)*(n+m))
                    # d4 ‚âî d^{m}_{n} = ‚àöT((n-m)*(n+m+1))

                    d1 = -‚àöT((n-m‚Ä≤+1)*(n+m‚Ä≤))
                    invd1 = inv(d1)
                    d3 = sqrt2n
                    let m = n
                        # @show (n,m‚Ä≤,m) indices[i‚Çô] indices[i‚Çô‚Ä≤] indices[i‚Çô‚Ä≤‚Ä≤]
                        # println()
                        H‚Çô[i‚Çô] = invd1 * (
                            d2 * H‚Çô[i‚Çô‚Ä≤‚Ä≤]
                            + d3 * H‚Çô[i‚Çô‚Ä≤]
                            # d2 * H‚Çô[i‚Çô‚Ä≤ + (n+m‚Ä≤+offset2)]
                            # + d3 * H‚Çô[i‚Çô‚Ä≤-1]
                        )
                        i‚Çô -= 1
                        i‚Çô‚Ä≤ -= 1
                        i‚Çô‚Ä≤‚Ä≤ -= 1
                    end
                    for m in n-1:-1:1-m‚Ä≤
                        d4 = d3
                        d3 = ‚àöT((n-m+1)*(n+m))
                        H‚Çô[i‚Çô] = invd1 * (
                            d2 * H‚Çô[i‚Çô‚Ä≤‚Ä≤]
                            + d3 * H‚Çô[i‚Çô‚Ä≤]
                            - d4 * H‚Çô[i‚Çô‚Ä≤+2]
                            # d2 * H‚Çô[i‚Çô‚Ä≤ + (n+m‚Ä≤+offset2)]
                            # + d3 * H‚Çô[i‚Çô‚Ä≤-1]
                            # - d4 * H‚Çô[i‚Çô‚Ä≤+1]
                        )
                        i‚Çô -= 1
                        i‚Çô‚Ä≤ -= 1
                        i‚Çô‚Ä≤‚Ä≤ -= 1
                    end
                    #offset2 = 2
                    d2 = d1
                end  # Step 5

            end


        end  # if n‚Çò‚Çê‚Çì > 0
    end  # @inbounds
    H‚Çô
end
