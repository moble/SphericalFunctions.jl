# # Return flat index into arrray of (n, m) pairs.
# # Assumes array is ordered as
# #   [
# #     (n, m)
# #     for n in 0:n_max
# #     for m in -n:n
# # ]
# @inline nm_index(n, m) = m + n * (n + 1) + 1


# function H!(
#     Hwedge::AbstractVector{T}, Hextra::AbstractVector{T}, Hv::AbstractVector{T},
#     ‚Ñì‚Çò·µ¢‚Çô, ‚Ñì‚Çò‚Çê‚Çì, expiŒ≤::Complex{T}
# ) where {T<:Real}
#     H!(Hwedge, Hextra, Hv, ‚Ñì‚Çò·µ¢‚Çô, ‚Ñì‚Çò‚Çê‚Çì, ‚Ñì‚Çò‚Çê‚Çì, expiŒ≤)
# end

# function H!(
#     Hwedge::AbstractVector{T}, Hextra::AbstractVector{T}, Hv::AbstractVector{T},
#     ‚Ñì‚Çò‚Çê‚Çì, expiŒ≤::Complex{T}
# ) where {T<:Real}
#     H!(Hwedge, Hextra, Hv, 0, ‚Ñì‚Çò‚Çê‚Çì, ‚Ñì‚Çò‚Çê‚Çì, expiŒ≤)
# end

# function H(‚Ñì‚Çò·µ¢‚Çô, ‚Ñì‚Çò‚Çê‚Çì, m‚Ä≤‚Çò‚Çê‚Çì, expiŒ≤::Complex{T}) where {T<:Real}
#     Hwedge = zeros(T, WignerHsize(m‚Ä≤‚Çò‚Çê‚Çì, ‚Ñì‚Çò‚Çê‚Çì))
#     Hv = zeros(T, (‚Ñì‚Çò‚Çê‚Çì + 1)^2)
#     Hextra = zeros(T, ‚Ñì‚Çò‚Çê‚Çì + 2)
#     H!(Hwedge, Hextra, Hv, ‚Ñì‚Çò·µ¢‚Çô, ‚Ñì‚Çò‚Çê‚Çì, m‚Ä≤‚Çò‚Çê‚Çì, expiŒ≤)
# end

# function H(‚Ñì‚Çò·µ¢‚Çô, ‚Ñì‚Çò‚Çê‚Çì, expiŒ≤::Complex{T}) where {T<:Real}
#     H(‚Ñì‚Çò·µ¢‚Çô, ‚Ñì‚Çò‚Çê‚Çì, ‚Ñì‚Çò‚Çê‚Çì, expiŒ≤)
# end

# function H(‚Ñì‚Çò‚Çê‚Çì, expiŒ≤::Complex{T}) where {T<:Real}
#     H(0, ‚Ñì‚Çò‚Çê‚Çì, ‚Ñì‚Çò‚Çê‚Çì, expiŒ≤)
# end


# function H!(
#     H::AbstractVector{TU}, expiŒ≤::Complex{T}, ‚Ñì‚Çò‚Çê‚Çì::Integer, m‚Ä≤‚Çò‚Çê‚Çì::Integer,
#     (a,b,d), Hindex=WignerHindex
# ) where {TU<:Union{T, Complex{T}}, T<:Real}

"""
    H!(H, expiŒ≤, ‚Ñì‚Çò‚Çê‚Çì, m‚Ä≤‚Çò‚Çê‚Çì, H_rec_coeffs)
    H!(H, expiŒ≤, ‚Ñì‚Çò‚Çê‚Çì, m‚Ä≤‚Çò‚Çê‚Çì, H_rec_coeffs, Hindex)

Compute the ``H`` matrix defined by Gumerov and Duraiswami.

This computation forms the basis for computing Wigner's ``d`` and ``ùîá``
matrices via [`d!`](@ref) and [`D!`](@ref), the spin-weighted spherical
harmonics via [`Y!`](@ref), and for transforming from values of spin-weighted
spherical functions evaluated on a grid to the corresponding mode weights via
[`map2salm`](@ref).

Due to symmetries, we only need to compute ~1/4 of the elements of this matrix,
so only those elements with ``m ‚â• |m‚Ä≤|`` are computed.  The relevant indices of
the `H` vector are computed based on the `Hindex` function ‚Äî which defaults to
`WignerHindex`, but could reasonably be `WignerDindex` if the input `H` vector
contains all valid indices.  However, it is assumed that the storage scheme
used for `H` is such that the successive ``m`` values are located in successive
elements.

If ``m‚Ä≤‚Çò‚Çê‚Çì < ‚Ñì‚Çò‚Çê‚Çì``, we don't even need 1/4 of the elements, and only values
with ``|m‚Ä≤| ‚â§ m‚Ä≤‚Çò‚Çê‚Çì`` will be computed.  This is particularly useful for
computing spin-weighted spherical harmonics.

Note that the recursion coefficients `H_rec_coeffs` should be the quantity
returned by [`H_recursion_coefficients`](@ref).

"""
function H2!(HC::HCalculator{T}, expiŒ≤::Complex{T}, ‚Ñì) where {T<:Real}
    @assert ‚Ñì ‚â§ HC.‚Ñì‚Çò‚Çê‚Çì
    ‚Ñì‚Çò‚Çê‚Çì = HC.‚Ñì‚Çò‚Çê‚Çì
    m‚Ä≤‚Çò‚Çê‚Çì = HC.m‚Ä≤‚Çò‚Çê‚Çì
    H‚Çô‚Çä‚ÇÅ‚Å∞ = HC.H‚Çô‚Çä‚ÇÅ‚Å∞
    H‚Çô = HC.H‚Çô
    H‚Çô‚Çã‚ÇÅ‚Å∞ = HC.H‚Çô‚Çã‚ÇÅ‚Å∞
    (a‚Çô·µê,b‚Çô·µê,d‚Çô·µê) = HC.H_rec_coeffs

    sqrt3 = ‚àöT(3)
    invsqrt2 = inv(‚àöT(2))
    cosŒ≤ = expiŒ≤.re
    sinŒ≤ = expiŒ≤.im
    cosŒ≤‚Çä = (1+cosŒ≤)/2  # = cos¬≤(Œ≤/2)
    cosŒ≤‚Çã = (1-cosŒ≤)/2  # = sin¬≤(Œ≤/2)

    @inbounds begin
        if ‚Ñì == 0

            # Step 1
            H‚Çô[1] = 1
            # Step 2 is moot for H‚Çô
            # Step 2 for H‚Çô‚Çä‚ÇÅ‚Å∞
            H‚Çô‚Çä‚ÇÅ‚Å∞[1] = cosŒ≤
            H‚Çô‚Çä‚ÇÅ‚Å∞[2] = invsqrt2 * sinŒ≤
            # Steps 3‚Äî5 are moot

        elseif ‚Ñì == 1

            # Step 1 is skipped
            # Step 2 is finished for H‚Çô by copying
            # Step 2 for H‚Çô‚Çä‚ÇÅ‚Å∞
            let i_100 = ifelse(m‚Ä≤‚Çò‚Çê‚Çì == 0, 1, 2)
                bÃÑ‚ÇÇ = invsqrt2
                cÃÑ‚ÇÇ‚ÇÅ = sqrt3 / 2
                ƒì‚ÇÇ‚ÇÅ = cÃÑ‚ÇÇ‚ÇÅ * invsqrt2
                ƒì‚ÇÇ‚ÇÇ = cÃÑ‚ÇÇ‚ÇÅ
                H‚Çô‚Çä‚ÇÅ‚Å∞[1] = cosŒ≤ * H‚Çô[i_100] - bÃÑ‚ÇÇ * sinŒ≤ * H‚Çô[i_100+1]
                H‚Çô‚Çä‚ÇÅ‚Å∞[2] = cÃÑ‚ÇÇ‚ÇÅ * cosŒ≤ * H‚Çô[i_100+1] + sinŒ≤ * ƒì‚ÇÇ‚ÇÅ * H‚Çô[i_100]
                H‚Çô‚Çä‚ÇÅ‚Å∞[3] = sinŒ≤ * ƒì‚ÇÇ‚ÇÇ * H‚Çô[i_100+1]
            end
            if m‚Ä≤‚Çò‚Çê‚Çì > 0
                # Step 3
                # b^{0}_{2} H^{1, 1}_{1}
                #   = b^{‚àí2}_{2} cosŒ≤‚Çã H^{0, 2}_{2}
                #   ‚àí b^{0}_{2} cosŒ≤‚Çä H^{0, 0}_{2}
                #   ‚àí a^{1}_{1} \sin Œ≤ H^{0, 1}_{2}
                # H‚Çô[4] = (b(2,-2) cosŒ≤‚Çã H‚Çô‚Çä‚ÇÅ‚Å∞[3] ‚àí b(2,0) cosŒ≤‚Çä H‚Çô‚Çä‚ÇÅ‚Å∞[1] ‚àí a(1,1) sinŒ≤ H‚Çô‚Çä‚ÇÅ‚Å∞[2]) / b(2,0)
                #       = (b(2,-2) / b(2,0) cosŒ≤‚Çã H‚Çô‚Çä‚ÇÅ‚Å∞[3] ‚àí a(1,1) / b(2,0) sinŒ≤ H‚Çô‚Çä‚ÇÅ‚Å∞[2]) ‚àí cosŒ≤‚Çä H‚Çô‚Çä‚ÇÅ‚Å∞[1]
                # a(1,1) = inv(‚àöT(5))
                # b(2,0) = inv(‚àöT(5)) / sqrt3 / invsqrt2
                # b(2,-2) = -2inv(‚àöT(5))
                # b(2,-2) / b(2,0) = -2 sqrt3 * invsqrt2
                # a(1,1) / b(2,0) = sqrt3 * invsqrt2
                H‚Çô[4] = (
                    invsqrt2 * sqrt3 * (-2cosŒ≤‚Çã * H‚Çô‚Çä‚ÇÅ‚Å∞[3] ‚àí sinŒ≤ * H‚Çô‚Çä‚ÇÅ‚Å∞[2])
                    ‚àí cosŒ≤‚Çä * H‚Çô‚Çä‚ÇÅ‚Å∞[1]
                )
                # Step 4 is finished by step 3
                # Step 5
                H‚Çô[1] = -(H‚Çô[4] + H‚Çô[2])
                # d(n,m) = (m<0 ? -1 : 1) * (‚àöT((n-m)*(n+m+1))) / 2
                # d(1,0) = invsqrt2
                # d(1,-1) = -invsqrt2
                # H[1, -1, 1] = d[1, 0] (H[1, 1, 1] + H[1, 0, 0]) / d[1, -1]
            end

        else

            @info "Skipping H calculation for ‚Ñì=$‚Ñì"

        end  # if ‚Ñì‚Çò‚Çê‚Çì > 0
    end  # @inbounds
    H‚Çô
end
