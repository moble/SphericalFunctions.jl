"""
    WignerHsize(m‚Ä≤‚Çò‚Çê‚Çì, ‚Ñì‚Çò‚Çê‚Çì=-2)

Total size of array of wedges of width m‚Ä≤‚Çò‚Çê‚Çì up to ‚Ñì‚Çò‚Çê‚Çì

Parameters
----------
‚Ñì‚Çò‚Çê‚Çì : int
m‚Ä≤‚Çò‚Çê‚Çì : int, optional
    If nothing, it is assumed to be at least ‚Ñì

See Also
--------
WignerHrange : Array of (‚Ñì, m', m) indices corresponding to this wedge
WignerHindex : Index inside these wedges

Notes
-----
Here, it is assumed that only data with m‚â•|m'| are stored, and only
corresponding values are passed.  We also assume |m|‚â§‚Ñì and |m'|‚â§‚Ñì.  Neither
of these are checked.  The wedge array that this function indexes is ordered as

    [
        H(‚Ñì, m‚Ä≤, m) for ‚Ñì in range(‚Ñì‚Çò‚Çê‚Çì+1)
        for m‚Ä≤ in range(-min(‚Ñì, m‚Ä≤‚Çò‚Çê‚Çì), min(‚Ñì, m‚Ä≤‚Çò‚Çê‚Çì)+1)
        for m in range(abs(m‚Ä≤), ‚Ñì+1)
    ]

"""
function WignerHsize(m‚Ä≤‚Çò‚Çê‚Çì, ‚Ñì‚Çò‚Çê‚Çì=-2)
    if ‚Ñì‚Çò‚Çê‚Çì == -2
        ‚Ñì‚Çò‚Çê‚Çì = m‚Ä≤‚Çò‚Çê‚Çì
    elseif ‚Ñì‚Çò‚Çê‚Çì < 0
        return 0
    end
    if m‚Ä≤‚Çò‚Çê‚Çì === nothing || m‚Ä≤‚Çò‚Çê‚Çì >= ‚Ñì‚Çò‚Çê‚Çì
        return (‚Ñì‚Çò‚Çê‚Çì+1) * (‚Ñì‚Çò‚Çê‚Çì+2) * (2*‚Ñì‚Çò‚Çê‚Çì+3) √∑ 6
    else
        return ((‚Ñì‚Çò‚Çê‚Çì+1) * (‚Ñì‚Çò‚Çê‚Çì+2) * (2*‚Ñì‚Çò‚Çê‚Çì+3) - 2*(‚Ñì‚Çò‚Çê‚Çì-m‚Ä≤‚Çò‚Çê‚Çì)*(‚Ñì‚Çò‚Çê‚Çì-m‚Ä≤‚Çò‚Çê‚Çì+1)*(‚Ñì‚Çò‚Çê‚Çì-m‚Ä≤‚Çò‚Çê‚Çì+2)) √∑ 6
    end
end


"""
    WignerHrange(m‚Ä≤‚Çò‚Çê‚Çì, ‚Ñì‚Çò‚Çê‚Çì=-1)

Create an array of (‚Ñì, m', m) indices as in H array

Parameters
----------
‚Ñì‚Çò‚Çê‚Çì : int
m‚Ä≤‚Çò‚Çê‚Çì : int, optional
    If nothing, it is assumed to be at least ‚Ñì

See Also
--------
WignerHsize : Total size of wedge array
WignerHindex : Index inside these wedges

Notes
-----
Here, it is assumed that only data with m‚â•|m'| are stored, and only
corresponding values are passed.  We also assume |m|‚â§‚Ñì and |m'|‚â§‚Ñì.  Neither of
these are checked.  The wedge array that this function indexes is ordered as

    [
        H(‚Ñì, m‚Ä≤, m) for ‚Ñì in range(‚Ñì‚Çò‚Çê‚Çì+1)
        for m‚Ä≤ in range(-min(‚Ñì, m‚Ä≤‚Çò‚Çê‚Çì), min(‚Ñì, m‚Ä≤‚Çò‚Çê‚Çì)+1)
        for m in range(abs(m‚Ä≤), ‚Ñì+1)
    ]

"""
function WignerHrange(m‚Ä≤‚Çò‚Çê‚Çì, ‚Ñì‚Çò‚Çê‚Çì=-1)
    if ‚Ñì‚Çò‚Çê‚Çì < 0
        ‚Ñì‚Çò‚Çê‚Çì = m‚Ä≤‚Çò‚Çê‚Çì
    end
    r = zeros(typeof(m‚Ä≤‚Çò‚Çê‚Çì), (WignerHsize(m‚Ä≤‚Çò‚Çê‚Çì, ‚Ñì‚Çò‚Çê‚Çì), 3))
    i = 1
    for ‚Ñì in 0:‚Ñì‚Çò‚Çê‚Çì
        for m‚Ä≤ in -min(‚Ñì, m‚Ä≤‚Çò‚Çê‚Çì):min(‚Ñì, m‚Ä≤‚Çò‚Çê‚Çì)
            for m in abs(m‚Ä≤):‚Ñì
                r[i, 1] = ‚Ñì
                r[i, 2] = m‚Ä≤
                r[i, 3] = m
                i += 1
            end
        end
    end
    return r
end


function _WignerHindex(‚Ñì, m‚Ä≤, m, m‚Ä≤‚Çò‚Çê‚Çì)
    """Helper function for `WignerHindex`"""
    m‚Ä≤‚Çò‚Çê‚Çì = min(m‚Ä≤‚Çò‚Çê‚Çì, ‚Ñì)
    i = WignerHsize(m‚Ä≤‚Çò‚Çê‚Çì, ‚Ñì-1)  # total size of everything with smaller ‚Ñì
    if m‚Ä≤<1
        i += (m‚Ä≤‚Çò‚Çê‚Çì + m‚Ä≤) * (2*‚Ñì - m‚Ä≤‚Çò‚Çê‚Çì + m‚Ä≤ + 1) √∑ 2  # size of wedge to the left of m'
    else
        i += (m‚Ä≤‚Çò‚Çê‚Çì + 1) * (2*‚Ñì - m‚Ä≤‚Çò‚Çê‚Çì + 2) √∑ 2  # size of entire left half of wedge
        i += (m‚Ä≤ - 1) * (2*‚Ñì - m‚Ä≤ + 2) √∑ 2  # size of right half of wedge to the left of m'
    end
    i += m - abs(m‚Ä≤)  # size of column in wedge between m and |m'|
    return i + 1
end


"""
    WignerHindex(‚Ñì, m‚Ä≤, m, m‚Ä≤‚Çò‚Çê‚Çì)

Index to "wedge" arrays

Parameters
----------
‚Ñì : int
m‚Ä≤ : int
m : int
m‚Ä≤‚Çò‚Çê‚Çì : int, optional
    If nothing, it is assumed to be at least ‚Ñì

See Also
--------
WignerHsize : Total size of wedge array
WignerHrange : Array of (‚Ñì, m', m) indices corresponding to this wedge

Notes
-----
Here, it is assumed that only data with m‚â•|m'| are stored, and only
corresponding values are passed.  We also assume |m|‚â§‚Ñì and |m'|‚â§‚Ñì.  Neither
of these are checked.  The wedge array that this function indexes is ordered as

    [
        H(‚Ñì, m‚Ä≤, m) for ‚Ñì in range(‚Ñì‚Çò‚Çê‚Çì+1)
        for m‚Ä≤ in range(-min(‚Ñì, m‚Ä≤‚Çò‚Çê‚Çì), min(‚Ñì, m‚Ä≤‚Çò‚Çê‚Çì)+1)
        for m in range(abs(m‚Ä≤), ‚Ñì+1)
    ]

"""
function WignerHindex(‚Ñì, m‚Ä≤, m, m‚Ä≤‚Çò‚Çê‚Çì=nothing)
    if ‚Ñì == 0
        return 1
    end
    m‚Ä≤max = ‚Ñì
    if m‚Ä≤‚Çò‚Çê‚Çì !== nothing
        m‚Ä≤max = min(m‚Ä≤‚Çò‚Çê‚Çì, m‚Ä≤max)
    end
    if m < -m‚Ä≤
        if m < m‚Ä≤
            return _WignerHindex(‚Ñì, -m‚Ä≤, -m, m‚Ä≤max)
        else
            return _WignerHindex(‚Ñì, -m, -m‚Ä≤, m‚Ä≤max)
        end
    else
        if m < m‚Ä≤
            return _WignerHindex(‚Ñì, m, m‚Ä≤, m‚Ä≤max)
        else
            return _WignerHindex(‚Ñì, m‚Ä≤, m, m‚Ä≤max)
        end
    end
end


# function WignerDsize(‚Ñì‚Çò·µ¢‚Çô, m‚Ä≤‚Çò‚Çê‚Çì, ‚Ñì‚Çò‚Çê‚Çì=-1)
#     """Compute total size of Wigner ùîá matrix

#     Parameters
#     ----------
#     ‚Ñì‚Çò·µ¢‚Çô : int
#         Integer satisfying 0 <= ‚Ñì‚Çò·µ¢‚Çô <= ‚Ñì‚Çò‚Çê‚Çì
#     m‚Ä≤‚Çò‚Çê‚Çì : int, optional
#         Integer satisfying 0 <= m‚Ä≤‚Çò‚Çê‚Çì.  Defaults to ‚Ñì‚Çò‚Çê‚Çì.
#     ‚Ñì‚Çò‚Çê‚Çì : int
#         Integer satisfying 0 <= ‚Ñì‚Çò·µ¢‚Çô <= ‚Ñì‚Çò‚Çê‚Çì

#     Returns
#     -------
#     i : int
#         Total size of Wigner ùîá matrix arranged as described below

#     See Also
#     --------
#     WignerDrange : Array of (‚Ñì, m', m) indices corresponding to the ùîá matrix
#     WignerDindex : Index of a particular element of the ùîá matrix

#     Notes
#     -----
#     This assumes that the Wigner ùîá matrix is arranged as

#         [
#             ùîá(‚Ñì, m‚Ä≤, m)
#             for ‚Ñì in range(‚Ñì‚Çò·µ¢‚Çô, ‚Ñì‚Çò‚Çê‚Çì+1)
#             for m‚Ä≤ in range(-min(‚Ñì, m‚Ä≤‚Çò‚Çê‚Çì), min(‚Ñì, m‚Ä≤‚Çò‚Çê‚Çì)+1)
#             for m in range(-‚Ñì, ‚Ñì+1)
#         ]

#     """
#     # from sympy import symbols, summation, horner
#     # from sympy.printing.pycode import pycode
#     # ‚Ñì,m‚Ä≤,m,‚Ñì‚Çò·µ¢‚Çô,‚Ñì‚Çò‚Çê‚Çì,m‚Ä≤‚Çò‚Çê‚Çì = symbols('‚Ñì,m‚Ä≤,m,‚Ñì‚Çò·µ¢‚Çô,‚Ñì‚Çò‚Çê‚Çì,m‚Ä≤‚Çò‚Çê‚Çì', integer=True)
#     # 
#     # def nice(expr)
#     #     return horner(expr.expand().simplify(), (m‚Ä≤‚Çò‚Çê‚Çì, ‚Ñì‚Çò·µ¢‚Çô, ‚Ñì‚Çò‚Çê‚Çì))
#     #
#     # # Assuming ‚Ñì‚Çò·µ¢‚Çô <= ‚Ñì‚Çò‚Çê‚Çì <= m‚Ä≤‚Çò‚Çê‚Çì:
#     # WignerDsize_‚Ñìmin_‚Ñìmax_m‚Ä≤max = horner(
#     #     (
#     #         # sum over all m‚Ä≤=0 elements
#     #         summation(summation(summation(1, (m, -‚Ñì, ‚Ñì)), (m‚Ä≤, 0, 0)), (‚Ñì, ‚Ñì‚Çò·µ¢‚Çô, ‚Ñì‚Çò‚Çê‚Çì))
#     #         # sum over all ‚Ñì‚Çò·µ¢‚Çô <= ‚Ñì <= ‚Ñì‚Çò‚Çê‚Çì elements
#     #         + summation(summation(summation(2, (m, -‚Ñì, ‚Ñì)), (m‚Ä≤, 1, ‚Ñì)), (‚Ñì, ‚Ñì‚Çò·µ¢‚Çô, ‚Ñì‚Çò‚Çê‚Çì))
#     #     ).expand().simplify(),
#     #     (‚Ñì‚Çò·µ¢‚Çô, ‚Ñì‚Çò‚Çê‚Çì)
#     # )
#     # print(f"({pycode(nice(3*WignerDsize_‚Ñìmin_‚Ñìmax_m‚Ä≤max.subs(‚Ñì‚Çò‚Çê‚Çì, ‚Ñì-1)))}) √∑ 3")
#     # 
#     # # Assuming ‚Ñì‚Çò·µ¢‚Çô <= m‚Ä≤‚Çò‚Çê‚Çì <= ‚Ñì‚Çò‚Çê‚Çì:
#     # WignerDsize_‚Ñìmin_m‚Ä≤max_‚Ñìmax = horner(
#     #     (
#     #         # sum over all m‚Ä≤=0 elements
#     #         summation(summation(summation(1, (m, -‚Ñì, ‚Ñì)), (m‚Ä≤, 0, 0)), (‚Ñì, ‚Ñì‚Çò·µ¢‚Çô, ‚Ñì‚Çò‚Çê‚Çì))
#     #         # sum over all ‚Ñì <= m‚Ä≤‚Çò‚Çê‚Çì elements
#     #         + summation(summation(summation(2, (m, -‚Ñì, ‚Ñì)), (m‚Ä≤, 1, ‚Ñì)), (‚Ñì, ‚Ñì‚Çò·µ¢‚Çô, m‚Ä≤‚Çò‚Çê‚Çì))
#     #         # sum over all ‚Ñì >= m‚Ä≤‚Çò‚Çê‚Çì elements
#     #         + summation(summation(summation(2, (m, -‚Ñì, ‚Ñì)), (m‚Ä≤, 1, m‚Ä≤‚Çò‚Çê‚Çì)), (‚Ñì, m‚Ä≤‚Çò‚Çê‚Çì+1, ‚Ñì‚Çò‚Çê‚Çì))
#     #     ).expand().simplify(),
#     #     (m‚Ä≤‚Çò‚Çê‚Çì, ‚Ñì‚Çò·µ¢‚Çô, ‚Ñì‚Çò‚Çê‚Çì)
#     # )
#     # print(f"({pycode(nice(3*WignerDsize_‚Ñìmin_m‚Ä≤max_‚Ñìmax.subs(‚Ñì‚Çò‚Çê‚Çì, ‚Ñì-1)))}) √∑ 3")
#     #
#     # # Assuming m‚Ä≤‚Çò‚Çê‚Çì <= ‚Ñì‚Çò·µ¢‚Çô <= ‚Ñì‚Çò‚Çê‚Çì:
#     # WignerDsize_m‚Ä≤max_‚Ñìmin_‚Ñìmax = horner(
#     #     (
#     #         # sum over all m‚Ä≤=0 elements
#     #         summation(summation(summation(1, (m, -‚Ñì, ‚Ñì)), (m‚Ä≤, 0, 0)), (‚Ñì, ‚Ñì‚Çò·µ¢‚Çô, ‚Ñì‚Çò‚Çê‚Çì))
#     #         # sum over all remaining |m‚Ä≤| <= m‚Ä≤‚Çò‚Çê‚Çì elements
#     #         + summation(summation(summation(2, (m, -‚Ñì, ‚Ñì)), (m‚Ä≤, 1, m‚Ä≤‚Çò‚Çê‚Çì)), (‚Ñì, ‚Ñì‚Çò·µ¢‚Çô, ‚Ñì‚Çò‚Çê‚Çì))
#     #     ).expand().simplify(),
#     #     (m‚Ä≤‚Çò‚Çê‚Çì, ‚Ñì‚Çò·µ¢‚Çô, ‚Ñì‚Çò‚Çê‚Çì)
#     # )
#     # print(f"{pycode(nice(WignerDsize_m‚Ä≤max_‚Ñìmin_‚Ñìmax.subs(‚Ñì‚Çò‚Çê‚Çì, ‚Ñì-1)).factor())}")
#     if ‚Ñì‚Çò‚Çê‚Çì < 0
#         ‚Ñì‚Çò‚Çê‚Çì = m‚Ä≤‚Çò‚Çê‚Çì
#     end
#     if m‚Ä≤‚Çò‚Çê‚Çì >= ‚Ñì‚Çò‚Çê‚Çì
#         return (
#             ‚Ñì‚Çò‚Çê‚Çì * (‚Ñì‚Çò‚Çê‚Çì * (4 * ‚Ñì‚Çò‚Çê‚Çì + 12) + 11)
#             + ‚Ñì‚Çò·µ¢‚Çô * (1 - 4 * ‚Ñì‚Çò·µ¢‚Çô^2)
#             + 3
#         ) √∑ 3
#     end
#     if m‚Ä≤‚Çò‚Çê‚Çì > ‚Ñì‚Çò·µ¢‚Çô
#         return (
#             3 * ‚Ñì‚Çò‚Çê‚Çì * (‚Ñì‚Çò‚Çê‚Çì + 2)
#             + ‚Ñì‚Çò·µ¢‚Çô * (1 - 4 * ‚Ñì‚Çò·µ¢‚Çô^2)
#             + m‚Ä≤‚Çò‚Çê‚Çì * (
#                 3 * ‚Ñì‚Çò‚Çê‚Çì * (2 * ‚Ñì‚Çò‚Çê‚Çì + 4)
#                 + m‚Ä≤‚Çò‚Çê‚Çì * (-2 * m‚Ä≤‚Çò‚Çê‚Çì - 3) + 5
#             )
#             + 3
#         ) √∑ 3
#     else
#         return (‚Ñì‚Çò‚Çê‚Çì * (‚Ñì‚Çò‚Çê‚Çì + 2) - ‚Ñì‚Çò·µ¢‚Çô^2) * (1 + 2 * m‚Ä≤‚Çò‚Çê‚Çì) + 2 * m‚Ä≤‚Çò‚Çê‚Çì + 1
#     end
# end


# function WignerDrange(‚Ñì‚Çò·µ¢‚Çô, m‚Ä≤‚Çò‚Çê‚Çì, ‚Ñì‚Çò‚Çê‚Çì=-1)
#     """Create an array of (‚Ñì, m', m) indices as in ùîá array

#     Parameters
#     ----------
#     ‚Ñì‚Çò·µ¢‚Çô : int
#         Integer satisfying 0 <= ‚Ñì‚Çò·µ¢‚Çô <= ‚Ñì‚Çò‚Çê‚Çì
#     m‚Ä≤‚Çò‚Çê‚Çì : int, optional
#         Integer satisfying 0 <= m‚Ä≤‚Çò‚Çê‚Çì.  Default is ‚Ñì‚Çò‚Çê‚Çì.
#     ‚Ñì‚Çò‚Çê‚Çì : int
#         Integer satisfying 0 <= ‚Ñì‚Çò·µ¢‚Çô <= ‚Ñì‚Çò‚Çê‚Çì

#     See Also
#     --------
#     WignerDsize : Total size of ùîá array
#     WignerDindex : Index inside these wedges

#     Notes
#     -----
#     This assumes that the Wigner ùîá matrix is arranged as

#         [
#             ùîá(‚Ñì, m‚Ä≤, m)
#             for ‚Ñì in range(‚Ñì‚Çò·µ¢‚Çô, ‚Ñì‚Çò‚Çê‚Çì+1)
#             for m‚Ä≤ in range(-min(‚Ñì, m‚Ä≤‚Çò‚Çê‚Çì), min(‚Ñì, m‚Ä≤‚Çò‚Çê‚Çì)+1)
#             for m in range(-‚Ñì, ‚Ñì+1)
#         ]

#     """
#     if ‚Ñì‚Çò‚Çê‚Çì < 0
#         ‚Ñì‚Çò‚Çê‚Çì = m‚Ä≤‚Çò‚Çê‚Çì
#     end
#     r = np.zeros((WignerDsize(‚Ñì‚Çò·µ¢‚Çô, m‚Ä≤‚Çò‚Çê‚Çì, ‚Ñì‚Çò‚Çê‚Çì), 3), dtype=np.int64)
#     i = 0
#     for ‚Ñì in range(‚Ñì‚Çò·µ¢‚Çô, ‚Ñì‚Çò‚Çê‚Çì+1)
#         for m‚Ä≤ in range(-min(‚Ñì, m‚Ä≤‚Çò‚Çê‚Çì), min(‚Ñì, m‚Ä≤‚Çò‚Çê‚Çì)+1)
#             for m in range(-‚Ñì, ‚Ñì+1)
#                 r[i, 0] = ‚Ñì
#                 r[i, 1] = m‚Ä≤
#                 r[i, 2] = m
#                 i += 1
#             end
#         end
#     end
#     return r
# end


# @jit
# def WignerDindex(‚Ñì, m‚Ä≤, m, ‚Ñì‚Çò·µ¢‚Çô=0, m‚Ä≤‚Çò‚Çê‚Çì=-1)
#     """Compute index into Wigner ùîá matrix

#     Parameters
#     ----------
#     ‚Ñì : int
#         Integer satisfying ‚Ñì‚Çò·µ¢‚Çô <= ‚Ñì <= ‚Ñì‚Çò‚Çê‚Çì
#     m‚Ä≤ : int
#         Integer satisfying -min(‚Ñì‚Çò‚Çê‚Çì, m‚Ä≤‚Çò‚Çê‚Çì) <= m‚Ä≤ <= min(‚Ñì‚Çò‚Çê‚Çì, m‚Ä≤‚Çò‚Çê‚Çì)
#     m : int
#         Integer satisfying -‚Ñì <= m <= ‚Ñì
#     ‚Ñì‚Çò·µ¢‚Çô : int, optional
#         Integer satisfying 0 <= ‚Ñì‚Çò·µ¢‚Çô <= ‚Ñì‚Çò‚Çê‚Çì.  Defaults to 0.
#     m‚Ä≤‚Çò‚Çê‚Çì : int, optional
#         Integer satisfying 0 <= m‚Ä≤‚Çò‚Çê‚Çì.  Defaults to ‚Ñì.

#     Returns
#     -------
#     i : int
#         Index into Wigner ùîá matrix arranged as described below

#     See Also
#     --------
#     WignerDsize : Total size of the ùîá matrix
#     WignerDrange : Array of (‚Ñì, m', m) indices corresponding to the ùîá matrix

#     Notes
#     -----
#     This assumes that the Wigner ùîá matrix is arranged as

#         [
#             ùîá(‚Ñì, m‚Ä≤, m)
#             for ‚Ñì in range(‚Ñì‚Çò·µ¢‚Çô, ‚Ñì‚Çò‚Çê‚Çì+1)
#             for m‚Ä≤ in range(-min(‚Ñì, m‚Ä≤‚Çò‚Çê‚Çì), min(‚Ñì, m‚Ä≤‚Çò‚Çê‚Çì)+1)
#             for m in range(-‚Ñì, ‚Ñì+1)
#         ]

#     """
#     if m‚Ä≤‚Çò‚Çê‚Çì < 0
#         m‚Ä≤‚Çò‚Çê‚Çì = ‚Ñì
#     i = (m‚Ä≤ + min(m‚Ä≤‚Çò‚Çê‚Çì, ‚Ñì)) * (2 * ‚Ñì + 1) + m + ‚Ñì
#     if ‚Ñì > ‚Ñì‚Çò·µ¢‚Çô
#         i += WignerDsize(‚Ñì‚Çò·µ¢‚Çô, m‚Ä≤‚Çò‚Çê‚Çì, ‚Ñì-1)
#     return i


# @jit
# def Ysize(‚Ñì‚Çò·µ¢‚Çô, ‚Ñì‚Çò‚Çê‚Çì)
#     """Compute total size of array of mode weights

#     Parameters
#     ----------
#     ‚Ñì‚Çò·µ¢‚Çô : int
#         Integer satisfying 0 <= ‚Ñì‚Çò·µ¢‚Çô <= ‚Ñì‚Çò‚Çê‚Çì
#     ‚Ñì‚Çò‚Çê‚Çì : int
#         Integer satisfying 0 <= ‚Ñì‚Çò·µ¢‚Çô <= ‚Ñì‚Çò‚Çê‚Çì

#     Returns
#     -------
#     i : int
#         Total size of array of mode weights arranged as described below

#     See Also
#     --------
#     Yrange : Array of (‚Ñì, m) indices corresponding to this array
#     Yindex : Index of a particular element of the mode weight array

#     Notes
#     -----
#     This assumes that the modes are arranged (with fixed s value) as

#         [
#             Y(s, ‚Ñì, m)
#             for ‚Ñì in range(‚Ñì‚Çò·µ¢‚Çô, ‚Ñì‚Çò‚Çê‚Çì+1)
#             for m in range(-‚Ñì, ‚Ñì+1)
#         ]

#     """
#     # from sympy import symbols, summation, horner
#     # from sympy.printing.pycode import pycode
#     # ‚Ñì,m,‚Ñì‚Çò·µ¢‚Çô,‚Ñì‚Çò‚Çê‚Çì = symbols('‚Ñì,m,‚Ñì‚Çò·µ¢‚Çô,‚Ñì‚Çò‚Çê‚Çì', integer=True)
#     # 
#     # def nice(expr)
#     #     return horner(expr.expand().simplify(), (m‚Ä≤‚Çò‚Çê‚Çì, ‚Ñì‚Çò·µ¢‚Çô, ‚Ñì‚Çò‚Çê‚Çì))
#     #
#     # Ysize = horner(
#     #     summation(summation(1, (m, -‚Ñì, ‚Ñì)), (‚Ñì, ‚Ñì‚Çò·µ¢‚Çô, ‚Ñì‚Çò‚Çê‚Çì)).expand().simplify(),
#     #     (‚Ñì‚Çò·µ¢‚Çô, ‚Ñì‚Çò‚Çê‚Çì)
#     # )
#     return ‚Ñì‚Çò‚Çê‚Çì * (‚Ñì‚Çò‚Çê‚Çì + 2) - ‚Ñì‚Çò·µ¢‚Çô^2 + 1


# @jit
# def Yrange(‚Ñì‚Çò·µ¢‚Çô, ‚Ñì‚Çò‚Çê‚Çì)
#     """Create an array of (‚Ñì, m) indices as in Y array

#     Parameters
#     ----------
#     ‚Ñì‚Çò·µ¢‚Çô : int
#         Integer satisfying 0 <= ‚Ñì‚Çò·µ¢‚Çô <= ‚Ñì‚Çò‚Çê‚Çì
#     ‚Ñì‚Çò‚Çê‚Çì : int
#         Integer satisfying 0 <= ‚Ñì‚Çò·µ¢‚Çô <= ‚Ñì‚Çò‚Çê‚Çì

#     Returns
#     -------
#     i : int
#         Total size of array of mode weights arranged as described below

#     See Also
#     --------
#     Ysize : Total size of array of mode weights
#     Yindex : Index of a particular element of the mode weight array

#     Notes
#     -----
#     This assumes that the modes are arranged (with fixed s value) as

#         [
#             Y(s, ‚Ñì, m)
#             for ‚Ñì in range(‚Ñì‚Çò·µ¢‚Çô, ‚Ñì‚Çò‚Çê‚Çì+1)
#             for m in range(-‚Ñì, ‚Ñì+1)
#         ]

#     """
#     r = np.zeros((Ysize(‚Ñì‚Çò·µ¢‚Çô, ‚Ñì‚Çò‚Çê‚Çì), 2), dtype=np.int64)
#     i = 0
#     for ‚Ñì in range(‚Ñì‚Çò·µ¢‚Çô, ‚Ñì‚Çò‚Çê‚Çì+1)
#         for m in range(-‚Ñì, ‚Ñì+1)
#             r[i, 0] = ‚Ñì
#             r[i, 1] = m
#             i += 1
#     return r


# @jit
# def Yindex(‚Ñì, m, ‚Ñì‚Çò·µ¢‚Çô=0)
#     """Compute index into array of mode weights

#     Parameters
#     ----------
#     ‚Ñì : int
#         Integer satisfying ‚Ñì‚Çò·µ¢‚Çô <= ‚Ñì <= ‚Ñì‚Çò‚Çê‚Çì
#     m : int
#         Integer satisfying -‚Ñì <= m <= ‚Ñì
#     ‚Ñì‚Çò·µ¢‚Çô : int, optional
#         Integer satisfying 0 <= ‚Ñì‚Çò·µ¢‚Çô.  Defaults to 0.

#     Returns
#     -------
#     i : int
#         Index of a particular element of the mode-weight array as described below

#     See Also
#     --------
#     Ysize : Total size of array of mode weights
#     Yrange : Array of (‚Ñì, m) indices corresponding to this array

#     Notes
#     -----
#     This assumes that the modes are arranged (with fixed s value) as

#         [
#             Y(s, ‚Ñì, m)
#             for ‚Ñì in range(‚Ñì‚Çò·µ¢‚Çô, ‚Ñì‚Çò‚Çê‚Çì+1)
#             for m in range(-‚Ñì, ‚Ñì+1)
#         ]

#     """
#     # from sympy import symbols, summation, horner
#     # from sympy.printing.pycode import pycode
#     # ‚Ñì,m,m‚Ä≤,‚Ñì‚Çò·µ¢‚Çô, = symbols('‚Ñì,m,m‚Ä≤,‚Ñì‚Çò·µ¢‚Çô', integer=True)
#     # 
#     # def nice(expr)
#     #     return horner(expr.expand().simplify(), (‚Ñì‚Çò·µ¢‚Çô, ‚Ñì, m))
#     #
#     # Yindex = horner(
#     #     (Ysize.subs(‚Ñì‚Çò‚Çê‚Çì, ‚Ñì-1) + summation(1, (m‚Ä≤, -‚Ñì, m)) - 1).expand().simplify(),
#     #     (‚Ñì‚Çò‚Çê‚Çì, ‚Ñì, m)
#     # )
#     if ‚Ñì > ‚Ñì‚Çò·µ¢‚Çô
#         return ‚Ñì*(‚Ñì + 1) - ‚Ñì‚Çò·µ¢‚Çô^2 + m
#     else
#         return m + ‚Ñì


# def theta_phi(n_theta, n_phi)
#     """Construct (theta, phi) grid

#     This grid is in the order expected by spinsfast

#     Parameters
#     ----------
#     n_theta : int
#         Number of points in the theta direction
#     n_phi : int
#         Number of points in the phi direction

#     Returns
#     -------
#     theta_phi_grid : ndarray
#         Array of pairs of floats giving the respective [theta, phi] pairs.  The
#         shape of this array is (n_theta, n_phi, 2).

#     Notes
#     -----
#     The array looks like

#         [
#             [Œ∏, œï]
#             for œï ‚àà [0, 2œÄ)
#             for Œ∏ ‚àà [0, œÄ]
#         ]

#     (note the open and closed endpoints, respectively), where œï and Œ∏ are uniformly
#     sampled in their respective ranges.

#     """
#     return np.array([[[theta, phi]
#                       for phi in np.linspace(0.0, 2*œÄ, num=n_phi, endpoint=False)]
#                      for theta in np.linspace(0.0, œÄ, num=n_theta, endpoint=True)])

