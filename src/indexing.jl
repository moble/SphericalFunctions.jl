"""
    Ysize(‚Ñì‚Çò‚Çê‚Çì)

Compute total size of array of mode weights

See Also
--------
Yrange : Array of (‚Ñì, m) indices corresponding to this array
Yindex : Index of a particular element of the mode weight array

Notes
-----
This assumes that the modes are arranged (with fixed s value) as

    [
        Y(s, ‚Ñì, m)
        for ‚Ñì ‚àà ‚Ñì‚Çò·µ¢‚Çô:‚Ñì‚Çò‚Çê‚Çì
        for m ‚àà -‚Ñì:‚Ñì
    ]

"""
function Ysize(‚Ñì‚Çò‚Çê‚Çì)
    return ‚Ñì‚Çò‚Çê‚Çì * (‚Ñì‚Çò‚Çê‚Çì + 2) + 1
end
function Ysize(‚Ñì‚Çò·µ¢‚Çô, ‚Ñì‚Çò‚Çê‚Çì)
    # from sympy import symbols, summation, horner
    # from sympy.printing.pycode import pycode
    # ‚Ñì,m,‚Ñì‚Çò·µ¢‚Çô,‚Ñì‚Çò‚Çê‚Çì = symbols('‚Ñì,m,‚Ñì‚Çò·µ¢‚Çô,‚Ñì‚Çò‚Çê‚Çì', integer=True)
    #
    # def nice(expr)
    #     return horner(expr.expand().simplify(), (m‚Ä≤‚Çò‚Çê‚Çì, ‚Ñì‚Çò·µ¢‚Çô, ‚Ñì‚Çò‚Çê‚Çì))
    #
    # Ysize = horner(
    #     summation(summation(1, (m, -‚Ñì, ‚Ñì)), (‚Ñì, ‚Ñì‚Çò·µ¢‚Çô, ‚Ñì‚Çò‚Çê‚Çì)).expand().simplify(),
    #     (‚Ñì‚Çò·µ¢‚Çô, ‚Ñì‚Çò‚Çê‚Çì)
    # )
    return ‚Ñì‚Çò‚Çê‚Çì * (‚Ñì‚Çò‚Çê‚Çì + 2) - ‚Ñì‚Çò·µ¢‚Çô^2 + 1
end


"""
    deduce_limits(ysize, [‚Ñìmin])

Deduce the value of `(‚Ñìmin, ‚Ñìmax)` that produces ``Y`` arrays of the given size.

If `‚Ñìmin` is not given, it is assumed to be 0.  If it is set to `nothing`, the
smallest possible value of `‚Ñìmin` will be used.  However, note that this is not
a well-posed problem; multiple combinations of `(‚Ñìmin, ‚Ñìmax)` can give rise to
``Y`` arrays of the same size.

See also [`Ysize`](@ref)
"""
function deduce_limits(ysize, ‚Ñìmin=0)
    if ‚Ñìmin === nothing
        max‚Ñìmax = (ysize-1) √∑ 2
        ‚Ñìmin_range = 0:max‚Ñìmax
    else
        ‚Ñìmin_range = [‚Ñìmin]
    end
    for ‚Ñìmin ‚àà ‚Ñìmin_range
        ‚Ñìmax = round(Int, ‚àö(ysize + ‚Ñìmin^2) - 1, RoundDown)
        if ‚Ñìmax * (‚Ñìmax + 2) - ‚Ñìmin^2 + 1 == ysize
            return (‚Ñìmin, ‚Ñìmax)
        end
    end
    error("Input size $ysize does not correspond to a possible array of modes with ‚Ñìmin=$‚Ñìmin")
end


"""
    Yrange(‚Ñì‚Çò·µ¢‚Çô, ‚Ñì‚Çò‚Çê‚Çì)

Create an array of (‚Ñì, m) indices as in Y array

Parameters
----------
‚Ñì‚Çò·µ¢‚Çô : int
    Integer satisfying 0 <= ‚Ñì‚Çò·µ¢‚Çô <= ‚Ñì‚Çò‚Çê‚Çì
‚Ñì‚Çò‚Çê‚Çì : int
    Integer satisfying 0 <= ‚Ñì‚Çò·µ¢‚Çô <= ‚Ñì‚Çò‚Çê‚Çì

Returns
-------
i : int
    Total size of array of mode weights arranged as described below

See Also
--------
Ysize : Total size of array of mode weights
Yindex : Index of a particular element of the mode weight array

Notes
-----
This assumes that the modes are arranged (with fixed s value) as

    [
        Y(s, ‚Ñì, m)
        for ‚Ñì ‚àà ‚Ñì‚Çò·µ¢‚Çô:‚Ñì‚Çò‚Çê‚Çì
        for m ‚àà -‚Ñì:‚Ñì
    ]

"""
Yrange(‚Ñì‚Çò‚Çê‚Çì) = Yrange(0, ‚Ñì‚Çò‚Çê‚Çì)
function Yrange(‚Ñì‚Çò·µ¢‚Çô, ‚Ñì‚Çò‚Çê‚Çì)
    r = zeros(typeof(‚Ñì‚Çò‚Çê‚Çì), (Ysize(‚Ñì‚Çò·µ¢‚Çô, ‚Ñì‚Çò‚Çê‚Çì), 2))
    i = 1
    for ‚Ñì ‚àà ‚Ñì‚Çò·µ¢‚Çô:‚Ñì‚Çò‚Çê‚Çì
        for m ‚àà -‚Ñì:‚Ñì
            r[i, 1] = ‚Ñì
            r[i, 2] = m
            i += 1
        end
    end
    return r
end


"""
    Yindex(‚Ñì, m, ‚Ñì‚Çò·µ¢‚Çô=0)

Compute index into array of mode weights

Parameters
----------
‚Ñì : int
    Integer satisfying ‚Ñì‚Çò·µ¢‚Çô <= ‚Ñì <= ‚Ñì‚Çò‚Çê‚Çì
m : int
    Integer satisfying -‚Ñì <= m <= ‚Ñì
‚Ñì‚Çò·µ¢‚Çô : int, optional
    Integer satisfying 0 <= ‚Ñì‚Çò·µ¢‚Çô.  Defaults to 0.

Returns
-------
i : int
    Index of a particular element of the mode-weight array as described below

See Also
--------
Ysize : Total size of array of mode weights
Yrange : Array of (‚Ñì, m) indices corresponding to this array

Notes
-----
This assumes that the modes are arranged (with fixed s value) as

    [
        Y(s, ‚Ñì, m)
        for ‚Ñì ‚àà ‚Ñì‚Çò·µ¢‚Çô:‚Ñì‚Çò‚Çê‚Çì
        for m ‚àà -‚Ñì:‚Ñì
    ]

"""
@inline function Yindex(‚Ñì, m, ‚Ñì‚Çò·µ¢‚Çô=0)
    # from sympy import symbols, summation, horner
    # from sympy.printing.pycode import pycode
    # ‚Ñì,m,m‚Ä≤,‚Ñì‚Çò·µ¢‚Çô, = symbols('‚Ñì,m,m‚Ä≤,‚Ñì‚Çò·µ¢‚Çô', integer=True)
    #
    # def nice(expr)
    #     return horner(expr.expand().simplify(), (‚Ñì‚Çò·µ¢‚Çô, ‚Ñì, m))
    #
    # Yindex = horner(
    #     (Ysize.subs(‚Ñì‚Çò‚Çê‚Çì, ‚Ñì-1) + summation(1, (m‚Ä≤, -‚Ñì, m)) - 1).expand().simplify(),
    #     (‚Ñì‚Çò‚Çê‚Çì, ‚Ñì, m)
    # )
    return ‚Ñì*(‚Ñì + 1) - ‚Ñì‚Çò·µ¢‚Çô^2 + m + 1
end


"""
    theta_phi(NŒ∏, Nœï, [T=Float64])

Construct (theta, phi) grid in `spinsfast` order.

Note that this order is different from the one assumed by this package;
use [`phi_theta`](@ref) for the opposite ordering.

"""
function theta_phi(nŒ∏, nœï, ::Type{T}=Float64) where T
    [
        [Œ∏, œï][i]
        for Œ∏ ‚àà range(0, T(œÄ), length=nŒ∏),
            œï ‚àà range(0, 2*T(œÄ), length=nœï+1)[begin:end-1],
            i ‚àà 1:2
    ]
end

"""
    phi_theta(Nœï, NŒ∏, [T=Float64])

Construct (phi, theta) grid in order expected by this package.

See also [`theta_phi`](@ref) for the opposite ordering.

"""
function phi_theta(nœï, nŒ∏, ::Type{T}=Float64) where T
    [
        [œï, Œ∏][i]
        for œï ‚àà range(0, 2*T(œÄ), length=nœï+1)[begin:end-1],
            Œ∏ ‚àà range(0, T(œÄ), length=nŒ∏),
            i ‚àà 1:2
    ]
end


"""
    WignerHsize(‚Ñì‚Çò‚Çê‚Çì, m‚Ä≤‚Çò‚Çê‚Çì=‚Ñì‚Çò‚Çê‚Çì)

Total size of array of wedges of width m‚Ä≤‚Çò‚Çê‚Çì up to ‚Ñì‚Çò‚Çê‚Çì.  If m‚Ä≤‚Çò‚Çê‚Çì is not
given, it defaults to ‚Ñì‚Çò‚Çê‚Çì.

See also [`WignerHrange`](@ref) and [`WignerHindex`](@ref).

# Notes
Here, it is assumed that only data with m‚â•|m‚Ä≤| are stored, and only
corresponding values are passed.  We also assume |m|‚â§‚Ñì and |m‚Ä≤|‚â§‚Ñì.  Neither
of these are checked.  The wedge array that this function indexes is ordered as

    [
        H(‚Ñì, m‚Ä≤, m) for ‚Ñì ‚àà 0:‚Ñì‚Çò‚Çê‚Çì
        for m‚Ä≤ ‚àà -min(‚Ñì, m‚Ä≤‚Çò‚Çê‚Çì):min(‚Ñì, m‚Ä≤‚Çò‚Çê‚Çì)
        for m ‚àà abs(m‚Ä≤):‚Ñì
    ]

"""
function WignerHsize(‚Ñì‚Çò‚Çê‚Çì)
    if ‚Ñì‚Çò‚Çê‚Çì < 0
        return 0
    else
        return (‚Ñì‚Çò‚Çê‚Çì+1) * (‚Ñì‚Çò‚Çê‚Çì+2) * (2*‚Ñì‚Çò‚Çê‚Çì+3) √∑ 6
    end
end
function WignerHsize(‚Ñì‚Çò‚Çê‚Çì, m‚Ä≤‚Çò‚Çê‚Çì)
    if ‚Ñì‚Çò‚Çê‚Çì < 0
        return 0
    elseif m‚Ä≤‚Çò‚Çê‚Çì >= ‚Ñì‚Çò‚Çê‚Çì
        return ((‚Ñì‚Çò‚Çê‚Çì+1) * (‚Ñì‚Çò‚Çê‚Çì+2) * (2*‚Ñì‚Çò‚Çê‚Çì+3)) √∑ 6
    else
        return (
            (‚Ñì‚Çò‚Çê‚Çì+1) * (‚Ñì‚Çò‚Çê‚Çì+2) * (2*‚Ñì‚Çò‚Çê‚Çì+3)
            - 2*(‚Ñì‚Çò‚Çê‚Çì-m‚Ä≤‚Çò‚Çê‚Çì)*(‚Ñì‚Çò‚Çê‚Çì-m‚Ä≤‚Çò‚Çê‚Çì+1)*(‚Ñì‚Çò‚Çê‚Çì-m‚Ä≤‚Çò‚Çê‚Çì+2)
        ) √∑ 6
    end
end


"""
    WignerHrange(‚Ñì‚Çò‚Çê‚Çì, m‚Ä≤‚Çò‚Çê‚Çì=‚Ñì‚Çò‚Çê‚Çì)

Create an array of (‚Ñì, m', m) indices as in H array

See also [`WignerHsize`](@ref) and [`WignerHindex`](@ref)

# Notes

Here, it is assumed that only data with m‚â•|m'| are stored, and only
corresponding values are passed.  We also assume |m|‚â§‚Ñì and |m'|‚â§‚Ñì.  Neither of
these are checked.  The wedge array that this function indexes is ordered as

    [
        H(‚Ñì, m‚Ä≤, m) for ‚Ñì ‚àà 0:‚Ñì‚Çò‚Çê‚Çì
        for m‚Ä≤ ‚àà -min(‚Ñì, m‚Ä≤‚Çò‚Çê‚Çì):min(‚Ñì, m‚Ä≤‚Çò‚Çê‚Çì)
        for m ‚àà abs(m‚Ä≤):‚Ñì
    ]

"""
function WignerHrange(‚Ñì‚Çò‚Çê‚Çì, m‚Ä≤‚Çò‚Çê‚Çì=‚Ñì‚Çò‚Çê‚Çì)
    r = zeros(typeof(m‚Ä≤‚Çò‚Çê‚Çì), (WignerHsize(‚Ñì‚Çò‚Çê‚Çì, m‚Ä≤‚Çò‚Çê‚Çì), 3))
    i = 1
    for ‚Ñì ‚àà 0:‚Ñì‚Çò‚Çê‚Çì
        for m‚Ä≤ ‚àà -min(‚Ñì, m‚Ä≤‚Çò‚Çê‚Çì):min(‚Ñì, m‚Ä≤‚Çò‚Çê‚Çì)
            for m ‚àà abs(m‚Ä≤):‚Ñì
                r[i, 1] = ‚Ñì
                r[i, 2] = m‚Ä≤
                r[i, 3] = m
                i += 1
            end
        end
    end
    return r
end


"""
WignerHindex(‚Ñì, m‚Ä≤, m, m‚Ä≤‚Çò‚Çê‚Çì)

Helper function for [`WignerHindex`](@ref), with more constraints.

This function assumes that `m ‚â• |m‚Ä≤|`.  The main [`WignerHindex`](@ref) function uses
symmetries of the H array to account for cases that violate this assumption.  (But note that
both that function and this one assume that `|m| ‚â§ ‚Ñì` and `|m‚Ä≤| ‚â§ ‚Ñì`.)

"""
function _WignerHindex(‚Ñì, m‚Ä≤, m, m‚Ä≤‚Çò‚Çê‚Çì)
    m‚Ä≤‚Çò‚Çê‚Çì = min(m‚Ä≤‚Çò‚Çê‚Çì, ‚Ñì)
    i = WignerHsize(‚Ñì-1, m‚Ä≤‚Çò‚Çê‚Çì)  # total size of everything with smaller ‚Ñì
    if m‚Ä≤<1
        i += (m‚Ä≤‚Çò‚Çê‚Çì + m‚Ä≤) * (2*‚Ñì - m‚Ä≤‚Çò‚Çê‚Çì + m‚Ä≤ + 1) √∑ 2  # size of wedge to the left of m'
    else
        i += (m‚Ä≤‚Çò‚Çê‚Çì + 1) * (2*‚Ñì - m‚Ä≤‚Çò‚Çê‚Çì + 2) √∑ 2  # size of entire left half of wedge
        i += (m‚Ä≤ - 1) * (2*‚Ñì - m‚Ä≤ + 2) √∑ 2  # size of right half of wedge to the left of m'
    end
    i += m - abs(m‚Ä≤)  # size of column in wedge between m and |m'|
    return i + 1
end


"""
    WignerHindex(‚Ñì, m‚Ä≤, m, m‚Ä≤‚Çò‚Çê‚Çì)

Index to "wedge" arrays.

See also [`WignerHsize`](@ref) and [`WignerHrange`](@ref).

# Notes

Here, it is assumed that only data with m‚â•|m'| are stored, and only
corresponding values are passed.  We also assume |m|‚â§‚Ñì and |m'|‚â§‚Ñì.  Neither
of these are checked.  The wedge array that this function indexes is ordered as

    [
        H(‚Ñì, m‚Ä≤, m) for ‚Ñì ‚àà 0:‚Ñì‚Çò‚Çê‚Çì
        for m‚Ä≤ ‚àà -min(‚Ñì, m‚Ä≤‚Çò‚Çê‚Çì):min(‚Ñì, m‚Ä≤‚Çò‚Çê‚Çì)
        for m ‚àà abs(m‚Ä≤):‚Ñì
    ]

"""
function WignerHindex(‚Ñì, m‚Ä≤, m, m‚Ä≤‚Çò‚Çê‚Çì=‚Ñì)
    if ‚Ñì == 0
        return 1
    end
    m‚Ä≤max = min(m‚Ä≤‚Çò‚Çê‚Çì, ‚Ñì)
    if m < -m‚Ä≤
        if m < m‚Ä≤
            return _WignerHindex(‚Ñì, -m‚Ä≤, -m, m‚Ä≤max)
        else
            return _WignerHindex(‚Ñì, -m, -m‚Ä≤, m‚Ä≤max)
        end
    else
        if m < m‚Ä≤
            return _WignerHindex(‚Ñì, m, m‚Ä≤, m‚Ä≤max)
        else
            return _WignerHindex(‚Ñì, m‚Ä≤, m, m‚Ä≤max)
        end
    end
end


"""
    WignerDsize(‚Ñì‚Çò‚Çê‚Çì, m‚Ä≤‚Çò‚Çê‚Çì=‚Ñì‚Çò‚Çê‚Çì)

Compute total size of Wigner ùîá matrix

See also [`WignerDrange`](@ref) and [`WignerDindex`](@ref).

# Notes

This assumes that the Wigner ùîá matrix is arranged as

    [
        ùîá(‚Ñì, m‚Ä≤, m)
        for ‚Ñì ‚àà ‚Ñì‚Çò·µ¢‚Çô:‚Ñì‚Çò‚Çê‚Çì
        for m‚Ä≤ ‚àà -min(‚Ñì, m‚Ä≤‚Çò‚Çê‚Çì):min(‚Ñì, m‚Ä≤‚Çò‚Çê‚Çì)
        for m ‚àà -‚Ñì:‚Ñì
    ]

"""
function WignerDsize(‚Ñì‚Çò‚Çê‚Çì)
    (‚Ñì‚Çò‚Çê‚Çì * (‚Ñì‚Çò‚Çê‚Çì * (4 * ‚Ñì‚Çò‚Çê‚Çì + 12) + 11) + 3) √∑ 3
end
function WignerDsize(‚Ñì‚Çò‚Çê‚Çì, m‚Ä≤‚Çò‚Çê‚Çì)
    # from sympy import symbols, summation, horner
    # from sympy.printing.pycode import pycode
    # ‚Ñì,m‚Ä≤,m,‚Ñì‚Çò·µ¢‚Çô,‚Ñì‚Çò‚Çê‚Çì,m‚Ä≤‚Çò‚Çê‚Çì = symbols('‚Ñì,m‚Ä≤,m,‚Ñì‚Çò·µ¢‚Çô,‚Ñì‚Çò‚Çê‚Çì,m‚Ä≤‚Çò‚Çê‚Çì', integer=True)
    #
    # def nice(expr)
    #     return horner(expr.expand().simplify(), (m‚Ä≤‚Çò‚Çê‚Çì, ‚Ñì‚Çò·µ¢‚Çô, ‚Ñì‚Çò‚Çê‚Çì))
    #
    # # Assuming ‚Ñì‚Çò·µ¢‚Çô <= ‚Ñì‚Çò‚Çê‚Çì <= m‚Ä≤‚Çò‚Çê‚Çì:
    # WignerDsize_‚Ñìmin_‚Ñìmax_m‚Ä≤max = horner(
    #     (
    #         # sum over all m‚Ä≤=0 elements
    #         summation(summation(summation(1, (m, -‚Ñì, ‚Ñì)), (m‚Ä≤, 0, 0)), (‚Ñì, ‚Ñì‚Çò·µ¢‚Çô, ‚Ñì‚Çò‚Çê‚Çì))
    #         # sum over all ‚Ñì‚Çò·µ¢‚Çô <= ‚Ñì <= ‚Ñì‚Çò‚Çê‚Çì elements
    #         + summation(summation(summation(2, (m, -‚Ñì, ‚Ñì)), (m‚Ä≤, 1, ‚Ñì)), (‚Ñì, ‚Ñì‚Çò·µ¢‚Çô, ‚Ñì‚Çò‚Çê‚Çì))
    #     ).expand().simplify(),
    #     (‚Ñì‚Çò·µ¢‚Çô, ‚Ñì‚Çò‚Çê‚Çì)
    # )
    # print(f"({pycode(nice(3*WignerDsize_‚Ñìmin_‚Ñìmax_m‚Ä≤max.subs(‚Ñì‚Çò‚Çê‚Çì, ‚Ñì-1)))}) √∑ 3")
    #
    # # Assuming ‚Ñì‚Çò·µ¢‚Çô <= m‚Ä≤‚Çò‚Çê‚Çì <= ‚Ñì‚Çò‚Çê‚Çì:
    # WignerDsize_‚Ñìmin_m‚Ä≤max_‚Ñìmax = horner(
    #     (
    #         # sum over all m‚Ä≤=0 elements
    #         summation(summation(summation(1, (m, -‚Ñì, ‚Ñì)), (m‚Ä≤, 0, 0)), (‚Ñì, ‚Ñì‚Çò·µ¢‚Çô, ‚Ñì‚Çò‚Çê‚Çì))
    #         # sum over all ‚Ñì <= m‚Ä≤‚Çò‚Çê‚Çì elements
    #         + summation(summation(summation(2, (m, -‚Ñì, ‚Ñì)), (m‚Ä≤, 1, ‚Ñì)), (‚Ñì, ‚Ñì‚Çò·µ¢‚Çô, m‚Ä≤‚Çò‚Çê‚Çì))
    #         # sum over all ‚Ñì >= m‚Ä≤‚Çò‚Çê‚Çì elements
    #         + summation(summation(summation(2, (m, -‚Ñì, ‚Ñì)), (m‚Ä≤, 1, m‚Ä≤‚Çò‚Çê‚Çì)), (‚Ñì, m‚Ä≤‚Çò‚Çê‚Çì+1, ‚Ñì‚Çò‚Çê‚Çì))
    #     ).expand().simplify(),
    #     (m‚Ä≤‚Çò‚Çê‚Çì, ‚Ñì‚Çò·µ¢‚Çô, ‚Ñì‚Çò‚Çê‚Çì)
    # )
    # print(f"({pycode(nice(3*WignerDsize_‚Ñìmin_m‚Ä≤max_‚Ñìmax.subs(‚Ñì‚Çò‚Çê‚Çì, ‚Ñì-1)))}) √∑ 3")
    #
    # # Assuming m‚Ä≤‚Çò‚Çê‚Çì <= ‚Ñì‚Çò·µ¢‚Çô <= ‚Ñì‚Çò‚Çê‚Çì:
    # WignerDsize_m‚Ä≤max_‚Ñìmin_‚Ñìmax = horner(
    #     (
    #         # sum over all m‚Ä≤=0 elements
    #         summation(summation(summation(1, (m, -‚Ñì, ‚Ñì)), (m‚Ä≤, 0, 0)), (‚Ñì, ‚Ñì‚Çò·µ¢‚Çô, ‚Ñì‚Çò‚Çê‚Çì))
    #         # sum over all remaining |m‚Ä≤| <= m‚Ä≤‚Çò‚Çê‚Çì elements
    #         + summation(summation(summation(2, (m, -‚Ñì, ‚Ñì)), (m‚Ä≤, 1, m‚Ä≤‚Çò‚Çê‚Çì)), (‚Ñì, ‚Ñì‚Çò·µ¢‚Çô, ‚Ñì‚Çò‚Çê‚Çì))
    #     ).expand().simplify(),
    #     (m‚Ä≤‚Çò‚Çê‚Çì, ‚Ñì‚Çò·µ¢‚Çô, ‚Ñì‚Çò‚Çê‚Çì)
    # )
    # print(f"{pycode(nice(WignerDsize_m‚Ä≤max_‚Ñìmin_‚Ñìmax.subs(‚Ñì‚Çò‚Çê‚Çì, ‚Ñì-1)).factor())}")
    if m‚Ä≤‚Çò‚Çê‚Çì >= ‚Ñì‚Çò‚Çê‚Çì
        return (‚Ñì‚Çò‚Çê‚Çì * (‚Ñì‚Çò‚Çê‚Çì * (4 * ‚Ñì‚Çò‚Çê‚Çì + 12) + 11) + 3) √∑ 3
    elseif m‚Ä≤‚Çò‚Çê‚Çì > 0
        return (
            3 * ‚Ñì‚Çò‚Çê‚Çì * (‚Ñì‚Çò‚Çê‚Çì + 2)
            + m‚Ä≤‚Çò‚Çê‚Çì * (
                3 * ‚Ñì‚Çò‚Çê‚Çì * (2 * ‚Ñì‚Çò‚Çê‚Çì + 4)
                + m‚Ä≤‚Çò‚Çê‚Çì * (-2 * m‚Ä≤‚Çò‚Çê‚Çì - 3) + 5
            )
            + 3
        ) √∑ 3
    else
        return (‚Ñì‚Çò‚Çê‚Çì * (‚Ñì‚Çò‚Çê‚Çì + 2)) * (1 + 2 * m‚Ä≤‚Çò‚Çê‚Çì) + 2 * m‚Ä≤‚Çò‚Çê‚Çì + 1
    end
end


"""
    WignerDrange(‚Ñì‚Çò‚Çê‚Çì, m‚Ä≤‚Çò‚Çê‚Çì=‚Ñì‚Çò‚Çê‚Çì)

Create an array of (‚Ñì, m', m) indices as in ùîá array

See also [`WignerDsize`](@ref) and [`WignerDindex`](@ref).

# Notes

This assumes that the Wigner ùîá matrix is arranged as

    [
        ùîá(‚Ñì, m‚Ä≤, m)
        for ‚Ñì ‚àà ‚Ñì‚Çò·µ¢‚Çô:‚Ñì‚Çò‚Çê‚Çì
        for m‚Ä≤ ‚àà -min(‚Ñì, m‚Ä≤‚Çò‚Çê‚Çì):min(‚Ñì, m‚Ä≤‚Çò‚Çê‚Çì)
        for m ‚àà -‚Ñì:‚Ñì
    ]

"""
function WignerDrange(‚Ñì‚Çò‚Çê‚Çì, m‚Ä≤‚Çò‚Çê‚Çì=‚Ñì‚Çò‚Çê‚Çì)
    r = zeros(typeof(‚Ñì‚Çò‚Çê‚Çì), (WignerDsize(‚Ñì‚Çò‚Çê‚Çì, m‚Ä≤‚Çò‚Çê‚Çì), 3))
    i = 1
    for ‚Ñì ‚àà 0:‚Ñì‚Çò‚Çê‚Çì
        for m‚Ä≤ ‚àà -min(‚Ñì, m‚Ä≤‚Çò‚Çê‚Çì):min(‚Ñì, m‚Ä≤‚Çò‚Çê‚Çì)
            for m ‚àà -‚Ñì:‚Ñì
                r[i, 1] = ‚Ñì
                r[i, 2] = m‚Ä≤
                r[i, 3] = m
                i += 1
            end
        end
    end
    return r
end


"""
    WignerDindex(‚Ñì, m‚Ä≤, m, m‚Ä≤‚Çò‚Çê‚Çì=‚Ñì)

Compute index into Wigner ùîá matrix

See also [`WignerDrange`](@ref) and [`WignerDsize`](@ref).

# Notes

This assumes that the Wigner ùîá matrix is arranged as

    [
        ùîá(‚Ñì, m‚Ä≤, m)
        for ‚Ñì ‚àà ‚Ñì‚Çò·µ¢‚Çô:‚Ñì‚Çò‚Çê‚Çì
        for m‚Ä≤ ‚àà -min(‚Ñì, m‚Ä≤‚Çò‚Çê‚Çì):min(‚Ñì, m‚Ä≤‚Çò‚Çê‚Çì)
        for m ‚àà -‚Ñì:‚Ñì
    ]

"""
function WignerDindex(‚Ñì, m‚Ä≤, m, m‚Ä≤‚Çò‚Çê‚Çì=‚Ñì)
    WignerDsize(‚Ñì-1, m‚Ä≤‚Çò‚Çê‚Çì) + (m‚Ä≤ + min(m‚Ä≤‚Çò‚Çê‚Çì, ‚Ñì)) * (2 * ‚Ñì + 1) + m + ‚Ñì + 1
end
