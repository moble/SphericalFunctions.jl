@testitem "Pretest Œµ and basis commutators" setup=[Utilities] begin
    using Quaternionic
    # Test that [e‚±º, e‚Çñ] = 2‚àë‚Çó Œµ(j,k,l) e‚Çó
    let e = [imx, imy, imz]
        for (j,e‚±º) ‚àà enumerate(e)
            for (k,e‚Çñ) ‚àà enumerate(e)
                @test e‚±º*e‚Çñ - e‚Çñ*e‚±º == 2sum(Œµ(j,k,l)*e[l] for l ‚àà 1:3)
            end
        end
    end
end

@testitem "Explicit definition" setup=[ExplicitOperators] begin
    using Quaternionic
    using DoubleFloats
    const L = ExplicitOperators.L
    const R = ExplicitOperators.R
    for T ‚àà [Float32, Float64, Double64, BigFloat]
        # Test the `L` and `R` operators as defined above
        œµ = 100 * eps(T)
        for Q ‚àà randn(Rotor{T}, 10)
            for ‚Ñì ‚àà 0:4
                for m ‚àà -‚Ñì:‚Ñì
                    for m‚Ä≤ ‚àà -‚Ñì:‚Ñì
                        f(Q) = D_matrices(Q, ‚Ñì)[WignerDindex(‚Ñì, m, m‚Ä≤)]

                        @test R(imz, f)(Q) ‚âà m‚Ä≤ * f(Q) atol=œµ rtol=œµ
                        @test L(imz, f)(Q) ‚âà m * f(Q) atol=œµ rtol=œµ

                        if ‚Ñì ‚â• abs(m+1)
                            L‚Çä1 = L(imx, f)(Q) + im * L(imy, f)(Q)
                            L‚Çä2 = ‚àöT((‚Ñì-m)*(‚Ñì+m+1)) * D_matrices(Q, ‚Ñì)[WignerDindex(‚Ñì, m+1, m‚Ä≤)]
                            @test L‚Çä1 ‚âà L‚Çä2 atol=œµ rtol=œµ
                        end

                        if ‚Ñì ‚â• abs(m-1)
                            L‚Çã1 = L(imx, f)(Q) - im * L(imy, f)(Q)
                            L‚Çã2 = ‚àöT((‚Ñì+m)*(‚Ñì-m+1)) * D_matrices(Q, ‚Ñì)[WignerDindex(‚Ñì, m-1, m‚Ä≤)]
                            @test L‚Çã1 ‚âà L‚Çã2 atol=œµ rtol=œµ
                        end

                        if ‚Ñì ‚â• abs(m‚Ä≤+1)
                            K‚Çä1 = R(imx, f)(Q) - im * R(imy, f)(Q)
                            K‚Çä2 = ‚àöT((‚Ñì-m‚Ä≤)*(‚Ñì+m‚Ä≤+1)) * D_matrices(Q, ‚Ñì)[WignerDindex(‚Ñì, m, m‚Ä≤+1)]
                            @test K‚Çä1 ‚âà K‚Çä2 atol=œµ rtol=œµ
                        end

                        if ‚Ñì ‚â• abs(m‚Ä≤-1)
                            K‚Çã1 = R(imx, f)(Q) + im * R(imy, f)(Q)
                            K‚Çã2 = ‚àöT((‚Ñì+m‚Ä≤)*(‚Ñì-m‚Ä≤+1)) * D_matrices(Q, ‚Ñì)[WignerDindex(‚Ñì, m, m‚Ä≤-1)]
                            @test K‚Çã1 ‚âà K‚Çã2 atol=œµ rtol=œµ
                        end
                    end
                end
            end
        end
    end
end

@testitem "Scalar multiplication" setup=[ExplicitOperators] begin
    using Quaternionic
    using DoubleFloats
    const L = ExplicitOperators.L
    const R = ExplicitOperators.R
    for T ‚àà [Float32, Float64, Double64]
        # Test L_{sg} = sL_{g} and R_{sg} = sR_{g}
        œµ = 100 * eps(T)
        Ss = randn(T, 5)
        Gs = randn(QuatVec{T}, 5)
        for Q ‚àà randn(Rotor{T}, 5)
            for ‚Ñì ‚àà 0:4
                for m ‚àà -‚Ñì:‚Ñì
                    for m‚Ä≤ ‚àà -‚Ñì:‚Ñì
                        f(Q) = D_matrices(Q, ‚Ñì)[WignerDindex(‚Ñì, m, m‚Ä≤)]
                        for s ‚àà Ss
                            for g ‚àà Gs
                                @test L(s*g, f)(Q) ‚âà s*L(g, f)(Q) atol=œµ rtol=œµ
                                @test R(s*g, f)(Q) ‚âà s*R(g, f)(Q) atol=œµ rtol=œµ
                            end
                        end
                    end
                end
            end
        end
    end
end

@testitem "Additivity" setup=[ExplicitOperators] begin
    using Quaternionic
    using DoubleFloats
    const L = ExplicitOperators.L
    const R = ExplicitOperators.R
    for T ‚àà [Float32, Float64, Double64]
        # Test L_{a+b} = L_{a}+L_{b} and R_{a+b} = R_{a}+R_{b}
        œµ = 100 * eps(T)
        Gs = randn(QuatVec{T}, 5)
        for Q ‚àà randn(Rotor{T}, 5)
            for ‚Ñì ‚àà 0:4
                for m ‚àà -‚Ñì:‚Ñì
                    for m‚Ä≤ ‚àà -‚Ñì:‚Ñì
                        f(Q) = D_matrices(Q, ‚Ñì)[WignerDindex(‚Ñì, m, m‚Ä≤)]
                        for g‚ÇÅ ‚àà Gs
                            for g‚ÇÇ ‚àà Gs
                                @test L(g‚ÇÅ+g‚ÇÇ, f)(Q) ‚âà L(g‚ÇÅ, f)(Q) + L(g‚ÇÇ, f)(Q) atol=œµ rtol=œµ
                                @test R(g‚ÇÅ+g‚ÇÇ, f)(Q) ‚âà R(g‚ÇÅ, f)(Q) + R(g‚ÇÇ, f)(Q) atol=œµ rtol=œµ
                            end
                        end
                    end
                end
            end
        end
    end
end

@testitem "Casimir" begin
    using DoubleFloats
    for T ‚àà [Float32, Float64, Double64, BigFloat]
        # Test that L¬≤ = (L‚ÇäL‚Çã + L‚ÇãL‚Çä + 2Lz¬≤)/2 = R¬≤ = (R‚ÇäR‚Çã + R‚ÇãR‚Çä + 2Rz¬≤)/2
        œµ = 100 * eps(T)
        for s ‚àà -3:3
            for ‚Ñì‚Çò‚Çê‚Çì ‚àà 4:7
                for ‚Ñì‚Çò·µ¢‚Çô ‚àà 0:min(abs(s)+1, ‚Ñì‚Çò‚Çê‚Çì)
                    let L¬≤=L¬≤(s, ‚Ñì‚Çò·µ¢‚Çô, ‚Ñì‚Çò‚Çê‚Çì, T),
                        Lz=Lz(s, ‚Ñì‚Çò·µ¢‚Çô, ‚Ñì‚Çò‚Çê‚Çì, T),
                        L‚Çä=L‚Çä(s, ‚Ñì‚Çò·µ¢‚Çô, ‚Ñì‚Çò‚Çê‚Çì, T),
                        L‚Çã=L‚Çã(s, ‚Ñì‚Çò·µ¢‚Çô, ‚Ñì‚Çò‚Çê‚Çì, T)
                        L1 = L¬≤
                        L2 = (L‚Çä*L‚Çã .+ L‚Çã*L‚Çä .+ 2Lz*Lz)/2
                        @test L1 ‚âà L2 atol=œµ rtol=œµ
                    end
                    let L¬≤=L¬≤(s, ‚Ñì‚Çò·µ¢‚Çô, ‚Ñì‚Çò‚Çê‚Çì, T),
                        R¬≤=R¬≤(s, ‚Ñì‚Çò·µ¢‚Çô, ‚Ñì‚Çò‚Çê‚Çì, T)
                        @test L¬≤ ‚âà R¬≤ atol=œµ rtol=œµ
                    end
                    let
                        # R¬≤ = (2Rz¬≤ + R‚ÇäR‚Çã + R‚ÇãR‚Çä)/2
                        R1 = R¬≤(s, ‚Ñì‚Çò·µ¢‚Çô, ‚Ñì‚Çò‚Çê‚Çì, T)
                        R2 = T.(Array(
                            R‚Çä(s+1, ‚Ñì‚Çò·µ¢‚Çô, ‚Ñì‚Çò‚Çê‚Çì, T) * R‚Çã(s, ‚Ñì‚Çò·µ¢‚Çô, ‚Ñì‚Çò‚Çê‚Çì, T)
                            .+ R‚Çã(s-1, ‚Ñì‚Çò·µ¢‚Çô, ‚Ñì‚Çò‚Çê‚Çì, T) * R‚Çä(s, ‚Ñì‚Çò·µ¢‚Çô, ‚Ñì‚Çò‚Çê‚Çì, T)
                            .+ 2Rz(s, ‚Ñì‚Çò·µ¢‚Çô, ‚Ñì‚Çò‚Çê‚Çì, T) * Rz(s, ‚Ñì‚Çò·µ¢‚Çô, ‚Ñì‚Çò‚Çê‚Çì, T)
                        ) / 2)
                        @test R1 ‚âà R2 atol=œµ rtol=œµ
                    end
                end
            end
        end
    end
end

@testitem "Applied to ‚ÇõY‚Çó‚Çò" begin
    using DoubleFloats
    for T ‚àà [Float32, Float64, Double64, BigFloat]
        # Evaluate (on points) √∞Y = ‚àö((‚Ñì-s)(‚Ñì+s+1)) Y, and similarly for √∞ÃÑY
        œµ = 100 * eps(T)
        @testset "$‚Ñì‚Çò‚Çê‚Çì" for ‚Ñì‚Çò‚Çê‚Çì ‚àà 4:7
            for s in -3:3
                let ‚Ñì‚Çò·µ¢‚Çô = 0
                    ùíØ‚Çä = SSHT(s+1, ‚Ñì‚Çò‚Çê‚Çì; T=T, method="Direct", inplace=false)
                    ùíØ‚Çã = SSHT(s-1, ‚Ñì‚Çò‚Çê‚Çì; T=T, method="Direct", inplace=false)
                    i‚Çä = Yindex(abs(s+1), -abs(s+1), ‚Ñì‚Çò·µ¢‚Çô)
                    i‚Çã = Yindex(abs(s-1), -abs(s-1), ‚Ñì‚Çò·µ¢‚Çô)
                    Y = zeros(Complex{T}, Ysize(‚Ñì‚Çò·µ¢‚Çô, ‚Ñì‚Çò‚Çê‚Çì))
                    for ‚Ñì in abs(s):‚Ñì‚Çò‚Çê‚Çì
                        for m in -‚Ñì:‚Ñì
                            Y[:] .= zero(T)
                            Y[Yindex(‚Ñì, m, ‚Ñì‚Çò·µ¢‚Çô)] = one(T)
                            √∞Y = ùíØ‚Çä * (√∞(s, ‚Ñì‚Çò·µ¢‚Çô, ‚Ñì‚Çò‚Çê‚Çì, T) * Y)[i‚Çä:end]
                            Y‚Çä = ùíØ‚Çä * Y[i‚Çä:end]
                            c‚Çä = ‚Ñì < abs(s+1) ? zero(T) : ‚àöT((‚Ñì-s)*(‚Ñì+s+1))
                            @test √∞Y ‚âà c‚Çä * Y‚Çä atol=œµ rtol=œµ
                            √∞ÃÑY = ùíØ‚Çã * (√∞ÃÑ(s, ‚Ñì‚Çò·µ¢‚Çô, ‚Ñì‚Çò‚Çê‚Çì, T) * Y)[i‚Çã:end]
                            Y‚Çã = ùíØ‚Çã * Y[i‚Çã:end]
                            c‚Çã = ‚Ñì < abs(s-1) ? zero(T) : -‚àöT((‚Ñì+s)*(‚Ñì-s+1))
                            @test √∞ÃÑY ‚âà c‚Çã * Y‚Çã atol=œµ rtol=œµ
                        end
                    end
                end
            end
        end
    end
end

@testitem "Commutators" begin
    using DoubleFloats
    for T ‚àà [Float32, Float64, Double64, BigFloat]
        # Test the following relations:
        # [L¬≤, Lz] = 0     [L¬≤, L‚Çä] = 0     [L¬≤, L‚Çã] = 0
        # [R¬≤, Rz] = 0     [R¬≤, R‚Çä] = 0     [R¬≤, R‚Çã] = 0
        # [Lz, L‚Çä] = L‚Çä    [Lz, L‚Çã] = -L‚Çã   [L‚Çä, L‚Çã] = 2Lz
        # [Rz, R‚Çä] = R‚Çä    [Rz, R‚Çã] = -R‚Çã   [R‚Çä, R‚Çã] = 2Rz
        # [Rz, √∞] = -√∞     [Rz, √∞ÃÑ] = √∞ÃÑ      [√∞, √∞ÃÑ] = 2Rz
        œµ = 100 * eps(T)
        @testset "$‚Ñì‚Çò‚Çê‚Çì" for ‚Ñì‚Çò‚Çê‚Çì ‚àà 4:7
            for s in -3:3
                let ‚Ñì‚Çò·µ¢‚Çô = 0
                    for O·µ¢ ‚àà [Lz, L‚Çä, L‚Çã, Rz, R‚Çä, R‚Çã]
                        for O¬≤ ‚àà [L¬≤, R¬≤]
                            let O¬≤=O¬≤(s, ‚Ñì‚Çò·µ¢‚Çô, ‚Ñì‚Çò‚Çê‚Çì, T),
                                O·µ¢=O·µ¢(s, ‚Ñì‚Çò·µ¢‚Çô, ‚Ñì‚Çò‚Çê‚Çì, T)
                                # [O¬≤, O·µ¢] = 0
                                @test O¬≤*O·µ¢-O·µ¢*O¬≤ ‚âà 0*O¬≤ atol=œµ rtol=œµ
                            end
                        end
                    end
                    let Lz=Array(Lz(s, ‚Ñì‚Çò·µ¢‚Çô, ‚Ñì‚Çò‚Çê‚Çì, T)),
                        L‚Çä=Array(L‚Çä(s, ‚Ñì‚Çò·µ¢‚Çô, ‚Ñì‚Çò‚Çê‚Çì, T)),
                        L‚Çã=Array(L‚Çã(s, ‚Ñì‚Çò·µ¢‚Çô, ‚Ñì‚Çò‚Çê‚Çì, T))
                        # [Lz, L‚Çä] = L‚Çä
                        @test Lz*L‚Çä - L‚Çä*Lz ‚âà L‚Çä atol=œµ rtol=œµ
                        # [Lz, L‚Çã] = -L‚Çã
                        @test Lz*L‚Çã - L‚Çã*Lz ‚âà -L‚Çã atol=œµ rtol=œµ
                        # [L‚Çä, L‚Çã] = 2Lz
                        @test L‚Çä*L‚Çã - L‚Çã*L‚Çä ‚âà 2Lz atol=œµ rtol=œµ
                    end
                    let
                        # [Rz, R‚Çä] = R‚Çä
                        @test (
                            Rz(s-1, ‚Ñì‚Çò·µ¢‚Çô, ‚Ñì‚Çò‚Çê‚Çì, T)*R‚Çä(s, ‚Ñì‚Çò·µ¢‚Çô, ‚Ñì‚Çò‚Çê‚Çì, T)
                            - R‚Çä(s, ‚Ñì‚Çò·µ¢‚Çô, ‚Ñì‚Çò‚Çê‚Çì, T)*Rz(s, ‚Ñì‚Çò·µ¢‚Çô, ‚Ñì‚Çò‚Çê‚Çì, T)
                            ‚âà R‚Çä(s, ‚Ñì‚Çò·µ¢‚Çô, ‚Ñì‚Çò‚Çê‚Çì, T)
                        ) atol=œµ rtol=œµ
                        # [Rz, R‚Çã] = -R‚Çã
                        @test (
                            Rz(s+1, ‚Ñì‚Çò·µ¢‚Çô, ‚Ñì‚Çò‚Çê‚Çì, T)*R‚Çã(s, ‚Ñì‚Çò·µ¢‚Çô, ‚Ñì‚Çò‚Çê‚Çì, T)
                            - R‚Çã(s, ‚Ñì‚Çò·µ¢‚Çô, ‚Ñì‚Çò‚Çê‚Çì, T)*Rz(s, ‚Ñì‚Çò·µ¢‚Çô, ‚Ñì‚Çò‚Çê‚Çì, T)
                            ‚âà -R‚Çã(s, ‚Ñì‚Çò·µ¢‚Çô, ‚Ñì‚Çò‚Çê‚Çì, T)
                        ) atol=œµ rtol=œµ
                        # [R‚Çä, R‚Çã] = 2Rz
                        @test (
                            R‚Çä(s+1, ‚Ñì‚Çò·µ¢‚Çô, ‚Ñì‚Çò‚Çê‚Çì, T)*R‚Çã(s, ‚Ñì‚Çò·µ¢‚Çô, ‚Ñì‚Çò‚Çê‚Çì, T)
                            - R‚Çã(s-1, ‚Ñì‚Çò·µ¢‚Çô, ‚Ñì‚Çò‚Çê‚Çì, T)*R‚Çä(s, ‚Ñì‚Çò·µ¢‚Çô, ‚Ñì‚Çò‚Çê‚Çì, T)
                            ‚âà 2Rz(s, ‚Ñì‚Çò·µ¢‚Çô, ‚Ñì‚Çò‚Çê‚Çì, T)
                        ) atol=œµ rtol=œµ
                        # [Rz, √∞] = -√∞
                        @test (
                            Rz(s+1, ‚Ñì‚Çò·µ¢‚Çô, ‚Ñì‚Çò‚Çê‚Çì, T)*√∞(s, ‚Ñì‚Çò·µ¢‚Çô, ‚Ñì‚Çò‚Çê‚Çì, T)
                            - √∞(s, ‚Ñì‚Çò·µ¢‚Çô, ‚Ñì‚Çò‚Çê‚Çì, T)*Rz(s, ‚Ñì‚Çò·µ¢‚Çô, ‚Ñì‚Çò‚Çê‚Çì, T)
                            ‚âà -√∞(s, ‚Ñì‚Çò·µ¢‚Çô, ‚Ñì‚Çò‚Çê‚Çì, T)
                        ) atol=œµ rtol=œµ
                        # [Rz, √∞ÃÑ] = √∞ÃÑ
                        @test (
                            Rz(s-1, ‚Ñì‚Çò·µ¢‚Çô, ‚Ñì‚Çò‚Çê‚Çì, T)*√∞ÃÑ(s, ‚Ñì‚Çò·µ¢‚Çô, ‚Ñì‚Çò‚Çê‚Çì, T)
                            - √∞ÃÑ(s, ‚Ñì‚Çò·µ¢‚Çô, ‚Ñì‚Çò‚Çê‚Çì, T)*Rz(s, ‚Ñì‚Çò·µ¢‚Çô, ‚Ñì‚Çò‚Çê‚Çì, T)
                            ‚âà √∞ÃÑ(s, ‚Ñì‚Çò·µ¢‚Çô, ‚Ñì‚Çò‚Çê‚Çì, T)
                        ) atol=œµ rtol=œµ
                        # [√∞, √∞ÃÑ] = 2Rz
                        @test (
                            √∞(s-1, ‚Ñì‚Çò·µ¢‚Çô, ‚Ñì‚Çò‚Çê‚Çì, T)*√∞ÃÑ(s, ‚Ñì‚Çò·µ¢‚Çô, ‚Ñì‚Çò‚Çê‚Çì, T)
                            -√∞ÃÑ(s+1, ‚Ñì‚Çò·µ¢‚Çô, ‚Ñì‚Çò‚Çê‚Çì, T)*√∞(s, ‚Ñì‚Çò·µ¢‚Çô, ‚Ñì‚Çò‚Çê‚Çì, T)
                            ‚âà 2Rz(s, ‚Ñì‚Çò·µ¢‚Çô, ‚Ñì‚Çò‚Çê‚Çì, T)
                        ) atol=œµ rtol=œµ
                    end
                end
            end
        end
    end
end

## TODO: Add L_x, L_y, R_x, and R_y, then test these commutators.
## Note that R is harder because the basis in which all the matrices are returned
## assumes that you are dealing with a particular `s` eigenvalue.
# [L‚±º, L‚Çñ] =  im L_{[e‚±º,e‚Çñ]/2} =  im ‚àë‚Çó Œµ(j,k,l) L‚Çó
# [R‚±º, R‚Çñ] = -im R_{[e‚±º,e‚Çñ]/2} = -im ‚àë‚Çó Œµ(j,k,l) R‚Çó
