@testset verbose=true "d" begin

    @testset "Compare d expressions ($T)" for T in [BigFloat, Float64, Float32]
        # This just compares the two versions of the `d` function from test_utilities
        # to ensure that later tests that use those functions are reliable
        tol = ifelse(T === BigFloat, 100, 1) * 30eps(T)
        for Œ≤ in Œ≤range(T)
            expiŒ≤ = cis(Œ≤)
            for ‚Ñì‚Çò‚Çê‚Çì in 0:2  # 2 is the max explicitly coded ‚Ñì
                for m‚Ä≤‚Çò‚Çê‚Çì in 0:‚Ñì‚Çò‚Çê‚Çì
                    for n in 0:‚Ñì‚Çò‚Çê‚Çì
                        for m‚Ä≤ in -min(n, m‚Ä≤‚Çò‚Çê‚Çì):min(n, m‚Ä≤‚Çò‚Çê‚Çì)
                            for m in -n:n
                                d_expl = ExplicitWignerMatrices.d_explicit(n, m‚Ä≤, m, expiŒ≤)
                                d_form = ExplicitWignerMatrices.d_formula(n, m‚Ä≤, m, expiŒ≤)
                                @test d_expl ‚âà d_form atol=tol rtol=tol
                            end
                        end
                    end
                end
            end
        end
    end

    @testset "Compare d to formulaic d ($T)" for T in [BigFloat, Float64, Float32]
        # Now, we're ready to check that d_{n}^{m‚Ä≤,m}(Œ≤) matches the expected values
        # for a range of Œ≤ values
        tol = ifelse(T === BigFloat, 100, 1) * 30eps(T)
        for Œ≤ in Œ≤range(T)
            expiŒ≤ = cis(Œ≤)
            for ‚Ñì‚Çò‚Çê‚Çì in 0:4
                d, H_rec_coeffs = dprep(‚Ñì‚Çò‚Çê‚Çì, T)
                d!(d, expiŒ≤, ‚Ñì‚Çò‚Çê‚Çì, H_rec_coeffs)
                for n in 0:‚Ñì‚Çò‚Çê‚Çì
                    for m‚Ä≤ in -n:n
                        for m in -n:n
                            d_formula = ExplicitWignerMatrices.d_formula(n, m‚Ä≤, m, expiŒ≤)
                            d_recurrence = d[WignerDindex(n, m‚Ä≤, m)]
                            @test d_formula ‚âà d_recurrence atol=tol rtol=tol
                        end
                    end
                end
            end
        end
    end

    @testset "Test d signatures ($T)" for T in [BigFloat, Float64, Float32]
        # 1 d!(ùî°, expiŒ≤::Complex{T}, ‚Ñì‚Çò‚Çê‚Çì) where {T<:Real}
        # 2 d!(ùî°, Œ≤::T, ‚Ñì‚Çò‚Çê‚Çì, (a,b,d)) where {T<:Real}
        # 3 d!(ùî°, Œ≤::T, ‚Ñì‚Çò‚Çê‚Çì) where {T<:Real}
        # 4 d(expiŒ≤::Complex{T}, ‚Ñì‚Çò‚Çê‚Çì) where {T<:Real}
        # 5 d(Œ≤::Real, ‚Ñì‚Çò‚Çê‚Çì)
        ‚Ñì‚Çò‚Çê‚Çì = 8
        for Œ≤ in Œ≤range(T)
            expiŒ≤ = cis(Œ≤)
            dA = d(Œ≤, ‚Ñì‚Çò‚Çê‚Çì)
            dB = d(expiŒ≤, ‚Ñì‚Çò‚Çê‚Çì)
            @test array_equal(dA, dB)
            dB .= 0
            d!(dB, Œ≤, ‚Ñì‚Çò‚Çê‚Çì)
            @test array_equal(dA, dB)
            dB .= 0
            d!(dB, expiŒ≤, ‚Ñì‚Çò‚Çê‚Çì)
            @test array_equal(dA, dB)
            dB .= 0
            H_rec_coeffs = H_recursion_coefficients(‚Ñì‚Çò‚Çê‚Çì, T)
            d!(dB, Œ≤, ‚Ñì‚Çò‚Çê‚Çì, H_rec_coeffs)
            @test array_equal(dA, dB)
        end
    end

end
