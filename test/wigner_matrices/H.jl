@testset verbose=true "H" begin

    @testset "Test H(0) ($T)" for T in [BigFloat, Float64, Float32]
        # We have H_{n}^{m‚Ä≤,m}(0) = (-1)^m‚Ä≤ Œ¥_{m‚Ä≤,m}
        let Œ≤ = zero(T)
            expiŒ≤ = cis(Œ≤)
            for ‚Ñì‚Çò‚Çê‚Çì in 0:6  # Expect overflows for higher ‚Ñì with Float32
                for m‚Ä≤‚Çò‚Çê‚Çì in 0:‚Ñì‚Çò‚Çê‚Çì
                    Hw = fill(T(NaN), WignerHsize(‚Ñì‚Çò‚Çê‚Çì, m‚Ä≤‚Çò‚Çê‚Çì))
                    H!(Hw, expiŒ≤, ‚Ñì‚Çò‚Çê‚Çì, m‚Ä≤‚Çò‚Çê‚Çì, H_recursion_coefficients(‚Ñì‚Çò‚Çê‚Çì, T))
                    for n in 0:‚Ñì‚Çò‚Çê‚Çì
                        for m‚Ä≤ in -min(n, m‚Ä≤‚Çò‚Çê‚Çì):min(n, m‚Ä≤‚Çò‚Çê‚Çì)
                            for m in abs(m‚Ä≤):n
                                H_rec = Hw[WignerHindex(n, m‚Ä≤, m, m‚Ä≤‚Çò‚Çê‚Çì)]
                                if m‚Ä≤ == m
                                    @test H_rec ‚âà T(-1)^m‚Ä≤ atol=eps(T)
                                else
                                    @test H_rec ‚âà zero(T) atol=eps(T)
                                end
                            end
                        end
                    end
                end
            end
        end
    end

    @testset "Test H(œÄ) ($T)" for T in [BigFloat, Float64, Float32]
        # We have H_{n}^{m‚Ä≤,m}(0) = (-1)^m‚Ä≤ Œ¥_{m‚Ä≤,m}
        let Œ≤ = T(œÄ)
            expiŒ≤ = cis(Œ≤)
            for ‚Ñì‚Çò‚Çê‚Çì in 0:6  # Expect overflows for higher ‚Ñì with Float32
                for m‚Ä≤‚Çò‚Çê‚Çì in 0:‚Ñì‚Çò‚Çê‚Çì
                    Hw = fill(T(NaN), WignerHsize(‚Ñì‚Çò‚Çê‚Çì, m‚Ä≤‚Çò‚Çê‚Çì))
                    H!(Hw, expiŒ≤, ‚Ñì‚Çò‚Çê‚Çì, m‚Ä≤‚Çò‚Çê‚Çì, H_recursion_coefficients(‚Ñì‚Çò‚Çê‚Çì, T))
                    for n in 0:‚Ñì‚Çò‚Çê‚Çì
                        for m‚Ä≤ in -min(n, m‚Ä≤‚Çò‚Çê‚Çì):min(n, m‚Ä≤‚Çò‚Çê‚Çì)
                            for m in abs(m‚Ä≤):n
                                H_rec = Hw[WignerHindex(n, m‚Ä≤, m, m‚Ä≤‚Çò‚Çê‚Çì)]
                                if m‚Ä≤ == -m
                                    @test H_rec ‚âà T(-1)^(n+m‚Ä≤) atol=eps(T(œÄ))
                                else
                                    @test H_rec ‚âà zero(T) atol=1.5eps(T(œÄ))
                                end
                            end
                        end
                    end
                end
            end
        end
    end

    @testset "Compare H to explicit d ($T)" for T in [BigFloat, Float64, Float32]
        # This compares the H obtained via recurrence with the explicit Wigner d
        # d_{\ell}^{n,m} = \epsilon_n \epsilon_{-m} H_{\ell}^{n,m},
        for Œ≤ in Œ≤range(T)
            expiŒ≤ = cis(Œ≤)
            for ‚Ñì‚Çò‚Çê‚Çì in 0:2  # 2 is the max explicitly coded ‚Ñì
                for m‚Ä≤‚Çò‚Çê‚Çì in 0:‚Ñì‚Çò‚Çê‚Çì
                    Hw = fill(T(NaN), WignerHsize(‚Ñì‚Çò‚Çê‚Çì, m‚Ä≤‚Çò‚Çê‚Çì))
                    H!(Hw, expiŒ≤, ‚Ñì‚Çò‚Çê‚Çì, m‚Ä≤‚Çò‚Çê‚Çì, H_recursion_coefficients(‚Ñì‚Çò‚Çê‚Çì, T))
                    for n in 0:‚Ñì‚Çò‚Çê‚Çì
                        for m‚Ä≤ in -min(n, m‚Ä≤‚Çò‚Çê‚Çì):min(n, m‚Ä≤‚Çò‚Çê‚Çì)
                            for m in -n:n
                                d_expl = ExplicitWignerMatrices.d_explicit(n, m‚Ä≤, m, expiŒ≤)
                                d_rec = epsilon(m‚Ä≤) * epsilon(-m) * Hw[WignerHindex(n, m‚Ä≤, m, m‚Ä≤‚Çò‚Çê‚Çì)]
                                @test d_rec ‚âà d_expl atol=30eps(T) rtol=30eps(T)
                            end
                        end
                    end
                end

                # @show ‚Ñì‚Çò‚Çê‚Çì m‚Ä≤‚Çò‚Çê‚Çì
                # for n in 0:‚Ñì‚Çò‚Çê‚Çì
                #     @show n
                #     mat = fill(zero(T), 2n+1, 2n+1)
                #     for m‚Ä≤ in -min(n, m‚Ä≤‚Çò‚Çê‚Çì):min(n, m‚Ä≤‚Çò‚Çê‚Çì)
                #         for m in abs(m‚Ä≤):n
                #             mat[m‚Ä≤+n+1, m+n+1] =
                #                 Hw[SphericalFunctions.WignerHindex(n, m‚Ä≤, m, m‚Ä≤‚Çò‚Çê‚Çì)].val
                #         end
                #     end
                #     println("H:")
                #     display(mat)
                #     println()
                #     mat = fill(zero(T), 2n+1, 2n+1)
                #     for m‚Ä≤ in -min(n, m‚Ä≤‚Çò‚Çê‚Çì):min(n, m‚Ä≤‚Çò‚Çê‚Çì)
                #         for m in abs(m‚Ä≤):n
                #             mat[m‚Ä≤+n+1, m+n+1] =
                #                 ùîá[SphericalFunctions.WignerDindex(n, m‚Ä≤, m, m‚Ä≤‚Çò‚Çê‚Çì)].val
                #         end
                #     end
                #     println("ùîá :")
                #     display(mat)
                #     println()
                #     println()
                # end
                # println()
            end
        end
    end

    @testset "Compare H to formulaic d ($T)" for T in [BigFloat, Float64, Float32]
        # This compares the H obtained via recurrence with the formulaic Wigner d
        # d_{\ell}^{n,m} = \epsilon_n \epsilon_{-m} H_{\ell}^{n,m},
        tol = ifelse(T === BigFloat, 100, 1) * 30eps(T)
        for Œ≤ in Œ≤range(T)
            expiŒ≤ = cis(Œ≤)
            for ‚Ñì‚Çò‚Çê‚Çì in 0:6  # Expect overflows for higher ‚Ñì with Float32
                for m‚Ä≤‚Çò‚Çê‚Çì in 0:‚Ñì‚Çò‚Çê‚Çì
                    Hw = fill(T(NaN), WignerHsize(‚Ñì‚Çò‚Çê‚Çì, m‚Ä≤‚Çò‚Çê‚Çì))
                    H!(Hw, expiŒ≤, ‚Ñì‚Çò‚Çê‚Çì, m‚Ä≤‚Çò‚Çê‚Çì, H_recursion_coefficients(‚Ñì‚Çò‚Çê‚Çì, T))
                    for n in 0:‚Ñì‚Çò‚Çê‚Çì
                        for m‚Ä≤ in -min(n, m‚Ä≤‚Çò‚Çê‚Çì):min(n, m‚Ä≤‚Çò‚Çê‚Çì)
                            for m in -n:n
                                d_form = ExplicitWignerMatrices.d_formula(n, m‚Ä≤, m, expiŒ≤)
                                d_rec = epsilon(m‚Ä≤) * epsilon(-m) * Hw[WignerHindex(n, m‚Ä≤, m, m‚Ä≤‚Çò‚Çê‚Çì)]
                                @test d_rec ‚âà d_form atol=tol rtol=tol
                            end
                        end
                    end
                end
            end
        end
    end

end
