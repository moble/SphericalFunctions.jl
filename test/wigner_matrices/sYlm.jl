@testitem "Issue #40" begin
    @test maximum(abs, sYlm_values(0.0, 0.0, 3, -2)) > 0
end

@testitem "Test NINJA expressions" setup=[NINJA,Utilities] begin
    using ProgressMeter
    @testset "$T" for T in [Float64, Float32, BigFloat]
        ## This is just to test my implementation of the equations give in the paper.
        ## Note that this is a test of the testing code itself, not of the main code.
        tol = 2eps(T)
        @showprogress desc="Test NINJA expressions ($T)" for Œπ in Œ≤range(T)
            for œï in Œ±range(T)
                @test NINJA.sYlm(-2, 2, 2, Œπ, œï) ‚âà NINJA.m2Y22(Œπ, œï) atol=tol rtol=tol
                @test NINJA.sYlm(-2, 2, 1, Œπ, œï) ‚âà NINJA.m2Y21(Œπ, œï) atol=tol rtol=tol
                @test NINJA.sYlm(-2, 2, 0, Œπ, œï) ‚âà NINJA.m2Y20(Œπ, œï) atol=tol rtol=tol
                @test NINJA.sYlm(-2, 2, -1, Œπ, œï) ‚âà NINJA.m2Y2m1(Œπ, œï) atol=tol rtol=tol
                @test NINJA.sYlm(-2, 2, -2, Œπ, œï) ‚âà NINJA.m2Y2m2(Œπ, œï) atol=tol rtol=tol
            end
        end
    end
end

@testitem "Compare to NINJA expressions" setup=[NINJA,LAL,Utilities] begin
    using ProgressMeter
    using Quaternionic
    @testset "$T" for T in [Float64, Float32, BigFloat]
        ‚Ñì‚Çò‚Çê‚Çì = 8
        s‚Çò‚Çê‚Çì = 2
        ‚Ñì‚Çò·µ¢‚Çô = 0
        tol = ‚Ñì‚Çò‚Çê‚Çì^2 * 2eps(T)  # Mostly because the NINJA.sYlm expressions are inaccurate
        sYlm_storage = sYlm_prep(‚Ñì‚Çò‚Çê‚Çì, s‚Çò‚Çê‚Çì, T)

        let R = randn(Rotor{T})
            @test_throws ErrorException sYlm_values!(sYlm_storage, R, s‚Çò‚Çê‚Çì+1)
            @test_throws ErrorException sYlm_values!(sYlm_storage, R, -s‚Çò‚Çê‚Çì-1)
        end

        @showprogress desc="Compare to NINJA expressions ($T)" for spin in -s‚Çò‚Çê‚Çì:s‚Çò‚Çê‚Çì
            for Œπ in Œ≤range(T)
                for œï in Œ±range(T)
                    R = from_spherical_coordinates(Œπ, œï)
                    Y = sYlm_values!(sYlm_storage, R, spin)
                    Y‚Ä≤ = sYlm_values(Œπ, œï, ‚Ñì‚Çò‚Çê‚Çì, spin)  # Also tests issue #40
                    @test Y[(spin^2+1):end] ‚âà Y‚Ä≤ atol=tol rtol=tol
                    i = 1
                    for ‚Ñì in 0:abs(spin)-1
                        for m in -‚Ñì:‚Ñì
                            @test Y[i] == 0
                            i += 1
                        end
                    end
                    for ‚Ñì in abs(spin):‚Ñì‚Çò‚Çê‚Çì
                        for m in -‚Ñì:‚Ñì
                            sYlm1 = Y[i]
                            sYlm2 = NINJA.sYlm(spin, ‚Ñì, m, Œπ, œï)
                            @test sYlm1 ‚âà sYlm2 atol=tol rtol=tol
                            if spin==-2 && T===Float64
                                sYlm3 = LAL.LALSpinWeightedSphericalHarmonic(Œπ, œï, spin, ‚Ñì, m)
                                @test sYlm1 ‚âà sYlm3 atol=tol rtol=tol
                            end
                            i += 1
                        end
                    end
                end
            end
        end
    end
end

@testitem "Spin property" setup=[Utilities] begin
    using ProgressMeter
    using Quaternionic
    @testset "$T" for T in [Float64, Float32, BigFloat]
        # Test that ‚ÇõY‚Çó‚Çò(R exp(Œ≥*z/2)) = ‚ÇõY‚Çó‚Çò(R) * exp(-im*s*Œ≥)
        # See https://spherical.readthedocs.io/en/main/SWSHs/
        # for a more detailed explanation
        ‚Ñì‚Çò‚Çê‚Çì = 8
        s‚Çò‚Çê‚Çì = 2
        ‚Ñì‚Çò·µ¢‚Çô = 0
        tol = 4‚Ñì‚Çò‚Çê‚Çì * eps(T)
        sYlm_storage = sYlm_prep(‚Ñì‚Çò‚Çê‚Çì, s‚Çò‚Çê‚Çì, T)
        @showprogress desc="Spin property ($T)" for spin in -s‚Çò‚Çê‚Çì:s‚Çò‚Çê‚Çì
            for Œπ in Œ≤range(T)
                for œï in Œ±range(T)
                    for Œ≥ in Œ≥range(T)
                        R = from_spherical_coordinates(Œπ, œï)
                        Y1 = copy(sYlm_values!(sYlm_storage, R * exp(Œ≥*ùê§/2), spin))
                        Y2 = sYlm_values!(sYlm_storage, R, spin)
                        @test Y1 ‚âà Y2 * cis(-spin*Œ≥) atol=tol rtol=tol
                    end
                end
            end
        end
    end
end

@testitem "sYlm vs WignerD" setup=[Utilities] begin
    using ProgressMeter
    using Quaternionic
    @testset "$T" for T in [Float64, Float32, BigFloat]
        # ‚ÇõY‚Çó‚Çò(R) = (-1)À¢ ‚àö((2‚Ñì+1)/(4œÄ)) ùîáÀ°‚Çò‚Çã‚Çõ(R)
        #        = (-1)À¢ ‚àö((2‚Ñì+1)/(4œÄ)) ùîáÃÑÀ°‚Çã‚Çõ‚Çò(RÃÑ)
        ‚Ñì‚Çò‚Çê‚Çì = 8
        s‚Çò‚Çê‚Çì = 2
        ‚Ñì‚Çò·µ¢‚Çô = 0
        tol = 4‚Ñì‚Çò‚Çê‚Çì * eps(T)
        D_storage = D_prep(‚Ñì‚Çò‚Çê‚Çì, T)
        sYlm_storage = sYlm_prep(‚Ñì‚Çò‚Çê‚Çì, s‚Çò‚Çê‚Çì, T)
        @showprogress desc="sYlm vs WignerD ($T)" for s in -s‚Çò‚Çê‚Çì:s‚Çò‚Çê‚Çì
            for Œπ in Œ≤range(T)
                for œï in Œ±range(T)
                    R = from_spherical_coordinates(Œπ, œï)
                    ùîá = D_matrices!(D_storage, R)
                    Y = sYlm_values!(sYlm_storage, R, s)
                    i = 1
                    for ‚Ñì in 0:abs(s)-1
                        for m in -‚Ñì:‚Ñì
                            @test Y[i] == 0
                            i += 1
                        end
                    end
                    for ‚Ñì in abs(s):‚Ñì‚Çò‚Çê‚Çì
                        for m in -‚Ñì:‚Ñì
                            sYlm1 = Y[i]
                            sYlm2 = (-1)^s * ‚àö((2‚Ñì+1)/(4T(œÄ))) * ùîá[WignerDindex(‚Ñì, m, -s)]
                            if ‚ââ(sYlm1, sYlm2, atol=tol, rtol=tol)
                                println("Unequal at i=$i (s,‚Ñì,m)=$((s,‚Ñì,m)): ")
                                @show Œπ œï
                                @show sYlm1 sYlm2
                            end
                            @test sYlm1 ‚âà sYlm2 atol=tol rtol=tol
                            i += 1
                        end
                    end
                end
            end
        end
    end
end

@testitem "sYlm conjugation" setup=[Utilities] begin
    using ProgressMeter
    using Quaternionic
    @testset "$T" for T in [Float64, Float32, BigFloat]
        # ‚ÇõYÃÑ‚Çó‚Çò = (-1)À¢‚Å∫·µê ‚Çã‚ÇõY‚Çó‚Çã‚Çò
        ‚Ñì‚Çò‚Çê‚Çì = 8
        s‚Çò‚Çê‚Çì = 2
        ‚Ñì‚Çò·µ¢‚Çô = 0
        tol = 4‚Ñì‚Çò‚Çê‚Çì * eps(T)
        sYlm_storage = sYlm_prep(‚Ñì‚Çò‚Çê‚Çì, s‚Çò‚Çê‚Çì, T)
        @showprogress desc="sYlm conjugation ($T)" for Œπ in Œ≤range(T)
            for œï in Œ±range(T)
                for Œ≥ in Œ≥range(T)
                    for s in -s‚Çò‚Çê‚Çì:s‚Çò‚Çê‚Çì
                        R = from_spherical_coordinates(Œπ, œï)
                        Y1 = copy(sYlm_values!(sYlm_storage, R, s))
                        Y2 = sYlm_values!(sYlm_storage, R, -s)
                        for ‚Ñì in abs(s):‚Ñì‚Çò‚Çê‚Çì
                            for m in -‚Ñì:‚Ñì
                                sYlm1 = conj(Y1[Yindex(‚Ñì, m)])
                                sYlm2 = (-1)^(s+m) * Y2[Yindex(‚Ñì, -m)]
                                @test sYlm1 ‚âà sYlm2 atol=tol rtol=tol
                            end
                        end
                    end
                end
            end
        end
    end
end
