@testset verbose=true "ssht" begin

    @testset "$method $T" for (method, T) in Iterators.product(
        ["Direct", "RS"], #["Direct", "EKKM", "RS"],
        [BigFloat, Float64, Float32]
    )
        if method == "RS" && T === BigFloat
            continue
        end

        œµ = 50eps(T)

        # These test the ability of ssht to precisely decompose the results of `sYlm`.
        ‚Ñìmax = 7

        function sYlm(s, ‚Ñì, m, RŒ∏œï)
            Œ∏œï = to_spherical_coordinates(RŒ∏œï)
            NINJA.sYlm(s, ‚Ñì, m, Œ∏œï[1], Œ∏œï[2])
        end

        for s in -2:2
            ùíØ = SSHT(s, ‚Ñìmax; T=T, method=method)

            #for ‚Ñìmin in 0:abs(s)
            let ‚Ñìmin = abs(s)
                for ‚Ñì in abs(s):‚Ñìmax
                    for m in -‚Ñì:‚Ñì
                        f = sYlm.(s, ‚Ñì, m, pixels(ùíØ))
                        computed = ùíØ \ f
                        expected = zeros(Complex{T}, size(computed))
                        expected[SphericalFunctions.Yindex(‚Ñì, m, ‚Ñìmin)] = one(T)
                        if ‚ââ(computed, expected, atol=œµ, rtol=œµ)
                            @show T
                            @show ‚Ñìmax
                            @show s
                            @show ‚Ñì
                            @show m
                            println("computed = $computed")
                            println("expected = $expected")
                            println("max_diff = ", maximum(abs, computed .- expected), ";")
                            println()
                        end
                        @test computed ‚âà expected atol=œµ rtol=œµ
                    end
                end
            end
        end
    end
end
