@testset verbose=true "SSHT" begin

    # Check that an error results from a nonsense method request
    let s=-2, ‚Ñìmax=8
        @test_throws ErrorException SSHT(s, ‚Ñìmax; method="NonsenseGarbage")
    end

    # Check what `show` looks like
    let io=IOBuffer(), s=-2, ‚Ñìmax=8, T=Float64, method="Direct"
        for inplace ‚àà [true, false]
            expected = "SphericalFunctions.SSHT$method{$T, $inplace}($s, $‚Ñìmax)"
            ùíØ = SSHT(s, ‚Ñìmax; T=T, method=method, inplace=inplace)
            Base.show(io, MIME("text/plain"), ùíØ)
            @test String(take!(io)) == expected
        end
    end

    # Check that SSHTDirect warns if ‚Ñì‚Çò‚Çê‚Çì is too large
    let s=0, ‚Ñì‚Çò‚Çê‚Çì=65
        @test_warn """ "Direct" method for s-SHT is only """ SSHT(s, ‚Ñì‚Çò‚Çê‚Çì; method="Direct")
    end

    FloatTypes = [Double64, Float64, Float32]
    methods = ["Direct", "Minimal", "RS"]
    inplacemethods = ["Direct", "Minimal"]
    cases = Iterators.product(methods, FloatTypes)
    inplacecases = Iterators.product(inplacemethods, FloatTypes)

    function sYlm(s, ‚Ñì, m, Œ∏œï)
        NINJA.sYlm(s, ‚Ñì, m, Œ∏œï[1], Œ∏œï[2])
    end

    function explain(computed, expected, method, T, ‚Ñìmax, s, ‚Ñì, m, œµ)
        if ‚ââ(computed, expected, atol=œµ, rtol=œµ)
            @show method T ‚Ñìmax s ‚Ñì m œµ
            comp = copy(computed)
            @. comp[abs(comp)<œµ]=0
            @show comp expected
            println("max_diff = ", maximum(abs, computed .- expected), ";")
            println()
            #error("")
        end
    end

    # These test the ability of ssht to precisely reconstruct a pure `sYlm`.
    @testset "Synthesis: $T $method" for (method, T) in cases

        # We can't go to very high ‚Ñì, because NINJA.sYlm fails for low-precision numbers
        for ‚Ñìmax ‚àà 3:7

            # We need œµ to be huge, seemingly mostly due to the low-precision method
            # used for NINJA.sYlm; it is used because it is a simple reference method.
            œµ = 500‚Ñìmax^3 * eps(T)

            for s in -2:2
                ùíØ = SSHT(s, ‚Ñìmax; T=T, method=method)

                #for ‚Ñìmin in 0:abs(s)
                let ‚Ñìmin = abs(s)
                    for ‚Ñì in abs(s):‚Ñìmax
                        for m in -‚Ñì:‚Ñì
                            f = zeros(Complex{T}, SphericalFunctions.Ysize(‚Ñìmin, ‚Ñìmax))
                            f[SphericalFunctions.Yindex(‚Ñì, m, ‚Ñìmin)] = one(T)
                            computed = ùíØ * f
                            expected = sYlm.(s, ‚Ñì, m, pixels(ùíØ))
                            explain(computed, expected, method, T, ‚Ñìmax, s, ‚Ñì, m, œµ)
                            @test computed ‚âà expected atol=œµ rtol=œµ
                        end
                    end
                end
            end
        end
    end  # Synthesis


    # These test the ability of ssht to precisely decompose the results of `sYlm`.
    @testset "Analysis: $T $method" for (method, T) in cases

        # We can't go to very high ‚Ñì, because NINJA.sYlm fails for low-precision numbers
        for ‚Ñìmax ‚àà 3:7

            # We need œµ to be huge, seemingly mostly due to the low-precision method
            # used for NINJA.sYlm; it is used because it is a simple reference method.
            œµ = 500‚Ñìmax^3 * eps(T)
            if method == "Minimal"
                œµ *= 50
            end

            for s in -2:2
                ùíØ = SSHT(s, ‚Ñìmax; T=T, method=method)
                let ‚Ñìmin = abs(s)
                    for ‚Ñì in abs(s):‚Ñìmax
                        for m in -‚Ñì:‚Ñì
                            f = sYlm.(s, ‚Ñì, m, pixels(ùíØ))
                            computed = ùíØ \ f
                            expected = zeros(Complex{T}, size(computed))
                            expected[SphericalFunctions.Yindex(‚Ñì, m, ‚Ñìmin)] = one(T)
                            explain(computed, expected, method, T, ‚Ñìmax, s, ‚Ñì, m, œµ)
                            @test computed ‚âà expected atol=œµ rtol=œµ
                        end
                    end
                end
            end
        end
    end  # Analysis

    # These test the ability of ssht to precisely reconstruct a pure `sYlm`,
    # and then reverse that process to find the pure mode again.
    @testset verbose=false "A ‚àò S: $T $method" for (method, T) in cases
        # Note that the number of tests here scales as ‚Ñìmax^2, and
        # the time needed for each scales as (‚Ñìmax log(‚Ñìmax))^2,
        # so we don't bother going to very high ‚Ñìmax.
        @testset "$‚Ñìmax" for ‚Ñìmax ‚àà 3:7
            #œµ = 20‚Ñìmax^2 * eps(T)
            œµ = 500‚Ñìmax^3 * eps(T)
            if method == "Minimal"
                œµ *= 50
            end
            for s in -2:2
                ùíØ = SSHT(s, ‚Ñìmax; T=T, method=method)
                let ‚Ñìmin = abs(s)
                    f = zeros(Complex{T}, SphericalFunctions.Ysize(‚Ñìmin, ‚Ñìmax))
                    for ‚Ñì in abs(s):‚Ñìmax
                        for m in -‚Ñì:‚Ñì
                            f[:] .= false
                            f[SphericalFunctions.Yindex(‚Ñì, m, ‚Ñìmin)] = one(T)
                            expected = copy(f)
                            computed = ùíØ \ (ùíØ * f)
                            explain(computed, expected, method, T, ‚Ñìmax, s, ‚Ñì, m, œµ)
                            @test computed ‚âà expected atol=œµ rtol=œµ
                        end
                    end
                end
            end
        end
    end  # A ‚àò S

    # These test the ability of ssht to precisely reconstruct a pure `sYlm`,
    # and then reverse that process to find the pure mode again.
    @testset verbose=false "Non-inplace: $T $method" for (method, T) in inplacecases
        @testset "$‚Ñìmax" for ‚Ñìmax ‚àà [4,5]
            #œµ = 20‚Ñìmax^2 * eps(T)
            œµ = 100‚Ñìmax^3 * eps(T)
            if method == "Minimal"
                œµ *= 50
            end
            for s in [-1, 1]
                ùíØ = SSHT(s, ‚Ñìmax; T=T, method=method, inplace=false)
                let ‚Ñìmin = abs(s)
                    f = zeros(Complex{T}, SphericalFunctions.Ysize(‚Ñìmin, ‚Ñìmax))
                    for ‚Ñì in abs(s):‚Ñìmax
                        for m in -‚Ñì:‚Ñì
                            f[:] .= false
                            f[SphericalFunctions.Yindex(‚Ñì, m, ‚Ñìmin)] = one(T)
                            expected = f
                            f‚Ä≤ = similar(f)
                            LinearAlgebra.mul!(f‚Ä≤, ùíØ, f)
                            computed = ùíØ \ copy(f‚Ä≤)
                            explain(computed, expected, method, T, ‚Ñìmax, s, ‚Ñì, m, œµ)
                            @test computed ‚âà expected atol=œµ rtol=œµ
                        end
                    end
                end
            end
        end
    end  # Non-inplace

end
