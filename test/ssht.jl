@testset verbose=true "SSHT" begin

    function sYlm(s, ‚Ñì, m, Œ∏œï)
        NINJA.sYlm(s, ‚Ñì, m, Œ∏œï[1], Œ∏œï[2])
    end

    # These test the ability of ssht to precisely reconstruct a pure `sYlm`.
    @testset "Synthesis: $T $method" for (method, T) in Iterators.product(
        ["Direct", "RS"], #["Direct", "EKKM", "RS"],
        [Double64, Float64, Float32]
    )

        # We can't go to very high ‚Ñì, because NINJA.sYlm fails for low-precision numbers
        for ‚Ñìmax ‚àà 3:7

            # We need œµ to be huge, seemingly mostly due to the low-precision method
            # used for NINJA.sYlm; it is used because it is a simple reference method.
            œµ = 500‚Ñìmax^3 * eps(T)

            for s in -2:2
                ùíØ = SSHT(s, ‚Ñìmax; T=T, method=method)

                #for ‚Ñìmin in 0:abs(s)
                let ‚Ñìmin = abs(s)
                    for ‚Ñì in abs(s):‚Ñìmax
                        for m in -‚Ñì:‚Ñì
                            f = zeros(Complex{T}, SphericalFunctions.Ysize(‚Ñìmin, ‚Ñìmax))
                            f[SphericalFunctions.Yindex(‚Ñì, m, ‚Ñìmin)] = one(T)
                            computed = ùíØ * f
                            expected = sYlm.(s, ‚Ñì, m, pixels(ùíØ))
                            if ‚ââ(computed, expected, atol=œµ, rtol=œµ)
                                @show method
                                @show T
                                @show ‚Ñìmax
                                @show s
                                @show ‚Ñì
                                @show m
                                @show œµ
                                comp = copy(computed)
                                @. comp[abs(comp)<œµ]=0
                                @show comp
                                @show expected
                                println("max_diff = ", maximum(abs, computed .- expected), ";")
                                println()
                                error("")
                            end
                            @test computed ‚âà expected atol=œµ rtol=œµ
                        end
                    end
                end
            end
        end
    end  # Synthesis

    # These test the ability of ssht to precisely decompose the results of `sYlm`.
    @testset "Analysis: $T $method" for (method, T) in Iterators.product(
        ["Direct", "RS"], #["Direct", "EKKM", "RS"],
        [Double64, Float64, Float32]
    )

        # We can't go to very high ‚Ñì, because NINJA.sYlm fails for low-precision numbers
        for ‚Ñìmax ‚àà 3:7

            # We need œµ to be huge, seemingly mostly due to the low-precision method
            # used for NINJA.sYlm; it is used because it is a simple reference method.
            œµ = 500‚Ñìmax^3 * eps(T)

            for s in -2:2
                ùíØ = SSHT(s, ‚Ñìmax; T=T, method=method)

                #for ‚Ñìmin in 0:abs(s)
                let ‚Ñìmin = abs(s)
                    for ‚Ñì in abs(s):‚Ñìmax
                        for m in -‚Ñì:‚Ñì
                            f = sYlm.(s, ‚Ñì, m, pixels(ùíØ))
                            computed = ùíØ \ f
                            expected = zeros(Complex{T}, size(computed))
                            expected[SphericalFunctions.Yindex(‚Ñì, m, ‚Ñìmin)] = one(T)
                            if ‚ââ(computed, expected, atol=œµ, rtol=œµ)
                                @show method
                                @show T
                                @show ‚Ñìmax
                                @show s
                                @show ‚Ñì
                                @show m
                                @show œµ
                                comp = copy(computed)
                                @. comp[abs(comp)<œµ]=0
                                @show comp
                                @show expected
                                println("max_diff = ", maximum(abs, computed .- expected), ";")
                                println()
                            end
                            @test computed ‚âà expected atol=œµ rtol=œµ
                        end
                    end
                end
            end
        end
    end  # Analysis
end
