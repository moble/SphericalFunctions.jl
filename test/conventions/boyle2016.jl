@testmodule Boyle2016 begin

    using Quaternionic

    """
        WignerDElement(R, ‚Ñì, m‚Ä≤, m)

    Compute a single Wigner-D matrix element for half-integer or integer (‚Ñì, m‚Ä≤, m).

    `R` is a `Rotor`, and `‚Ñì`, `m‚Ä≤`, and `m` are the indices of the Wigner-D matrix element.
    The indices must all be integers or all be `Rational` with denominators of 2.

    """
    function WignerDElement(R::Rotor{T}, ‚Ñì::I, m‚Ä≤::I, m::I) where {T, I}
        # If `I` is Rational, check that the denominators are 2
        if I <: Rational
            if (denominator(‚Ñì) != 2) || (denominator(m‚Ä≤) != 2) || (denominator(m) != 2)
                error("The indices ‚Ñì, m‚Ä≤, and m must all be integers or all be half-integers")
            end
        end

        # Convert to twice the input values for half-integer support
        L  = Int(2‚Ñì)
        M‚Ä≤ = Int(2m‚Ä≤)
        M  = Int(2m)

        if L > 16
            error(
                "The maximum supported ‚Ñì for this function is 8; " *
                "larger numbers become numerically unstable.\n" *
                "Consider using the `WignerD` function instead."
            )
        end

        # Simple helper for 0+0im
        zeroCT = zero(Complex{T})

        if abs(M‚Ä≤) > L || abs(M) > L
            return zeroCT
        end

        let œÄ = T(œÄ)
            # Split input `R` into its two complex components and extract magnitude and phase
            R‚Çõ = Complex(R[1], R[4])
            R‚Çê = Complex(R[3], R[2])
            r‚Çõ = abs(R‚Çõ)
            r‚Çê = abs(R‚Çê)
            œï‚Çõ = angle(R‚Çõ)
            œï‚Çê = angle(R‚Çê)

            # Check simple limiting cases
            if r‚Çê ‚â§ 4eps(r‚Çõ)
                if M‚Ä≤ != M
                    return zeroCT
                else
                    return cis(M * œï‚Çõ)
                end

            elseif r‚Çõ ‚â§ 4eps(r‚Çê)
                if -M‚Ä≤ != M
                    return zeroCT
                else
                    return cis(M * œï‚Çê) * (((L - M) % 4 == 0) ? 1 : -1)
                end

            elseif r‚Çê ‚â§ r‚Çõ
                Œª = -(r‚Çê/r‚Çõ)^2
                œÅ‚Çò·µ¢‚Çô = max(0, (M‚Ä≤ - M)√∑2)
                Œ∫ = ‚àöT(
                        (factorial((L + M)√∑2) * factorial((L - M)√∑2))
                        / (factorial((L + M‚Ä≤)√∑2) * factorial((L - M‚Ä≤)√∑2))
                    ) *
                    binomial((L + M‚Ä≤)√∑2, œÅ‚Çò·µ¢‚Çô) * binomial((L - M‚Ä≤)√∑2, (L - M)√∑2 - œÅ‚Çò·µ¢‚Çô)
                if (œÅ‚Çò·µ¢‚Çô % 2) != 0
                    Œ∫ = -Œ∫
                end
                œÅ‚Çò‚Çê‚Çì = min((L + M‚Ä≤)√∑2, (L - M)√∑2)
                N‚ÇÅ = L + M‚Ä≤ + 2
                N‚ÇÇ = L - M + 2
                N‚ÇÉ  = M - M‚Ä≤

                total = one(T)
                for P in reverse(2œÅ‚Çò·µ¢‚Çô+2:2:2œÅ‚Çò‚Çê‚Çì)
                    total *= Œª * ((N‚ÇÅ - P)*(N‚ÇÇ - P)) / (P*(N‚ÇÉ + P))
                    total += one(T)
                end
                return Œ∫ *
                    (r‚Çõ ^ (L - (M - M‚Ä≤)√∑2 - 2œÅ‚Çò·µ¢‚Çô)) *
                    (r‚Çê ^ ((M - M‚Ä≤)√∑2 + 2œÅ‚Çò·µ¢‚Çô)) *
                    cis((M + M‚Ä≤)√∑2 * œï‚Çõ + (M - M‚Ä≤)√∑2 * œï‚Çê) *
                    total

                # return Œ∫ *
                #     (r‚Çõ ^ (L - (M - M‚Ä≤)√∑2 - 2œÅ‚Çò·µ¢‚Çô)) * (r‚Çê ^ ((M - M‚Ä≤)√∑2 + 2œÅ‚Çò·µ¢‚Çô)) *
                #     cis((M + M‚Ä≤)√∑2 * œï‚Çõ + (M - M‚Ä≤)√∑2 * œï‚Çê) *
                #     foldl(
                #         (acc, P) -> acc * Œª * ((N‚ÇÅ - P)*(N‚ÇÇ - P)) / (P*(N‚ÇÉ + P)) + one(T),
                #         reverse(2œÅ‚Çò·µ¢‚Çô+2:2:2œÅ‚Çò‚Çê‚Çì),
                #         init=one(T)
                #     )

            else # r‚Çõ < r‚Çê
                Œª = -(r‚Çõ/r‚Çê)^2
                œÅ‚Çò·µ¢‚Çô = max(0, -(M‚Ä≤ + M)√∑2)
                Œ∫ = ‚àöT(
                        (factorial((L + M)√∑2) * factorial((L - M)√∑2))
                        / (factorial((L + M‚Ä≤)√∑2) * factorial((L - M‚Ä≤)√∑2))
                    ) *
                    binomial((L + M‚Ä≤)√∑2, (L - M)√∑2 - œÅ‚Çò·µ¢‚Çô) * binomial((L - M‚Ä≤)√∑2, œÅ‚Çò·µ¢‚Çô)
                if (((L - M)√∑2 - œÅ‚Çò·µ¢‚Çô) % 2) != 0
                    Œ∫ = -Œ∫
                end
                œÅ‚Çò‚Çê‚Çì = min((L - M‚Ä≤)√∑2, (L - M)√∑2)
                N‚ÇÅ = L - M‚Ä≤ + 2
                N‚ÇÇ = L - M + 2
                N‚ÇÉ  = M + M‚Ä≤

                total = one(T)
                for P in reverse(2œÅ‚Çò·µ¢‚Çô+2:2:2œÅ‚Çò‚Çê‚Çì)
                    total *= Œª * ((N‚ÇÅ - P)*(N‚ÇÇ - P)) / (P*(N‚ÇÉ + P))
                    total += one(T)
                end
                return Œ∫ *
                    (r‚Çê ^ (L - (M + M‚Ä≤)√∑2 - 2œÅ‚Çò·µ¢‚Çô)) *
                    (r‚Çõ ^ ((M + M‚Ä≤)√∑2 + 2œÅ‚Çò·µ¢‚Çô)) *
                    cis((M - M‚Ä≤)√∑2 * œï‚Çê + (M + M‚Ä≤)√∑2 * œï‚Çõ) *
                    total

                # return Œ∫ *
                #     (r‚Çê ^ (L - (M + M‚Ä≤)√∑2 - 2œÅ‚Çò·µ¢‚Çô)) *
                #     (r‚Çõ ^ ((M + M‚Ä≤)√∑2 + 2œÅ‚Çò·µ¢‚Çô)) *
                #     cis((M - M‚Ä≤)√∑2 * œï‚Çê + (M + M‚Ä≤)√∑2 * œï‚Çõ) *
                #     foldl(
                #         (acc, P) -> acc * Œª * ((N‚ÇÅ - P) * (N‚ÇÇ - P)) / (P * (N‚ÇÉ + P)) + one(T),
                #         reverse(2œÅ‚Çò·µ¢‚Çô+2:2:2œÅ‚Çò‚Çê‚Çì),
                #         init=one(T)
                #     )

            end
        end
    end

end # @testmodule Boyle2016


@testitem "WignerDElement" setup=[Boyle2016] begin
    using Quaternionic
    using Random
    Random.seed!(1234)
    const T = Float64
    const ‚Ñì‚Çò‚Çê‚Çì = 8
    œµ‚Çê = 8eps(T)
    œµ·µ£ = 20eps(T)

    Rs = [
        exp(3eps(T)*imx);
        exp(3eps(T)*imy);
        exp(3eps(T)*imz);
        Rotor{T}(imx)*exp(3eps(T)*imx);
        Rotor{T}(imx)*exp(3eps(T)*imy);
        Rotor{T}(imx)*exp(3eps(T)*imz);
        Rotor{T}(imy)*exp(3eps(T)*imx);
        Rotor{T}(imy)*exp(3eps(T)*imy);
        Rotor{T}(imy)*exp(3eps(T)*imz);
        Rotor{T}(imz)*exp(3eps(T)*imx);
        Rotor{T}(imz)*exp(3eps(T)*imy);
        Rotor{T}(imz)*exp(3eps(T)*imz);
        randn(Rotor{T}, 20)
    ]

    for R‚Ä≤ ‚àà Rs
        for R ‚àà (R‚Ä≤, conj(R‚Ä≤))
            ùîá1 = [
                Boyle2016.WignerDElement(R, ‚Ñì, m‚Ä≤, m)
                for (‚Ñì, m‚Ä≤, m) ‚àà eachrow(SphericalFunctions.WignerDrange(‚Ñì‚Çò‚Çê‚Çì))
            ]
            ùîá2 = D_matrices(R, ‚Ñì‚Çò‚Çê‚Çì)
            @test ùîá1 ‚âà ùîá2
        end
    end

end  # @testitem "WignerDElement"
