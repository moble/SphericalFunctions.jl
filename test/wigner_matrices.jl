@testset verbose=true "wigner_matrices" begin
    include("test_utilities.jl")
    using SphericalFunctions: WignerHsize, WignerDsize, WignerHindex, WignerDindex, abd
    Œ±range(T, n=15) = T[
        0; nextfloat(T(0)); rand(T(0):eps(T(œÄ)):T(œÄ), n√∑2); prevfloat(T(œÄ)); T(œÄ);
        nextfloat(T(œÄ)); rand(T(œÄ):eps(2T(œÄ)):2T(œÄ), n√∑2); prevfloat(T(œÄ)); 2T(œÄ)
    ]
    Œ≤range(T, n=15) = T[
        0; nextfloat(T(0)); rand(T(0):eps(T(œÄ)):T(œÄ), n); prevfloat(T(œÄ)); T(œÄ)
    ]
    Œ≥range(T, n=15) = Œ±range(T, n)
    epsilon(k) = ifelse(k>0 && isodd(k), -1, 1)

    @testset "Compare d expressions ($T)" for T in [BigFloat, Float64, Float32]
        # This just compares the two versions of the `d` function from test_utilities
        # to ensure that later tests that use those functions are reliable
        for Œ≤ in Œ≤range(T)
            expiŒ≤ = exp(im*Œ≤)
            for ‚Ñì‚Çò‚Çê‚Çì in 0:2  # 2 is the max explicitly coded ‚Ñì
                for m‚Ä≤‚Çò‚Çê‚Çì in 0:‚Ñì‚Çò‚Çê‚Çì
                    for n in 0:‚Ñì‚Çò‚Çê‚Çì
                        for m‚Ä≤ in -min(n, m‚Ä≤‚Çò‚Çê‚Çì):min(n, m‚Ä≤‚Çò‚Çê‚Çì)
                            for m in -n:n
                                d_expl = ExplicitWignerMatrices.d_explicit(n, m‚Ä≤, m, expiŒ≤)
                                d_form = ExplicitWignerMatrices.d_formula(n, m‚Ä≤, m, expiŒ≤)
                                @test d_expl ‚âà d_form atol=30eps(T) rtol=30eps(T)
                            end
                        end
                    end
                end
            end
        end
    end


    @testset "Compare H to explicit d ($T)" for T in [BigFloat, Float64, Float32]
        # This compares the H obtained via recurrence with the explicit Wigner d
        # d_{\ell}^{n,m} = \epsilon_n \epsilon_{-m} H_{\ell}^{n,m},
        for Œ≤ in Œ≤range(T)
            expiŒ≤ = exp(im*Œ≤)
            for ‚Ñì‚Çò‚Çê‚Çì in 0:2  # 2 is the max explicitly coded ‚Ñì
                for m‚Ä≤‚Çò‚Çê‚Çì in 0:‚Ñì‚Çò‚Çê‚Çì
                    Hw = fill(T(NaN), WignerHsize(m‚Ä≤‚Çò‚Çê‚Çì, ‚Ñì‚Çò‚Çê‚Çì))
                    H!(Hw, expiŒ≤, ‚Ñì‚Çò‚Çê‚Çì, m‚Ä≤‚Çò‚Çê‚Çì, abd(‚Ñì‚Çò‚Çê‚Çì, T))
                    for n in 0:‚Ñì‚Çò‚Çê‚Çì
                        for m‚Ä≤ in -min(n, m‚Ä≤‚Çò‚Çê‚Çì):min(n, m‚Ä≤‚Çò‚Çê‚Çì)
                            for m in -n:n
                                d_expl = ExplicitWignerMatrices.d_explicit(n, m‚Ä≤, m, expiŒ≤)
                                d_rec = epsilon(m‚Ä≤) * epsilon(-m) * Hw[WignerHindex(n, m‚Ä≤, m; m‚Ä≤‚Çò‚Çê‚Çì=m‚Ä≤‚Çò‚Çê‚Çì)]
                                @test d_rec ‚âà d_expl atol=30eps(T) rtol=30eps(T)
                            end
                        end
                    end
                end

                # @show ‚Ñì‚Çò‚Çê‚Çì m‚Ä≤‚Çò‚Çê‚Çì
                # for n in 0:‚Ñì‚Çò‚Çê‚Çì
                #     @show n
                #     mat = fill(zero(T), 2n+1, 2n+1)
                #     for m‚Ä≤ in -min(n, m‚Ä≤‚Çò‚Çê‚Çì):min(n, m‚Ä≤‚Çò‚Çê‚Çì)
                #         for m in abs(m‚Ä≤):n
                #             mat[m‚Ä≤+n+1, m+n+1] =
                #                 Hw[SphericalFunctions.WignerHindex(n, m‚Ä≤, m; m‚Ä≤‚Çò‚Çê‚Çì=m‚Ä≤‚Çò‚Çê‚Çì)].val
                #         end
                #     end
                #     println("H:")
                #     display(mat)
                #     println()
                #     mat = fill(zero(T), 2n+1, 2n+1)
                #     for m‚Ä≤ in -min(n, m‚Ä≤‚Çò‚Çê‚Çì):min(n, m‚Ä≤‚Çò‚Çê‚Çì)
                #         for m in abs(m‚Ä≤):n
                #             mat[m‚Ä≤+n+1, m+n+1] =
                #                 ùîá[SphericalFunctions.WignerDindex(n, m‚Ä≤, m; m‚Ä≤‚Çò‚Çê‚Çì=m‚Ä≤‚Çò‚Çê‚Çì)].val
                #         end
                #     end
                #     println("ùîá :")
                #     display(mat)
                #     println()
                #     println()
                # end
                # println()
            end
        end
    end


    @testset "Compare H to formulaic d ($T)" for T in [BigFloat, Float64, Float32]
        # This compares the H obtained via recurrence with the formulaic Wigner d
        # d_{\ell}^{n,m} = \epsilon_n \epsilon_{-m} H_{\ell}^{n,m},
        for Œ≤ in Œ≤range(T)
            expiŒ≤ = exp(im*Œ≤)
            for ‚Ñì‚Çò‚Çê‚Çì in 0:6  # Expect overflows for higher ‚Ñì with Float32
                for m‚Ä≤‚Çò‚Çê‚Çì in 0:‚Ñì‚Çò‚Çê‚Çì
                    Hw = fill(T(NaN), WignerHsize(m‚Ä≤‚Çò‚Çê‚Çì, ‚Ñì‚Çò‚Çê‚Çì))
                    H!(Hw, expiŒ≤, ‚Ñì‚Çò‚Çê‚Çì, m‚Ä≤‚Çò‚Çê‚Çì, abd(‚Ñì‚Çò‚Çê‚Çì, T))
                    for n in 0:‚Ñì‚Çò‚Çê‚Çì
                        for m‚Ä≤ in -min(n, m‚Ä≤‚Çò‚Çê‚Çì):min(n, m‚Ä≤‚Çò‚Çê‚Çì)
                            for m in -n:n
                                d_form = ExplicitWignerMatrices.d_formula(n, m‚Ä≤, m, expiŒ≤)
                                d_rec = epsilon(m‚Ä≤) * epsilon(-m) * Hw[WignerHindex(n, m‚Ä≤, m; m‚Ä≤‚Çò‚Çê‚Çì=m‚Ä≤‚Çò‚Çê‚Çì)]
                                @test d_rec ‚âà d_form atol=30eps(T) rtol=30eps(T)
                            end
                        end
                    end
                end
            end
        end
    end

    @testset "Test H(0) ($T)" for T in [BigFloat, Float64, Float32]
        # We have H_{n}^{m‚Ä≤,m}(0) = (-1)^m‚Ä≤ Œ¥_{m‚Ä≤,m}
        let Œ≤ = zero(T)
            expiŒ≤ = exp(im*Œ≤)
            for ‚Ñì‚Çò‚Çê‚Çì in 0:6  # Expect overflows for higher ‚Ñì with Float32
                for m‚Ä≤‚Çò‚Çê‚Çì in 0:‚Ñì‚Çò‚Çê‚Çì
                    Hw = fill(T(NaN), WignerHsize(m‚Ä≤‚Çò‚Çê‚Çì, ‚Ñì‚Çò‚Çê‚Çì))
                    H!(Hw, expiŒ≤, ‚Ñì‚Çò‚Çê‚Çì, m‚Ä≤‚Çò‚Çê‚Çì, abd(‚Ñì‚Çò‚Çê‚Çì, T))
                    for n in 0:‚Ñì‚Çò‚Çê‚Çì
                        for m‚Ä≤ in -min(n, m‚Ä≤‚Çò‚Çê‚Çì):min(n, m‚Ä≤‚Çò‚Çê‚Çì)
                            for m in abs(m‚Ä≤):n
                                H_rec = Hw[WignerHindex(n, m‚Ä≤, m; m‚Ä≤‚Çò‚Çê‚Çì=m‚Ä≤‚Çò‚Çê‚Çì)]
                                if m‚Ä≤ == m
                                    @test H_rec ‚âà T(-1)^m‚Ä≤ atol=eps(T)
                                else
                                    @test H_rec ‚âà zero(T) atol=eps(T)
                                end
                            end
                        end
                    end
                end
            end
        end
    end

    @testset "Test H(œÄ) ($T)" for T in [BigFloat, Float64, Float32]
        # We have H_{n}^{m‚Ä≤,m}(0) = (-1)^m‚Ä≤ Œ¥_{m‚Ä≤,m}
        let Œ≤ = T(œÄ)
            expiŒ≤ = exp(im*Œ≤)
            for ‚Ñì‚Çò‚Çê‚Çì in 0:6  # Expect overflows for higher ‚Ñì with Float32
                for m‚Ä≤‚Çò‚Çê‚Çì in 0:‚Ñì‚Çò‚Çê‚Çì
                    Hw = fill(T(NaN), WignerHsize(m‚Ä≤‚Çò‚Çê‚Çì, ‚Ñì‚Çò‚Çê‚Çì))
                    H!(Hw, expiŒ≤, ‚Ñì‚Çò‚Çê‚Çì, m‚Ä≤‚Çò‚Çê‚Çì, abd(‚Ñì‚Çò‚Çê‚Çì, T))
                    for n in 0:‚Ñì‚Çò‚Çê‚Çì
                        for m‚Ä≤ in -min(n, m‚Ä≤‚Çò‚Çê‚Çì):min(n, m‚Ä≤‚Çò‚Çê‚Çì)
                            for m in abs(m‚Ä≤):n
                                H_rec = Hw[WignerHindex(n, m‚Ä≤, m; m‚Ä≤‚Çò‚Çê‚Çì=m‚Ä≤‚Çò‚Çê‚Çì)]
                                if m‚Ä≤ == -m
                                    @test H_rec ‚âà T(-1)^(n+m‚Ä≤) atol=eps(T(œÄ))
                                else
                                    @test H_rec ‚âà zero(T) atol=1.5eps(T(œÄ))
                                end
                            end
                        end
                    end
                end
            end
        end
    end

    @testset "Compare H/D indexing ($T)" for T in [Float64, Float32]
        # Here, we check that we can pass in either an "H wedge" array to be used with
        # WignerHindex, or a full ùîá array used with WignerDindex, and obtain the same
        # H recurrence results
        ‚Ñì‚Çò‚Çê‚Çì = 8
        for m‚Ä≤‚Çò‚Çê‚Çì in 0:‚Ñì‚Çò‚Çê‚Çì
            expiŒ≤ = exp(im*rand(0:eps(T):œÄ))
            expiŒ≤NaNCheck = complex(NaNCheck{T}(expiŒ≤.re), NaNCheck{T}(expiŒ≤.im))
            NCTN = NaNCheck{T}(NaN)
            Hw = fill(NCTN, WignerHsize(m‚Ä≤‚Çò‚Çê‚Çì, ‚Ñì‚Çò‚Çê‚Çì))
            H!(Hw, expiŒ≤NaNCheck, ‚Ñì‚Çò‚Çê‚Çì, m‚Ä≤‚Çò‚Çê‚Çì, abd(‚Ñì‚Çò‚Çê‚Çì, T))
            ùîá = fill(NCTN, WignerDsize(0, m‚Ä≤‚Çò‚Çê‚Çì, ‚Ñì‚Çò‚Çê‚Çì))
            H!(ùîá, expiŒ≤NaNCheck, ‚Ñì‚Çò‚Çê‚Çì, m‚Ä≤‚Çò‚Çê‚Çì, abd(‚Ñì‚Çò‚Çê‚Çì, T), WignerDindex)
            for n in 0:‚Ñì‚Çò‚Çê‚Çì
                for m‚Ä≤ in -min(n, m‚Ä≤‚Çò‚Çê‚Çì):min(n, m‚Ä≤‚Çò‚Çê‚Çì)
                    for m in abs(m‚Ä≤):n
                        Hnm‚Ä≤m = Hw[WignerHindex(n, m‚Ä≤, m; m‚Ä≤‚Çò‚Çê‚Çì=m‚Ä≤‚Çò‚Çê‚Çì)]
                        ùîánm‚Ä≤m = ùîá[WignerDindex(n, m‚Ä≤, m; m‚Ä≤‚Çò‚Çê‚Çì=m‚Ä≤‚Çò‚Çê‚Çì)]
                        @test Hnm‚Ä≤m == ùîánm‚Ä≤m
                    end
                end
            end
        end
    end

    @testset "Compare d to formulaic d ($T)" for T in [BigFloat, Float64, Float32]
        # Now, we're ready to check that d_{n}^{m‚Ä≤,m}(Œ≤) matches the expected values
        # for a range of Œ≤ values
        for Œ≤ in Œ≤range(T)
            expiŒ≤ = exp(im*Œ≤)
            for ‚Ñì‚Çò‚Çê‚Çì in 0:4
                abd_vals = abd(‚Ñì‚Çò‚Çê‚Çì, T)
                d = Array{T}(undef, WignerDsize(0, ‚Ñì‚Çò‚Çê‚Çì, ‚Ñì‚Çò‚Çê‚Çì))
                d!(d, expiŒ≤, ‚Ñì‚Çò‚Çê‚Çì, abd_vals)
                for n in 0:‚Ñì‚Çò‚Çê‚Çì
                    for m‚Ä≤ in -n:n
                        for m in -n:n
                            d_formula = ExplicitWignerMatrices.d_formula(n, m‚Ä≤, m, expiŒ≤)
                            d_recurrence = d[WignerDindex(n, m‚Ä≤, m)]
                            @test d_formula ‚âà d_recurrence atol=30eps(T) rtol=30eps(T)
                        end
                    end
                end
            end
        end
    end

    @testset "Compare ùîá to formulaic d ($T)" for T in [BigFloat, Float64, Float32]
        # Now, we're ready to check that d_{n}^{m‚Ä≤,m}(Œ≤) matches the expected values
        # for a range of Œ≤ values
        for ‚Ñì‚Çò‚Çê‚Çì in 0:4
            abd_vals = abd(‚Ñì‚Çò‚Çê‚Çì, T)
            ùîá = Array{Complex{T}}(undef, WignerDsize(0, ‚Ñì‚Çò‚Çê‚Çì, ‚Ñì‚Çò‚Çê‚Çì))
            expimŒ± = Array{Complex{T}}(undef, ‚Ñì‚Çò‚Çê‚Çì+1)
            expimŒ≥ = Array{Complex{T}}(undef, ‚Ñì‚Çò‚Çê‚Çì+1)
            expiŒ± = complex(one(T))
            expiŒ≥ = complex(one(T))
            for Œ≤ in Œ≤range(T)
                expiŒ≤ = exp(im*Œ≤)
                R = from_euler_angles(zero(T), Œ≤, zero(T))
                D!(ùîá, R, ‚Ñì‚Çò‚Çê‚Çì, abd_vals, expimŒ±, expimŒ≥)
                for n in 0:‚Ñì‚Çò‚Çê‚Çì
                    for m‚Ä≤ in -n:n
                        for m in -n:n
                            ùîá_formula = ExplicitWignerMatrices.D_formula(n, m‚Ä≤, m, expiŒ±, expiŒ≤, expiŒ≥)
                            ùîá_recurrence = ùîá[WignerDindex(n, m‚Ä≤, m)]
                            @test ùîá_formula ‚âà ùîá_recurrence atol=200eps(T) rtol=200eps(T)
                        end
                    end
                end
            end
        end
    end

    @testset "Compare ùîá to formulaic ùîá ($T)" for T in [BigFloat, Float64, Float32]
        # Now, we're ready to check that ùîá_{n}^{m‚Ä≤,m}(Œ≤) matches the expected values
        # for a range of Œ±, Œ≤, Œ≥ values
        Random.seed!(123)
        ‚Ñì‚Çò‚Çê‚Çì = 4
        abd_vals = abd(‚Ñì‚Çò‚Çê‚Çì, T)
        ùîá = Array{Complex{T}}(undef, WignerDsize(0, ‚Ñì‚Çò‚Çê‚Çì, ‚Ñì‚Çò‚Çê‚Çì))
        expimŒ± = Array{Complex{T}}(undef, ‚Ñì‚Çò‚Çê‚Çì+1)
        expimŒ≥ = Array{Complex{T}}(undef, ‚Ñì‚Çò‚Çê‚Çì+1)
        @showprogress for Œ± in Œ±range(T, 5)
            for Œ≤ in Œ≤range(T, 5)
                for Œ≥ in Œ≥range(T, 5)
                    # expiŒ±, expiŒ≤, expiŒ≥ = cis.([Œ±, Œ≤, Œ≥])
                    # @show (Œ±, Œ≤, Œ≥)
                    # println("Before:")
                    # @show (expiŒ±, expiŒ≤, expiŒ≥)
                    R = from_euler_angles(Œ±, Œ≤, Œ≥)
                    expiŒ±, expiŒ≤, expiŒ≥ = to_euler_phases(R)
                    # println("After:")
                    # @show (expiŒ±, expiŒ≤, expiŒ≥)
                    D!(ùîá, R, ‚Ñì‚Çò‚Çê‚Çì, abd_vals, expimŒ±, expimŒ≥)
                    for n in 0:‚Ñì‚Çò‚Çê‚Çì
                        for m‚Ä≤ in -n:n
                            for m in -n:n
                                ùîá_formula = ExplicitWignerMatrices.D_formula(
                                    n, m‚Ä≤, m, expiŒ±, expiŒ≤, expiŒ≥
                                )
                                ùîá_recurrence = ùîá[WignerDindex(n, m‚Ä≤, m)]
                                if ‚ââ(ùîá_formula, ùîá_recurrence, atol=30eps(T), rtol=30eps(T))
                                    if ‚âà(ùîá_formula, conj(ùîá_recurrence), atol=30eps(T), rtol=30eps(T))
                                        println("Conjugation error in (n,m‚Ä≤,m) = ($n,$m‚Ä≤,$m)")
                                    else
                                        println("Major error in (n,m‚Ä≤,m) = ($n,$m‚Ä≤,$m)")
                                    end
                                    println("\tùîá_formula = $ùîá_formula")
                                    println("\tùîá_recurrence = $ùîá_recurrence")
                                    @show (Œ±, Œ≤, Œ≥)
                                    @show (expiŒ±, expiŒ≤, expiŒ≥)
                                    @show R
                                    println()
                                end
                                @test ùîá_formula ‚âà ùîá_recurrence atol=30eps(T) rtol=30eps(T)
                            end
                        end
                    end
                    # println()
                    # flush(stdout)
                    # flush(stderr)
                end
            end
        end
    end

    @testset "Group characters $T" for T in [BigFloat, Float64, Float32]
        # œá ≤(Œ≤) ‚âî Œ£‚Çò ùîá ≤‚Çò‚Çò(Œ≤) ‚â° Œ£‚Çò ùîá ≤‚Çò‚Çò(Œ≤) = sin((2j+1)Œ≤/2) / sin(Œ≤/2)
        ‚Ñì‚Çò‚Çê‚Çì = 100
        m‚Ä≤‚Çò‚Çê‚Çì = ‚Ñì‚Çò‚Çê‚Çì
        abd_vals = abd(‚Ñì‚Çò‚Çê‚Çì, T)
        d = Array{T}(undef, WignerDsize(0, m‚Ä≤‚Çò‚Çê‚Çì, ‚Ñì‚Çò‚Çê‚Çì))
        # ùîá = Array{Complex{T}}(undef, WignerDsize(0, m‚Ä≤‚Çò‚Çê‚Çì, ‚Ñì‚Çò‚Çê‚Çì))
        # expimŒ± = Array{Complex{T}}(undef, ‚Ñì‚Çò‚Çê‚Çì+1)
        # expimŒ≥ = Array{Complex{T}}(undef, ‚Ñì‚Çò‚Çê‚Çì+1)
        for Œ≤ in Œ≤range(T)
            expiŒ≤ = exp(im*Œ≤)
            d!(d, expiŒ≤, ‚Ñì‚Çò‚Çê‚Çì, abd_vals)
            for j in 0:‚Ñì‚Çò‚Çê‚Çì
                sin_ratio = sin((2j+1)*Œ≤/2) / sin(Œ≤/2)
                if abs(Œ≤) < 10eps(T)
                    sin_ratio = T(2j+1)
                elseif abs(Œ≤-œÄ) < 10eps(T)
                    sin_ratio = T(-1)^j
                end
                œá ≤ = sum(d[WignerDindex(j, m, m)] for m in -j:j)
                @test œá ≤ ‚âà sin_ratio atol=500eps(T) rtol=500eps(T)
                # for Œ± in Œ±range(T, 5)
                #     for Œ≥ in Œ≥range(T, 5)
                #         R = from_euler_angles(Œ±, Œ≤, Œ≥)
                #         D!(ùîá, R, ‚Ñì‚Çò‚Çê‚Çì, abd_vals, expimŒ±, expimŒ≥)
                #         œá ≤ = sum(ùîá[WignerDindex(j, m, m)] for m in -j:j)
                #         @test œá ≤ ‚âà sin_ratio atol=500eps(T) rtol=500eps(T)
                #     end
                # end
            end
        end
    end

end
