@testset verbose=true "wigner_matrices" begin
    include("test_utilities.jl")

    @testset "Compare explicit H{$T}" for T in [Float64, Float32]
        # d_{\ell}^{n,m} = \epsilon_n \epsilon_{-m} H_{\ell}^{n,m},
        epsilon(k) = k>0 ? (-1)^k : 1
        ‚Ñì‚Çò‚Çê‚Çì = 2  # This is the max explicitly coded ‚Ñì
        for m‚Ä≤‚Çò‚Çê‚Çì in 0:‚Ñì‚Çò‚Çê‚Çì
            expiŒ≤ = exp(im*rand(0:eps(T):œÄ))
            expiŒ≤NaNCheck = complex(NaNCheck{T}(expiŒ≤.re), NaNCheck{T}(expiŒ≤.im))
            NCTN = NaNCheck{T}(NaN)
            Hw = fill(NCTN, SphericalFunctions.WignerHsize(m‚Ä≤‚Çò‚Çê‚Çì, ‚Ñì‚Çò‚Çê‚Çì))
            SphericalFunctions.H2!(Hw, expiŒ≤NaNCheck, ‚Ñì‚Çò‚Çê‚Çì, m‚Ä≤‚Çò‚Çê‚Çì, SphericalFunctions.abd(‚Ñì‚Çò‚Çê‚Çì, T))
            for n in 0:‚Ñì‚Çò‚Çê‚Çì
                for m‚Ä≤ in -min(n, m‚Ä≤‚Çò‚Çê‚Çì):min(n, m‚Ä≤‚Çò‚Çê‚Çì)
                    for m in -n:n
                        d = ExplicitWignerMatrices.d(n, m‚Ä≤, m, expiŒ≤)
                        expected = epsilon(m‚Ä≤) * epsilon(-m) * d
                        actual = Hw[SphericalFunctions.WignerHindex(n, m‚Ä≤, m; m‚Ä≤‚Çò‚Çê‚Çì=m‚Ä≤‚Çò‚Çê‚Çì)]
                        @test expected ‚âà actual atol=30eps(T) rtol=30eps(T)
                    end
                end
            end

            # @show ‚Ñì‚Çò‚Çê‚Çì m‚Ä≤‚Çò‚Çê‚Çì
            # for n in 0:‚Ñì‚Çò‚Çê‚Çì
            #     @show n
            #     mat = fill(zero(T), 2n+1, 2n+1)
            #     for m‚Ä≤ in -min(n, m‚Ä≤‚Çò‚Çê‚Çì):min(n, m‚Ä≤‚Çò‚Çê‚Çì)
            #         for m in abs(m‚Ä≤):n
            #             mat[m‚Ä≤+n+1, m+n+1] =
            #                 Hw[SphericalFunctions.WignerHindex(n, m‚Ä≤, m; m‚Ä≤‚Çò‚Çê‚Çì=m‚Ä≤‚Çò‚Çê‚Çì)].val
            #         end
            #     end
            #     println("H:")
            #     display(mat)
            #     println()
            #     mat = fill(zero(T), 2n+1, 2n+1)
            #     for m‚Ä≤ in -min(n, m‚Ä≤‚Çò‚Çê‚Çì):min(n, m‚Ä≤‚Çò‚Çê‚Çì)
            #         for m in abs(m‚Ä≤):n
            #             mat[m‚Ä≤+n+1, m+n+1] =
            #                 ùîá[SphericalFunctions.WignerDindex(n, m‚Ä≤, m; m‚Ä≤‚Çò‚Çê‚Çì=m‚Ä≤‚Çò‚Çê‚Çì)].val
            #         end
            #     end
            #     println("ùîá :")
            #     display(mat)
            #     println()
            #     println()
            # end
            # println()
        end
    end

    @testset "Compare H/D indexing $T" for T in [Float64, Float32]
        # d_{\ell}^{n,m} = \epsilon_n \epsilon_{-m} H_{\ell}^{n,m},
        epsilon(k) = k>0 ? (-1)^k : 1
        ‚Ñì‚Çò‚Çê‚Çì = 8  # This is the max explicitly coded ‚Ñì
        for m‚Ä≤‚Çò‚Çê‚Çì in 0:‚Ñì‚Çò‚Çê‚Çì
            expiŒ≤ = exp(im*rand(0:eps(T):œÄ))
            expiŒ≤NaNCheck = complex(NaNCheck{T}(expiŒ≤.re), NaNCheck{T}(expiŒ≤.im))
            NCTN = NaNCheck{T}(NaN)
            Hw = fill(NCTN, SphericalFunctions.WignerHsize(m‚Ä≤‚Çò‚Çê‚Çì, ‚Ñì‚Çò‚Çê‚Çì))
            SphericalFunctions.H2!(Hw, expiŒ≤NaNCheck, ‚Ñì‚Çò‚Çê‚Çì, m‚Ä≤‚Çò‚Çê‚Çì, SphericalFunctions.abd(‚Ñì‚Çò‚Çê‚Çì, T))
            ùîá = fill(NCTN, SphericalFunctions.WignerDsize(0, m‚Ä≤‚Çò‚Çê‚Çì, ‚Ñì‚Çò‚Çê‚Çì))
            SphericalFunctions.H2!(ùîá, expiŒ≤NaNCheck, ‚Ñì‚Çò‚Çê‚Çì, m‚Ä≤‚Çò‚Çê‚Çì, SphericalFunctions.abd(‚Ñì‚Çò‚Çê‚Çì, T), SphericalFunctions.WignerDindex)
            for n in 0:‚Ñì‚Çò‚Çê‚Çì
                for m‚Ä≤ in -min(n, m‚Ä≤‚Çò‚Çê‚Çì):min(n, m‚Ä≤‚Çò‚Çê‚Çì)
                    for m in abs(m‚Ä≤):n
                        Hnm‚Ä≤m = Hw[SphericalFunctions.WignerHindex(n, m‚Ä≤, m; m‚Ä≤‚Çò‚Çê‚Çì=m‚Ä≤‚Çò‚Çê‚Çì)]
                        ùîánm‚Ä≤m = ùîá[SphericalFunctions.WignerDindex(n, m‚Ä≤, m; m‚Ä≤‚Çò‚Çê‚Çì=m‚Ä≤‚Çò‚Çê‚Çì)]
                        @test Hnm‚Ä≤m == ùîánm‚Ä≤m
                    end
                end
            end
        end
    end

    # @testset "Group characers $T" for T in [BigFloat, Float64, Float32]
    #     ‚Ñì‚Çò‚Çê‚Çì = 100
    #     m‚Ä≤‚Çò‚Çê‚Çì = ‚Ñì‚Çò‚Çê‚Çì
    #     d = Array{T}(undef, WignerDsize(m‚Ä≤‚Çò‚Çê‚Çì, ‚Ñì‚Çò‚Çê‚Çì))
    #     ùîá = Array{Complex{T}}(undef, WignerDsize(m‚Ä≤‚Çò‚Çê‚Çì, ‚Ñì‚Çò‚Çê‚Çì))
    #     for Œ≤ in rand(0:eps(T):œÄ)
    #         d!(d, expiŒ≤, ‚Ñì‚Çò‚Çê‚Çì, m‚Ä≤‚Çò‚Çê‚Çì, abd(‚Ñì‚Çò‚Çê‚Çì, T), WignerDindex)
    #         D!(ùîá, expiŒ≤, ‚Ñì‚Çò‚Çê‚Çì, m‚Ä≤‚Çò‚Çê‚Çì, abd(‚Ñì‚Çò‚Çê‚Çì, T), WignerDindex)
    #         for j in 0:‚Ñì‚Çò‚Çê‚Çì
    #             sin_ratio = sin((2j+1)*Œ≤/2) / sin(Œ≤/2)
    #             i1 = WignerDindex(j, -j, -j)
    #             i2 = WignerDindex(j, j, j)
    #             œá ≤ = sum(d[i1:i2])
    #             @test œá ≤ ‚âà sin_ratio atol=30eps(T) rtol=30eps(T)
    #             œá ≤ = sum(ùîá[i1:i2])
    #             @test œá ≤ ‚âà sin_ratio atol=30eps(T) rtol=30eps(T)
    #         end
    #     end
    # end

end
